<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梅骏逸的博客</title>
  
  <subtitle>Talk is cheap, show me the code!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://walesexcitedmei.github.io/"/>
  <updated>2018-10-11T12:46:32.104Z</updated>
  <id>http://walesexcitedmei.github.io/</id>
  
  <author>
    <name>Wales Mei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三扇门你到底换不换？——蒙特霍尔问题！</title>
    <link href="http://walesexcitedmei.github.io/2018/10/11/%E4%B8%89%E6%89%87%E9%97%A8%E4%BD%A0%E5%88%B0%E5%BA%95%E6%8D%A2%E4%B8%8D%E6%8D%A2%EF%BC%9F%E2%80%94%E2%80%94%E8%92%99%E7%89%B9%E9%9C%8D%E5%B0%94%E9%97%AE%E9%A2%98%EF%BC%81/"/>
    <id>http://walesexcitedmei.github.io/2018/10/11/三扇门你到底换不换？——蒙特霍尔问题！/</id>
    <published>2018-10-11T12:05:59.000Z</published>
    <updated>2018-10-11T12:46:32.104Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>三门问题（也称为<a href="https://zh.wikipedia.org/wiki/%E8%92%99%E6%8F%90%E9%9C%8D%E7%88%BE%E5%95%8F%E9%A1%8C" target="_blank" rel="noopener">蒙特霍尔问题</a>），是一个经典的问题，简单概括一下就是三个门里有一个的后面由你想要的东西，你选一个门，然后打开另外两扇门中的一扇，发现那个门后面是别的，那么这时候你换不换门？</p></div><a id="more"></a><h3 id="贴一个知乎上的视频"><a href="#贴一个知乎上的视频" class="headerlink" title="贴一个知乎上的视频"></a>贴一个知乎上的视频</h3><iframe width="100%" height="600" frameborder="0" allowfullscreen src="https://www.zhihu.com/video/881160106262286336"></iframe><h3 id="顺便放个代码"><a href="#顺便放个代码" class="headerlink" title="顺便放个代码"></a>顺便放个代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> uniform</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">defCar</span><span class="params">()</span>:</span></span><br><span class="line">    i = int(uniform(<span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cpt_posb</span><span class="params">()</span>:</span></span><br><span class="line">    N = <span class="number">1000000</span></span><br><span class="line">    change = <span class="number">0</span></span><br><span class="line">    dischange = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        car = defCar()</span><br><span class="line">        doors = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">        choice = int(uniform(<span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line">        <span class="keyword">if</span> choice == car:</span><br><span class="line">            dischange += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            change += <span class="number">1</span></span><br><span class="line">    print(change / N * <span class="number">100</span>, <span class="string">"%"</span>)</span><br><span class="line">    print(dischange / N * <span class="number">100</span>, <span class="string">"%"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    cpt_posb()</span><br></pre></td></tr></table></figure><hr><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7465666912424994" data-ad-slot="3198608984"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;三门问题（也称为&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%92%99%E6%8F%90%E9%9C%8D%E7%88%BE%E5%95%8F%E9%A1%8C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;蒙特霍尔问题&lt;/a&gt;），是一个经典的问题，简单概括一下就是三个门里有一个的后面由你想要的东西，你选一个门，然后打开另外两扇门中的一扇，发现那个门后面是别的，那么这时候你换不换门？&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="概率" scheme="http://walesexcitedmei.github.io/tags/%E6%A6%82%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP 初赛] 计算机常识总结</title>
    <link href="http://walesexcitedmei.github.io/2018/10/09/NOIP-%E5%88%9D%E8%B5%9B-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B8%B8%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>http://walesexcitedmei.github.io/2018/10/09/NOIP-初赛-计算机常识总结/</id>
    <published>2018-10-09T10:25:29.000Z</published>
    <updated>2018-10-11T12:46:32.073Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>继续总结初赛内容，这次是计算机常识的总结篇。</p></div><a id="more"></a><h3 id="计算机的发展史"><a href="#计算机的发展史" class="headerlink" title="计算机的发展史"></a>计算机的发展史</h3><h4 id="计算机发展的代别划分"><a href="#计算机发展的代别划分" class="headerlink" title="计算机发展的代别划分"></a>计算机发展的代别划分</h4><table><thead><tr><th style="text-align:center">代别</th><th style="text-align:center">年代</th><th style="text-align:center">逻辑（电子元件）</th></tr></thead><tbody><tr><td style="text-align:center">第一代</td><td style="text-align:center">1946——1958</td><td style="text-align:center">电子管</td></tr><tr><td style="text-align:center">第二代</td><td style="text-align:center">1959——1964</td><td style="text-align:center">晶体管</td></tr><tr><td style="text-align:center">第三代</td><td style="text-align:center">1965——1970</td><td style="text-align:center">集成电路</td></tr><tr><td style="text-align:center">第四代</td><td style="text-align:center">1971——Today</td><td style="text-align:center">大规模、超大规模集成电路</td></tr></tbody></table><h4 id="第一台电子计算机"><a href="#第一台电子计算机" class="headerlink" title="第一台电子计算机"></a>第一台电子计算机</h4><p><strong>1946 年 2 月</strong>，在美国宾夕法尼亚大学诞生了<strong>世界上第一台电子计算机</strong> ENIAC (Electronic Numberical Integrator and Computer)，这台计算机占地 170 平方米，质量 30 吨，用了 18000 多个电子管，每秒能进行 5000 次<strong>加法运算</strong>（其实我并不知道这些数字有什么用）</p><h3 id="计算机系统结构"><a href="#计算机系统结构" class="headerlink" title="计算机系统结构"></a>计算机系统结构</h3><h4 id="中央处理器-CPU-Central-Processing-Unit"><a href="#中央处理器-CPU-Central-Processing-Unit" class="headerlink" title="中央处理器 CPU (Central Processing Unit)"></a>中央处理器 CPU (Central Processing Unit)</h4><ol><li>由运算器，控制器和一些寄存器组成；</li><li>运算器进行各种算术运算和逻辑运算；</li><li>控制器是计算机的指挥系统；</li><li>CPU 的主要指标是主频和字长。</li></ol><h5 id="字长"><a href="#字长" class="headerlink" title="字长"></a>字长</h5><p>指一台计算机所能处理的二进制代码的位数，也就是 ALU (Arithmetic and Logic Unit 算术逻辑运算单元) 的宽度。字长越大，能表示的数值范围就越大，计算出的数值的有效位数就越多，字长越长，能表示的信息就越多，机器的功能也就越强。</p><h5 id="运算速度"><a href="#运算速度" class="headerlink" title="运算速度"></a>运算速度</h5><p>指计算机<strong>每秒钟所能够执行的指令条数</strong>，一般用 MIPS (Million of Instructions Per Second 每秒百万条指令) 为单位。由于不同类型的指令执行时间长短不同，因此运算速度的计算方法也不相同</p><h5 id="主频"><a href="#主频" class="headerlink" title="主频"></a>主频</h5><p>指 CPU 的时钟频率，MHz 或 GHz 为单位</p><h5 id="各种总线"><a href="#各种总线" class="headerlink" title="各种总线"></a>各种总线</h5><table><thead><tr><th style="text-align:center">总线名称</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">数据总线</td><td style="text-align:center">决定了 CPU 和外界的数据传输速度</td></tr><tr><td style="text-align:center">地址总线</td><td style="text-align:center">决定了 CPU 能访问的最大内存空间的大小</td></tr><tr><td style="text-align:center">控制总线</td><td style="text-align:center">决定了对外部器件的控制能力</td></tr></tbody></table><h5 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h5><blockquote><p><strong>(NOIP-2009-T11)</strong> 关于 CPU 下面哪些说法是正确的 ( AB )：<br>A. CPU 全称为中央处理器（或中央处理单元）。<br>B. CPU 能直接运行机器语言。<br>C. CPU 最早是由 Intel 公司发明的。<br>D. 同样主频下，32 位的 CPU 比 16 位的 CPU 运行速度快一倍。</p></blockquote><ul><li>Intel 发明的是微处理器</li><li>CPU 的位数只能说明处理的位数，由于指令不同，很难判断哪个快</li></ul><blockquote><p><strong>(NOIP-2016-T9)</strong> 某计算机的 CPU 和内存之间的地址总线的宽度是 32 位 ( bit )，这台计算机最多可以使用 ( B ) 的内存。<br>A. 2 GB &nbsp;&nbsp;&nbsp; B. 4 GB &nbsp;&nbsp;&nbsp; C. 8 GB &nbsp;&nbsp;&nbsp; D. 16GB </p></blockquote><ul><li>这道题中主要是要先获取地址总线的宽度（一般与 ALU 的宽度相等），地址总线寻址是按照字节（$\operatorname{Byte}$）的，所以答案就是 $2^{32} \operatorname{Byte}$，也就是 $4 \operatorname{GB}$，不用管题中给出的单位。</li></ul><h4 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h4><h5 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h5><p>主存储器（也称为内存储器），<strong>属于主机的一部分</strong>。</p><ul><li>RAM 随机存储器：随机指随时读出和写入</li><li>ROM 只读存储器：例如 BIOS (Basic Input Output System) 就是固定在主板 ROM 上的一个软件</li><li>Cache：在 CPU 和内存之间设置的一级或两级的告诉小容量存储器，称为高速缓存存储器。</li></ul><h5 id="辅助存储器"><a href="#辅助存储器" class="headerlink" title="辅助存储器"></a>辅助存储器</h5><p>辅助存储器（也称为外存储器），<strong>属于外部设备</strong>。</p><ul><li>软盘存储器</li><li>硬盘存储器</li><li>闪存：存储速度介于软盘和硬盘之间的一种外部存储器</li><li>光盘：分为只读光盘，一次写入型光盘和可擦写光盘</li></ul><h5 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h5><p>CPU 的内部存储单位，存取速度最快。</p><h5 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h5><p>存储器访问速度：寄存器 &gt; Cache &gt; 内存 &gt; 外存</p><h5 id="相关题目-1"><a href="#相关题目-1" class="headerlink" title="相关题目"></a>相关题目</h5><blockquote><p><strong>(NOIP-2010-T8)</strong> 主存储器的存取速度比中央处理器(CPU)的工作速度慢的多，从而使得后者的效率受到影响。而根据局部性原理，CPU所访问的存储单元通常都趋于一个较小的连续区域中。于是，为了提高系统整体的执行效率，在CPU中引入了( B )。<br>A．寄存器  &nbsp;&nbsp;&nbsp; B．高速缓存 &nbsp;&nbsp;&nbsp; C．闪存 &nbsp;&nbsp;&nbsp; D．外存</p></blockquote><blockquote><p><strong>(NOIP-2011-T4)</strong> 4．寄存器是（ D ）的重要组成部分。<br>A. 硬盘 &nbsp;&nbsp;&nbsp; B. 高速缓存 &nbsp;&nbsp;&nbsp; C. 内存 &nbsp;&nbsp;&nbsp; D. 中央处理器（CPU）</p></blockquote><h3 id="有关人物"><a href="#有关人物" class="headerlink" title="有关人物"></a>有关人物</h3><h4 id="冯-·-诺依曼"><a href="#冯-·-诺依曼" class="headerlink" title="冯 · 诺依曼"></a>冯 · 诺依曼</h4><p>1944 年，美籍匈牙利数学家冯 · 诺伊曼提出了计算机的基本结构和工作方式的设想，为计算机的发展和诞生提供了理论基础。当今世界的计算机大部分仍属于冯 · 诺伊曼结构。他的理论要点如下：</p><ol><li>计算机硬件设备由<strong>存储器、运算器、控制器、输入设备和输出设备</strong> 5 部分组成。</li><li>存储程序思想——把计算过程描述为由许多命令按一定顺序组成的程序，然后把程序和数据一起输入计算机，计算机对已存入的程序和数据处理后，输出结果。</li></ol><p>冯 · 诺依曼还<strong>设计出第一台具有存储程序功能的计算机</strong> EDVAC (Electronic Discrete Variable Automatic Computer 离散变量自动电子计算机)</p><h4 id="图灵（1912-6-23-——-1954-6-7）"><a href="#图灵（1912-6-23-——-1954-6-7）" class="headerlink" title="图灵（1912.6.23 —— 1954.6.7）"></a>图灵（1912.6.23 —— 1954.6.7）</h4><p>艾伦 · 图灵：1913 年，图灵进入剑桥大学国王学院，毕业后到美国普林斯顿大学攻读博士学位，二战爆发后回到剑桥，后曾协助军方破解德国著名密码系统 Enigma，帮助盟军取得了二战胜利。图灵提出的图灵机模型为现代计算机的<strong>逻辑工作方式</strong>奠定了基础。图灵也是<strong>计算机科学理论基础</strong>第一人。</p><h4 id="Ada-Lovelace"><a href="#Ada-Lovelace" class="headerlink" title="Ada Lovelace"></a>Ada Lovelace</h4><p>这个人考试中最多考一下她是<strong>世界上第一个给计算机写程序</strong>的人，<strong>曾对现代计算机技术之父查尔斯 · 巴贝奇的笔记手稿进行了整理和修正</strong>。同时在 1980 年 12 月 10 日，美国国防部制作了一个新的计算器编程语言 Ada。如果想要更深入地了解这个人<a href="https://zh.wikipedia.org/wiki/%E6%84%9B%E9%81%94%C2%B7%E5%8B%92%E8%8A%99%E8%95%BE%E7%B5%B2" target="_blank" rel="noopener">点这里</a>。</p><h4 id="克劳德-·-香农（1916-4-30-——-2001-2-26）"><a href="#克劳德-·-香农（1916-4-30-——-2001-2-26）" class="headerlink" title="克劳德 · 香农（1916.4.30 —— 2001.2.26）"></a>克劳德 · 香农（1916.4.30 —— 2001.2.26）</h4><p>克劳德 · 艾尔伍德 · 香农（Claude Elwood Shannon），美国数学家、电子工程师和密码学家，被誉为信息论的创始人。是密歇根大学学士，麻省理工学院博士。1948 年，他将热力学中的熵的概念引入信息通信领域，标志着信息论研究的开端。</p><hr><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7465666912424994" data-ad-slot="3198608984"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;继续总结初赛内容，这次是计算机常识的总结篇。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 初赛" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E5%88%9D%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP 初赛] 总结 &lt;苹果放盘子问题&gt; (POJ1664)</title>
    <link href="http://walesexcitedmei.github.io/2018/10/08/NOIP-%E5%88%9D%E8%B5%9B-%E6%80%BB%E7%BB%93-%E8%8B%B9%E6%9E%9C%E6%94%BE%E7%9B%98%E5%AD%90%E9%97%AE%E9%A2%98-POJ1664/"/>
    <id>http://walesexcitedmei.github.io/2018/10/08/NOIP-初赛-总结-苹果放盘子问题-POJ1664/</id>
    <published>2018-10-08T11:51:02.000Z</published>
    <updated>2018-10-11T12:46:32.073Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>初赛模拟测试错了一道简单题，似乎还是一道陈年老题，网上去查了一下，似乎还和 <a href="http://poj.org/problem?id=1664" target="_blank" rel="noopener">POJ 1663</a> 这道水题一模一样，这里总结一下</p></div><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>大意：有 $m$ 个一模一样的苹果放入 $n$ 个一模一样的盘子中，求放法的数量 $k$。<br>注意：对于 $m=7,n=3$ 这组数据：$5,1,1$ 和 $1,5,1$ 是一样的。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们来分类讨论，令 $\operatorname{f}(m,n)$ 表示放法的数量 $k$，</p><ol><li>$m&lt; n$，此时我们把多余的盘子拿掉，$\operatorname{f}(m,n)=\operatorname{f}(m,m)$</li><li>$m\geqslant n$，此时我们再分两类来讨论：有盘子空着和没有盘子空着。有盘子空着时，$\operatorname{f}(m,n)=\operatorname{f}(m,n-1)$；没有盘子空着时，$\operatorname{f}(m,n)=\operatorname{f}(m-n,n)$<br>于是我们得出 $\operatorname{f}(m, n)$ 的表达式：</li></ol><p>$$<br>\operatorname{f}(m,n)=<br>\begin{cases}<br>1 &amp; \text{when $m=0$ or $n=1$} \\<br>\operatorname{f}(m,m) &amp; \text{when $m&lt; n$} \\<br>\operatorname{f}(m,n-1)+\operatorname{f}(m-n,n) &amp; \text{otherwise}<br>\end{cases}<br>$$</p><p>所以我们就可以写出 POJ 1664 的代码了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (m &lt; n) <span class="keyword">return</span> f(m, m);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> f(m, n - <span class="number">1</span>) + f(m - n, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m, n, t;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">  <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f(m, n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至于初赛中的那道题嘛，手动打表就可以了，应该还挺快的（似乎还可以直接暴力枚举……）。</p><hr><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7465666912424994" data-ad-slot="3198608984"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;初赛模拟测试错了一道简单题，似乎还是一道陈年老题，网上去查了一下，似乎还和 &lt;a href=&quot;http://poj.org/problem?id=1664&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;POJ 1663&lt;/a&gt; 这道水题一模一样，这里总结一下&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 初赛" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E5%88%9D%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP 模拟] 记录一道玄学的题目</title>
    <link href="http://walesexcitedmei.github.io/2018/10/05/NOIP-%E6%A8%A1%E6%8B%9F-%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E7%8E%84%E5%AD%A6%E7%9A%84%E9%A2%98%E7%9B%AE/"/>
    <id>http://walesexcitedmei.github.io/2018/10/05/NOIP-模拟-记录一道玄学的题目/</id>
    <published>2018-10-05T07:17:57.000Z</published>
    <updated>2018-10-11T12:46:32.104Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>今天的第二道题实在是坑，考场上暴力都不能一次打对，最后订正的时候还 WA 了 20 多次，简直太坑了啊！！😭😭😭😭</p></div><a id="more"></a><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给出一个长度为 $n$ 数列，和 $m$ 次询问，每次求出一个区间 $[l,r]$ 的和然后将该区间的所有数变为原来的平方然后模上 $c=2305843008676823040$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这道题给我的第一个感觉就是：这个模数太灵魂了，这么长而且还不是个质数（$c = 2^{29}\times 3\times 5\times 17\times 257\times 65537$）。于是打了个表，发现一个数平方了几十次之后就是一个定值了，所以可以考虑优化暴力以及优化区间查询和修改，所以就自然而然的想到了线段树（当然了，似乎纯暴力修改或者分块什么的……）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 70000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> modn 2305843008676823040</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> uint64;</span><br><span class="line"><span class="comment">// 数据太大了，开个 unsigned long long 防止爆（似乎 long long 就可以了）</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segmentTreeNode</span> &#123;</span> <span class="keyword">int</span> l, r; uint64 sum; <span class="keyword">bool</span> flag; &#125;;</span><br><span class="line"><span class="comment">// 裸线段树</span></span><br><span class="line">segmentTreeNode t[maxn * <span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, x, y;</span><br><span class="line">uint64 a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(x) t[x].l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(x) t[x].r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sum(x) t[x].sum</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> flag(x) t[x].flag</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> uint64 <span class="title">mul</span><span class="params">(uint64 a, uint64 b)</span> </span>&#123;</span><br><span class="line">  uint64 ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ans = (ans + a) % modn;</span><br><span class="line">    a = (a + a) % modn;</span><br><span class="line">    b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125; <span class="comment">// 快速乘，防爆装备</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  l(p) = l; r(p) = r; flag(p) = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123; sum(p) = a[l]; <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  build(p * <span class="number">2</span>, l, mid);</span><br><span class="line">  build(p * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">  sum(p) = sum(p * <span class="number">2</span>) + sum(p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">  sum(p) %= modn; <span class="comment">// 别忘记模！！！</span></span><br><span class="line">  flag(p) = flag(p * <span class="number">2</span>) &amp;&amp; flag(p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 玄学更新</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> uint64 <span class="title">query</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &lt;= l(p) &amp;&amp; r(p) &lt;= r) <span class="keyword">return</span> sum(p);</span><br><span class="line">  <span class="keyword">int</span> mid = (l(p) + r(p)) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  uint64 val = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (l &lt;= mid) (val += query(p * <span class="number">2</span>, l, r)) %= modn;</span><br><span class="line">  <span class="keyword">if</span> (r &gt; mid) (val += query(p * <span class="number">2</span> + <span class="number">1</span>, l, r)) %= modn;</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (flag(p)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (l(p) == r(p)) &#123;</span><br><span class="line">    uint64 tmp = mul(sum(p), sum(p));</span><br><span class="line">    <span class="keyword">if</span> (tmp == sum(p)) flag(p) = <span class="literal">true</span>;</span><br><span class="line">    sum(p) = tmp;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (l(p) + r(p)) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (l &lt;= mid) update(p * <span class="number">2</span>, l, r);</span><br><span class="line">  <span class="keyword">if</span> (r &gt; mid) update(p * <span class="number">2</span> + <span class="number">1</span>, l, r);</span><br><span class="line">  sum(p) = sum(p * <span class="number">2</span>) + sum(p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">  sum(p) %= modn; <span class="comment">// 别忘记模！！！</span></span><br><span class="line">  flag(p) = flag(p * <span class="number">2</span>) &amp;&amp; flag(p * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">  <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">  build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">  <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; query(<span class="number">1</span>, x, y) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    update(<span class="number">1</span>, x, y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，接下来证明一下为什么会变成一个定值。因为：<br>$$<br>c = 2305843008676823040 = 2^{29}\times 3\times 5\times 17\times 257\times 65537<br>$$<br>所以我们可以知道：<br>$$<br>\varphi(c)=2^{28}\times 2\times 4\times 256\times 65536=2^{59}<br>$$<br>然后我们来分类讨论对于一个数 $x$，如果 $\gcd(x, c)=1$，那么根据费马-欧拉定理：<br>$$<br>x^{\varphi(c)}\equiv 1\pmod c<br>$$<br>所以 $x^{59}$ 之后它就是 $1$ 了。如果 $\gcd(x, c)\neq 1$：</p><ol><li>如果 $x=c$，那么显然，$x$ 会变成一个定值</li><li>如果 $x\neq c$，那么我们一定可以从 $c$ 中分离出一个 $c’$ 使得 $\gcd(x,c’)=1$，而 $\varphi(c’)&lt;59$，所以 $x$ 在 $59$ 次方前就可以变成一个定值。</li></ol><p>证毕，太妙了！</p><hr><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7465666912424994" data-ad-slot="3198608984"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;今天的第二道题实在是坑，考场上暴力都不能一次打对，最后订正的时候还 WA 了 20 多次，简直太坑了啊！！😭😭😭😭&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 模拟" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="线段树" scheme="http://walesexcitedmei.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="数论" scheme="http://walesexcitedmei.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>心态调崩：一道暴力 AC 的题</title>
    <link href="http://walesexcitedmei.github.io/2018/10/05/%E5%BF%83%E6%80%81%E8%B0%83%E5%B4%A9%EF%BC%9A%E4%B8%80%E9%81%93%E6%9A%B4%E5%8A%9B-AC-%E7%9A%84%E9%A2%98/"/>
    <id>http://walesexcitedmei.github.io/2018/10/05/心态调崩：一道暴力-AC-的题/</id>
    <published>2018-10-05T06:55:07.000Z</published>
    <updated>2018-10-11T12:46:32.104Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>今天有是令人愉悦的国庆七连测，第一道题整整卡了我两个小时！！都没时间去思考第三道题😭😭。然而做出来了之后却发现是如此的弱智。。。</p></div><a id="more"></a><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>你有一个图，你从最左下角的点开始，可以向上或向下走 不大于 $h$ 的单位到另一个 <code>#</code>，或者在同一层相连的 <code>#</code>，求能走到终点 $(x,y)$ 的 $h$ 的最小值。</p><h3 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入/输出"></a>输入/输出</h3><p><strong>[样例输入]</strong></p><pre><code>5 8####_______#_######__#________#_########2 4</code></pre><p><strong>[样例输出]</strong></p><pre><code>2</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>嗯……这道题可以直接 BFS 模拟然后每次找 $h$ 的时候二分答案就可以过了。考试的时候我是用最小生成树做的，因为最小生成树有一个性质：最短的边一定会被包含在 MST 中，这也是 Kruskal 算法的原理。<strong>所以我们在做 Kruskal 的时候就可以用并查集来判断一下最左下角的点和目标点是否已经连通，如果连通就可以跳出了</strong>也就是这个地方让我思考了一年，一开始还在想怎么在做完 Kruskal 之后搜索路径……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1010</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edgeNode</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> vertexTo;</span><br><span class="line">  <span class="keyword">int</span> vertexFrom;</span><br><span class="line">  <span class="keyword">int</span> edgeNext;</span><br><span class="line">  <span class="keyword">int</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这个地方其实不需要前向星，一开始想错了才打成这个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">edgeNode edges[maxn * maxn * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> heads[maxn * maxn* <span class="number">2</span>], numEdges = <span class="number">0</span>, fa[maxn * maxn], ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> dat[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">  numEdges++;</span><br><span class="line">  edges[numEdges].vertexTo = vertex2;</span><br><span class="line">  edges[numEdges].vertexFrom = vertex1;</span><br><span class="line">  edges[numEdges].weight = weight;</span><br><span class="line">  edges[numEdges].edgeNext = heads[vertex1];</span><br><span class="line">  heads[vertex1] = numEdges;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addDuplexEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">  addEdge(vertex1, vertex2, weight);</span><br><span class="line">  addEdge(vertex2, vertex1, weight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(edgeNode&amp; a, edgeNode&amp; b) &#123;</span><br><span class="line">  <span class="keyword">return</span> a.weight &lt; b.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fa[x] == x ? x : (fa[x] = get(fa[x]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (x - <span class="number">1</span>) * m + y;</span><br><span class="line">&#125; <span class="comment">// 点的有序数对转序号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= numEdges; ++i) &#123;</span><br><span class="line">    <span class="keyword">int</span> u = get(edges[i].vertexFrom);</span><br><span class="line">    <span class="keyword">int</span> v = get(edges[i].vertexTo);</span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">continue</span>;</span><br><span class="line">    fa[u] = v;</span><br><span class="line">    ans = max(ans, edges[i].weight);</span><br><span class="line">    <span class="keyword">if</span> (get(change(x, y)) == get(change(n, <span class="number">1</span>))) <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 弹出</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"mario.in"</span>)</span></span>;</span><br><span class="line">  <span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"mario.out"</span>)</span></span>;</span><br><span class="line">  <span class="comment">// 懒得打快读 QAQ</span></span><br><span class="line">  in &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="built_in">memset</span>(dat, <span class="literal">false</span>, <span class="keyword">sizeof</span>(dat));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">      in &gt;&gt; ch;</span><br><span class="line">      dat[i][j] |= (ch == <span class="string">'#'</span>); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  in &gt;&gt; x &gt;&gt; y;</span><br><span class="line">  <span class="comment">////////////////////////////////////////////</span></span><br><span class="line">  <span class="built_in">memset</span>(heads, <span class="number">-1</span>, <span class="keyword">sizeof</span>(heads));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!dat[k][i]) k++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = k + <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (dat[j][i]) &#123;</span><br><span class="line">        addDuplexEdge(change(k, i), change(j, i), j - k);</span><br><span class="line">        k = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!dat[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (!dat[i][j + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">else</span> addDuplexEdge(change(i, j), change(i, j + <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">/////////////////// 加边 ///////////////////</span></span><br><span class="line">  <span class="comment">////////////////////////////////////////////</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">      fa[change(i, j)] = change(i, j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sort(edges + <span class="number">1</span>, edges + numEdges + <span class="number">1</span>);</span><br><span class="line">  kruskal();</span><br><span class="line">  out &lt;&lt; ans;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7465666912424994" data-ad-slot="3198608984"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;今天有是令人愉悦的国庆七连测，第一道题整整卡了我两个小时！！都没时间去思考第三道题😭😭。然而做出来了之后却发现是如此的弱智。。。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 模拟" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="最小生成树" scheme="http://walesexcitedmei.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>猴排！？一道高考题！？出题人的无下限猴子专场!</title>
    <link href="http://walesexcitedmei.github.io/2018/10/03/%E7%8C%B4%E6%8E%92%EF%BC%81%EF%BC%9F%E4%B8%80%E9%81%93%E9%AB%98%E8%80%83%E9%A2%98%EF%BC%81%EF%BC%9F%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E6%97%A0%E4%B8%8B%E9%99%90%E7%8C%B4%E5%AD%90%E4%B8%93%E5%9C%BA/"/>
    <id>http://walesexcitedmei.github.io/2018/10/03/猴排！？一道高考题！？出题人的无下限猴子专场/</id>
    <published>2018-10-03T06:40:16.000Z</published>
    <updated>2018-10-11T12:46:32.104Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>今天模拟测的第一道题实在是妙，本以为是简单排序，但是发现某些数据下过不了，后来想打暴力，但是怕直接被 T 掉，于是使用了全世界最好的<a href="https://zh.wikipedia.org/wiki/Bogo%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">猴子排序</a>，骗了个 35 分。。。。。。</p></div><a id="more"></a><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Coder Jun 当年没有经历高考就直接保送进了名牌大学，如今孩子都上初中了，想想保送政策已经取消，孩子过几年铁定要参加高考，心里非常着急，于是决定抽空做些高考题，好给孩子传授传授经验。于是他遇到了这样一道高考题。题目给你了 $N$ 个二元组，其中第i个二元组表示为 $(A_i,B_i)$。使用这个二元组，我们可以构造出另一个序列 $T$，构造方法如下：</p><ol><li>当 $i=1$ 时，$T_i=A_i+B_i$</li><li>当 $i\neq 1$ 时，$T_i=B_i+\max\lbrace T_{i-1},\sum_{j=1}^i A_j\rbrace$</li></ol><p>由于计算T时需要用到 <code>max</code> 函数令 Coder Jun 感到非常不爽，所以 Coder Jun 想让你帮他来最小化 $T_N$ 的值，即你需要对这 $N$ 个二元组进行重排，使得 $T_N$ 的值最小。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="骗分算法"><a href="#骗分算法" class="headerlink" title="骗分算法"></a>骗分算法</h4><p>嗯，反正题目中说的就是重排，而我又不知道怎么排，那当然就是猴排了…… 35分骗分代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> int64;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tuple</span> &#123;</span> <span class="keyword">int</span> A; <span class="keyword">int</span> B; &#125;;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">Tuple tuple[maxn];</span><br><span class="line"><span class="comment">// 这个 tuple 在某些地方好像会编译出错......</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, int64&gt; mp;</span><br><span class="line">int64 ans = (<span class="number">1</span> &lt;&lt; <span class="number">30</span>), prefix[maxn];</span><br><span class="line"><span class="built_in">string</span> sit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  prefix[<span class="number">1</span>] = tuple[<span class="number">1</span>].A; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) prefix[i] = prefix[i - <span class="number">1</span>] + tuple[i].A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> int64 <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  int64 T_i_1, T_i;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">      T_i = tuple[i].A + tuple[i].B; T_i_1 = T_i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      T_i = tuple[i].B + max(T_i_1, prefix[i]); T_i_1 = T_i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> T_i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">hash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">ostringstream</span> ret;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) ret &lt;&lt; tuple[i].A &lt;&lt; <span class="string">" "</span> &lt;&lt; tuple[i].B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> ret.str();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"gaokao.in"</span>)</span></span>;</span><br><span class="line">  <span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"gaokao.out"</span>)</span></span>;</span><br><span class="line">  srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">  in &gt;&gt; N;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123; in &gt;&gt; tuple[i].A &gt;&gt; tuple[i].B; &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000000</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (clock() &gt;= <span class="number">600</span>) <span class="keyword">break</span>;</span><br><span class="line">    prepare(); mp[hash()] = calc();</span><br><span class="line">    <span class="keyword">if</span> (clock() &gt;= <span class="number">600</span>) <span class="keyword">break</span>;</span><br><span class="line">    random_shuffle(tuple + <span class="number">1</span>, tuple + N + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (clock() &gt;= <span class="number">600</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 骗分精髓之处，极限卡时</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="built_in">string</span>, int64&gt;::iterator iter;</span><br><span class="line">  <span class="keyword">for</span> (iter = mp.begin(); iter != mp.end(); ++iter)</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; iter-&gt;second) &#123; ans = iter-&gt;second; sit = iter-&gt;first; &#125;</span><br><span class="line">  out &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span> &lt;&lt; sit;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码看看开心一下就好，虽然说对于某些数据是可能对的，但是还是要看人品。</p><h4 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h4><p>先双手送上<a href="https://www.luogu.org/problemnew/show/P2123" target="_blank" rel="noopener">洛谷上的原题</a>👍。<br>首先，我们来了解一下<a href="https://zh.wikipedia.org/wiki/%E5%81%8F%E5%BA%8F%E5%85%B3%E7%B3%BB" target="_blank" rel="noopener">偏序关系</a>这个东西，我们其实只要明白严格偏序和非严格偏序的性质就行了（主要是传递性这个东西）。然后我们就可以开始求解这道题了。这道题无非就是找出一个排序方法来令所有的情况下的结果最小或最大。因为我们有公式：</p><p>$$<br>T_i=<br>\begin{cases}<br>A_i+B_i &amp; \text{when $i=1$} \\<br>B_i+\max\lbrace T_{i-1},\sum_{j=1}^i A_j\rbrace &amp; \text{when $i\neq1$}<br>\end{cases}<br>$$</p><p>所以 $T_i\geqslant T_{i-1}$ 是严格递增的。然后我们用相邻交换法来考虑偏序关系（排序的方法）。对于某两个元组 $(A_i,B_i)$ 和 $(A_{i+1}, B_{i+1})$，如果我们不交换，那么：</p><p>$$<br>\begin{aligned}<br>\max\lbrace T_i, T_{i+1}\rbrace = {}&amp; T_{i+1} {} \\<br>= {}&amp; B_{i+1}+\max\lbrace T_{i},\sum_{j=1}^{i+1}A_j\rbrace {} \\<br>= {}&amp; B_{i+1}+\max\lbrace B_i+\max\lbrace T_{i-1},\sum_{j=1}^i A_j\rbrace,\sum_{j=1}^{i+1}A_j\rbrace<br>\end{aligned}<br>$$</p><p>我们令 $S=\sum_{j=1}^{i-1}A_j$，那么上式可以表示为：</p><p>$$<br>\max\lbrace T_i,T_{i+1}\rbrace=B_{i+1}+\max\lbrace B_i+\max\lbrace T_{i-1},S+A_i\rbrace,S+A_i+A_{i+1}\rbrace<br>$$</p><p>即：</p><p>$$<br>\max\lbrace T_i,T_{i+1}\rbrace=\max\lbrace \left(T_{i-1}+B_i+B_{i+1}\right),\left(S+A_i+B_i+B_{i+1}\right),\left(S+A_i+A_{i+1}+B_{i+1}\right)\rbrace<br>$$</p><p>如果这两个元组交换，那么 $\max\lbrace T_i,T_{i+1}\rbrace=T_i$，即：</p><p>$$<br>\begin{aligned}<br>\max\lbrace T_i,T_{i+1}\rbrace=\max\lbrace \left(T_{i-1}+B_i+B_{i+1}\right),\left(S+A_{i+1}+B_i+B_{i+1}\right),\left(S+A_i+A_{i+1}+B_i\right)\rbrace<br>\end{aligned}<br>$$</p><p>我们不妨设不交换更优，那么我们可以得到：</p><p>$$<br>\begin{aligned}<br>{}&amp; \max\lbrace \left(T_{i-1}+B_i+B_{i+1}\right),\left(S+A_i+B_i+B_{i+1}\right),\left(S+A_i+A_{i+1}+B_{i+1}\right)\rbrace\leqslant {} \\<br>{}&amp; \max\lbrace \left(T_{i-1}+B_i+B_{i+1}\right),\left(S+A_{i+1}+B_i+B_{i+1}\right),\left(S+A_i+A_{i+1}+B_i\right)\rbrace<br>\end{aligned}<br>$$</p><p>所以我们现在就需要思考如何删去 $\left(T_{i-1}+B_i+B_{i+1}\right)$ 这一项了。考虑对于一个不等式 $\max\lbrace a,c\rbrace\leqslant\max\lbrace b,c\rbrace$，如果我们删去 $c$，那么就变成了 $a\leqslant c$，如果这个不等式成立，那么我们不用管，如果不成立，我们就可以进行交换，于是，我们判断更优条件就变成了</p><p>$$<br>\begin{aligned}<br>{}&amp; \max\lbrace \left(S+A_i+B_i+B_{i+1}\right),\left(S+A_i+A_{i+1}+B_{i+1}\right)\rbrace\leqslant {} \\<br>{}&amp; \max\lbrace \left(S+A_{i+1}+B_i+B_{i+1}\right),\left(S+A_i+A_{i+1}+B_i\right)\rbrace<br>\end{aligned}<br>$$</p><p>两边消去 $S$：</p><p>$$<br>\begin{aligned}<br>{}&amp; \max\lbrace \left(A_i+B_i+B_{i+1}\right),\left(A_i+A_{i+1}+B_{i+1}\right)\rbrace\leqslant {} \\<br>{}&amp; \max\lbrace \left(A_{i+1}+B_i+B_{i+1}\right),\left(A_i+A_{i+1}+B_i\right)\rbrace<br>\end{aligned}<br>$$</p><p>化简得：</p><p>$$<br>\max\lbrace A_{i+1},B_i\rbrace+A_i+B_{i+1}\leqslant\max\lbrace A_i,B_{i+1}\rbrace+A_{i+1}+B_i<br>$$</p><p>移项：</p><p>$$<br>\max\lbrace A_{i+1},B_i\rbrace-A_{i+1}-B_i\leqslant\max\lbrace A_i,B_{i+1}\rbrace-A_i-B_{i+1}<br>$$</p><p>我们可以发现，两边式子中大的数被删去了，留下的是小的数的相反数，所以，我们了可以得到：</p><p>$$<br>-\min\lbrace A_{i+1},B_i\rbrace\leqslant -\min\lbrace A_i, B_{i+1}\rbrace<br>$$</p><p>即：</p><p>$$<br>\min\lbrace A_i, B_{i+1}\rbrace\leqslant\min\lbrace A_{i+1},B_i\rbrace<br>$$</p><p>这也就是我们判断更优的条件了，但是细细一想，发现不对，这个式子不满足偏序的传递性啊！举个例子：</p><pre><code>7 31 11 6</code></pre><p>显然，这样可以是排完序后的结果，因为两两之间用条件判断都是等于。这样算出来答案是 $17$。而如果这样排：</p><pre><code>1 11 67 3</code></pre><p>答案是 $12$，显然这样更优。所以这个偏序关系并不能得出最优解。</p><p>我们从 $A, B$ 的大小关系来分三组考虑：</p><ol><li>$A_i&lt;B_i,A_{i+1}&lt;B_{i+1}$ 时，$A_i\leqslant A_{i+1}$，按照 $A$ 升序排序</li><li>$A_i=B_i,A_{i+1}=B_{i+1}$ 时，随便这么排都可以</li><li>$A_i&gt;B_i,A_{i+1}&gt;B_{i+1}$ 时，$B_i\geqslant B_{i+1}$，按照 $B$ 来降序排序</li></ol><p>接下来思考这三组如何排序：</p><ol><li><strong>$1$ 组和 $2$ 组，$1$ 组在 $2$ 组前肯定能保证满足条件。</strong></li><li><strong>$2$ 组和 $3$ 组，$2$ 组在 $3$ 组前面肯定能保证满足条件。</strong></li><li><strong>那么 $1$ 组在前，$2$ 组在中，$3$ 组在后，是肯定能保证满足要求的。</strong></li></ol><p>我们令 $C_i=\operatorname{sgn}(A_i - B_i)$，则对于 $1$ 组 $C=-1$，对于 $2$ 组 $C=0$，对于第三组 $C=1$，所以最终的排序方法是：<strong>先按 $C$ 值排序；然后若 $C$ 值小于等于 $0$，按 $A$ 升序排序（这里把 $2$ 组归入 $1$ 组）；若 $C$ 值大于 $0$，则按 $B$ 降序排序</strong>。</p><p>正确代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20010</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> int64;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TU</span> &#123;</span> int64 A, B, C; &#125;;</span><br><span class="line"></span><br><span class="line">int64 N, p[maxn];</span><br><span class="line">TU t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(TU a, TU b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a.C != b.C) <span class="keyword">return</span> a.C &lt; b.C;</span><br><span class="line">  <span class="keyword">if</span> (a.C &lt;= <span class="number">0</span>) <span class="keyword">return</span> a.A &lt; b.A;</span><br><span class="line">  <span class="keyword">return</span> a.B &gt; b.B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  freopen(<span class="string">"gaokao.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">"gaokao.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;N);</span><br><span class="line">  <span class="keyword">for</span> (int64 i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;t[i].A, &amp;t[i].B);</span><br><span class="line">    <span class="keyword">if</span> (t[i].A &gt; t[i].B) t[i].C = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t[i].A &lt; t[i].B) t[i].C = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> t[i].C = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sort(t + <span class="number">1</span>, t + N + <span class="number">1</span>, cmp);</span><br><span class="line">  p[<span class="number">1</span>] = t[<span class="number">1</span>].A;</span><br><span class="line">  int64 Ti1, Ti;</span><br><span class="line">  <span class="keyword">for</span> (int64 i = <span class="number">2</span>; i &lt;= N; ++i) p[i] = p[i - <span class="number">1</span>] + t[i].A;</span><br><span class="line">  <span class="keyword">for</span> (int64 i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">      Ti = t[i].A + t[i].B;</span><br><span class="line">      Ti1 = Ti;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Ti = t[i].B + max(Ti1, p[i]);</span><br><span class="line">      Ti1 = Ti;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, T_i);</span><br><span class="line">  <span class="keyword">for</span> (int64 i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, t[i].A, t[i].B);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7465666912424994" data-ad-slot="3198608984"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;今天模拟测的第一道题实在是妙，本以为是简单排序，但是发现某些数据下过不了，后来想打暴力，但是怕直接被 T 掉，于是使用了全世界最好的&lt;a href=&quot;https://zh.wikipedia.org/wiki/Bogo%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;猴子排序&lt;/a&gt;，骗了个 35 分。。。。。。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 模拟" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP 模拟] 一次出卷老师把题目出反的模拟赛</title>
    <link href="http://walesexcitedmei.github.io/2018/10/01/NOIP-%E6%A8%A1%E6%8B%9F-%E4%B8%80%E6%AC%A1%E5%87%BA%E5%8D%B7%E8%80%81%E5%B8%88%E6%8A%8A%E9%A2%98%E7%9B%AE%E5%87%BA%E5%8F%8D%E7%9A%84%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    <id>http://walesexcitedmei.github.io/2018/10/01/NOIP-模拟-一次出卷老师把题目出反的模拟赛/</id>
    <published>2018-10-01T07:35:03.000Z</published>
    <updated>2018-10-11T12:46:32.088Z</updated>
    
    <content type="html"><![CDATA[<div class="note success"><p><strong>在这里先祝祖国母亲生日快乐，以及成为世界上存在时间最长的社会主义国家！😊😊</strong>。</p></div><div class="note default"><p>好了，说今天这套题目，隶属于国庆七连测😭，第一道题最恶心，第二题最难想，第三道题最简单。</p></div><a id="more"></a><h3 id="T1-bread"><a href="#T1-bread" class="headerlink" title="T1 bread"></a>T1 bread</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><pre><code>N 个数，M 次操作，给出两个参数 p, q，第i次染色将区间 (i * p + q) % N + 1 和 (i * q + p) % N + 1 之间的数变为 i（后面的操作将前面的覆盖）输入 M, N, p, q输出每个数的最终数字100% 数据 n &lt;= 1e6, m &lt;= 1e7m * p + q, m * q + p 在 int 范围内</code></pre><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>一开始看到这道题是懵逼的，先打了一波暴力模拟，最大的数据跑一年都跑不出来，于是开始思考更好的算法，后来在某大佬的提示下，想到了并查集的做法。<br>先打表，发现在 $M &gt; N$ 时，区间是会有循环的，并且是 $N$ 次一循环，而这道题中最后某个点的颜色是以最后一次染色为准的，所以只要对 $\max\lbrace M - N + 1, 1\rbrace$ 到 $M$ 这几次操作进行运算即可。但是发现这样还是会超时，因为区间是会有重复的，这会造成冗余的复杂度，所以需要考虑如何将这些运算去掉。考虑倒序进行处理，当我们对区间 $[l, r]$ 进行处理时，对于我们遇到的每一个点 $k$ 有两种情况：</p><ol><li>$k$ 未被更新过。</li><li>$k$ 已经被更新过了，那么上次更新时它所在区间的所有的点也都被更新过了。</li></ol><p>从 $r$ 向前到 $l$ 进行更新，我们记录点 $k$ 上次更新时的左边界 $l’$，若 $k$ 被更新过，那么直接跳到 $l’-1$ 再继续向前更新。那为什么要用并查集呢？因为若 $l’-1$ 也被更新过了，就可以直接跳到更前面，进一步减少冗余运算，同时也防止数据卡我们。</p><p>贴上代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nextchar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class="line">  <span class="keyword">return</span> (p1 == p2) &amp;&amp;</span><br><span class="line">    (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, <span class="number">100000</span>, <span class="built_in">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123; sign |= (ch == <span class="string">'-'</span>); ch = nextchar(); &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123; x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>); ch = nextchar(); &#125;</span><br><span class="line">  x = sign ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> stk[<span class="number">100</span>], top = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (x == <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'0'</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>); x = -x; &#125;</span><br><span class="line">  <span class="keyword">while</span> (x) &#123; stk[++top] = x % <span class="number">10</span>; x /= <span class="number">10</span>; &#125;</span><br><span class="line">  <span class="keyword">while</span> (top) <span class="built_in">putchar</span>(stk[top--] + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PAINT</span> &#123;</span> <span class="keyword">int</span> l, r; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 10000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, p, q, ans[maxn], fa[maxn];</span><br><span class="line"><span class="keyword">bool</span> painted[maxn];</span><br><span class="line">PAINT paint[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fa[x] == x) <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">return</span> fa[x] = get(fa[x]);</span><br><span class="line">  <span class="comment">// 这里交的时候打成了 fa[x] == get(fa[x]) TAT</span></span><br><span class="line">  <span class="comment">// 然而只 WA  了一个点 orz</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  freopen(<span class="string">"bread.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">"bread.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  read(N); read(M); read(p); read(q);</span><br><span class="line">  <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) fa[i] = i;</span><br><span class="line">  <span class="keyword">int</span> low = max(M - N + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = M; i &gt;= low; --i) &#123;</span><br><span class="line">    <span class="keyword">int</span> l = min((i * p + q) % N + <span class="number">1</span>, (i * q + p) % N + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> r = max((i * p + q) % N + <span class="number">1</span>, (i * q + p) % N + <span class="number">1</span>);</span><br><span class="line">    paint[i].l = l;</span><br><span class="line">    paint[i].r = r;</span><br><span class="line">  &#125; <span class="comment">// 防止区间出错，因为又可能出现 l &gt; r 的情况。</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = M; i &gt;= low; --i) &#123;</span><br><span class="line">    <span class="keyword">int</span> l = paint[i].l;</span><br><span class="line">    <span class="keyword">int</span> r = paint[i].r;</span><br><span class="line">    <span class="keyword">int</span> j = r;</span><br><span class="line">    <span class="keyword">while</span> (j &gt;= l) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ans[j] == <span class="number">0</span>) &#123;</span><br><span class="line">        ans[j] = i;</span><br><span class="line">        fa[j] = get(l);</span><br><span class="line">        j--;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; j = fa[j] - <span class="number">1</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123; write(ans[i]); <span class="built_in">puts</span>(<span class="string">""</span>); &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="T2-divide"><a href="#T2-divide" class="headerlink" title="T2 divide"></a>T2 divide</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><pre><code>你有 n1 个 1，n2 个 2, n3 个 3, n4 个 4, n5 个 5, n6 个 6，问能否将他们分成两部分使得两部分的和相等输入 第一行一个整数n，之后n行每行六个整数n1, n2, n3, n4, n5, n6输出 如果可以输出 &quot;Can be divided.&quot;，不行输出 &quot;Can&apos;t be divided.&quot;</code></pre><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>这道题老师来说了下 $n$ 最大有 $5000$，于是坚信了这道题是数论题 TAT。所以思考的角度完全错误，直接爆零。<br>比赛结束后知道了应该用背包做，但是裸的多重背包会 TLE，更何况有 $5000$ 的数据，所以去阅读了标程，发现了原来正解是一个很神奇的 dp。</p><p>首先我们令 $f[i][j]$ 表示当总和为 $j$ 时，$i$ 这个数还可以使用的个数，$a[i]$ 表示 $i$ 这个数可以使用的总个数，于是我们有动态规划方程如下：</p><p>$$<br>f[i][j] =<br>\begin{cases}<br>a[i], &amp; \text{when $f[i - 1][j]\geqslant 0$} \\<br>f[i][j - i] - 1, &amp; \text{when $j\geqslant i$ and $f[i - 1][j]\leqslant 0$} \\<br>-1, &amp; \text{otherwise}<br>\end{cases}\\<br>\text{There is a solution only when $f[6][\frac{\sum_{i = 1}^6 a[i]\times i}{2}] \geqslant 0$}<br>$$</p><p>然后发现数组 <code>f</code> 其实只需要一维就够了，而且 $j$ 也只需要枚举到 $\frac{\sum_{i = 1}^6 a[i]\times i}{2}$ 就行了，所以实现的时候只要这样子就行了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nextchar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class="line">  <span class="keyword">return</span> (p1 == p2) &amp;&amp;</span><br><span class="line">    (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, <span class="number">100000</span>, <span class="built_in">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123; sign |= (ch == <span class="string">'-'</span>); ch = nextchar(); &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123; x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>); ch = nextchar(); &#125;</span><br><span class="line">  x = sign ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> stk[<span class="number">100</span>], top = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (x == <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'0'</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>); x = -x; &#125;</span><br><span class="line">  <span class="keyword">while</span> (x) &#123; stk[++top] = x % <span class="number">10</span>; x /= <span class="number">10</span>; &#125;</span><br><span class="line">  <span class="keyword">while</span> (top) <span class="built_in">putchar</span>(stk[top--] + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20010</span></span><br><span class="line"><span class="comment">// 这个 maxn 不能省</span></span><br><span class="line"><span class="keyword">int</span> n, a[<span class="number">10</span>], sum, f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  read(n);</span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; ++i) &#123; read(a[i]); sum += a[i] * i; &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &amp; <span class="number">1</span>) &#123; <span class="built_in">puts</span>(<span class="string">"Can't be divided."</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">    sum &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= sum; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[j] &gt;= <span class="number">0</span>) f[j] = a[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= j) f[j] = f[j - i] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> f[j] = <span class="number">-1</span>; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f[sum] &gt;= <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"Can be divided."</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Can't be divided."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T3-cmi"><a href="#T3-cmi" class="headerlink" title="T3 cmi"></a>T3 cmi</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><pre><code>有一全排列，每次移动一个数，求使其变为升序的最少移动次数输入 两行，第一行为排列中数字的数量，第二行为排列输出 一行，最少移动的次数</code></pre><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>就是最长上升子序列（LIS），中间再加一点优化（可以二分，也可以直接用 <code>lower_bound()</code> 函数）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123; sign |= (ch == <span class="string">'-'</span>); ch = getchar(); &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123; x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">  x = sign ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> stk[<span class="number">100</span>], top = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (x == <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'0'</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>); x = -x; &#125;</span><br><span class="line">  <span class="keyword">while</span> (x) &#123; stk[++top] = x % <span class="number">10</span>; x /= <span class="number">10</span>; &#125;</span><br><span class="line">  <span class="keyword">while</span> (top) <span class="built_in">putchar</span>(stk[top--] + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], f[maxn], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  freopen(<span class="string">"cmi.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">"cmi.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  read(n); read(a[<span class="number">1</span>]);</span><br><span class="line">  ans = <span class="number">1</span>;</span><br><span class="line">  f[<span class="number">1</span>] = a[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    read(a[i]);</span><br><span class="line">    <span class="keyword">if</span> (a[i] &gt; f[ans]) &#123;</span><br><span class="line">      ans++;</span><br><span class="line">      f[ans] = a[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> pos = lower_bound(f + <span class="number">1</span>, f + ans + <span class="number">1</span>, a[i]) - f;</span><br><span class="line">      f[pos] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  write(n - ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今天的题目做完后真的是感觉出卷老师出反了，以后还是得先浏览一遍题目 orz。</p><hr><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-7465666912424994" data-ad-slot="3198608984"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note success&quot;&gt;&lt;p&gt;&lt;strong&gt;在这里先祝祖国母亲生日快乐，以及成为世界上存在时间最长的社会主义国家！😊😊&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;note default&quot;&gt;&lt;p&gt;好了，说今天这套题目，隶属于国庆七连测😭，第一道题最恶心，第二题最难想，第三道题最简单。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 模拟" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP 初赛] 各类排序算法时间/空间复杂度整理</title>
    <link href="http://walesexcitedmei.github.io/2018/09/28/NOIP-%E5%88%9D%E8%B5%9B-%E5%90%84%E7%B1%BB%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4-%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%95%B4%E7%90%86/"/>
    <id>http://walesexcitedmei.github.io/2018/09/28/NOIP-初赛-各类排序算法时间-空间复杂度整理/</id>
    <published>2018-09-28T12:35:20.000Z</published>
    <updated>2018-10-11T12:46:32.073Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>排序算法在初赛中似乎每次都会考到，而且考到的不外乎它们的时间复杂度和空间复杂度，所以此处进行一次整理。</p></div><a id="more"></a><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><table><thead><tr><th>算法名称</th><th>平均时间复杂度</th><th>最好时间复杂度</th><th>最坏时间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>桶排序</td><td>$\mathcal{O}(n)$</td><td>$\mathcal{O}(n)$</td><td>$\mathcal{O}(n)$</td><td>不稳定</td></tr><tr><td>基数排序</td><td>$\mathcal{O}(n)$</td><td>$\mathcal{O}(n)$</td><td>$\mathcal{O}(n)$</td><td>稳定</td></tr><tr><td>归并排序</td><td>$\mathcal{O}(n\log n)$</td><td>$\mathcal{O}(n\log n)$</td><td>$\mathcal{O}(n\log n)$</td><td>稳定</td></tr><tr><td>快速排序</td><td>$\mathcal{O}(n\log n)$</td><td>$\mathcal{O}(n\log n)$</td><td>$\mathcal{O}(n^2)$</td><td>不稳定</td></tr><tr><td>选择排序</td><td>$\mathcal{O}(n^2)$</td><td>$\mathcal{O}(n)$</td><td>$\mathcal{O}(n)$</td><td>不稳定</td></tr><tr><td>插入排序</td><td>$\mathcal{O}(n^2)$</td><td>$\mathcal{O}(n)$</td><td>$\mathcal{O}(n^2)$</td><td>稳定</td></tr><tr><td>希尔排序</td><td><a href="https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">见维基百科</a></td><td><a href="https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">见维基百科</a></td><td><a href="https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">见维基百科</a></td><td>不稳定</td></tr><tr><td>堆排序</td><td>$\mathcal{O}(n\log n)$</td><td>$\mathcal{O}(n\log n)$</td><td>$\mathcal{O}(n\log n)$</td><td>不稳定</td></tr><tr><td>冒泡排序</td><td>$\mathcal{O}(n^2)$</td><td>$\mathcal{O}(n^2)$</td><td>$\mathcal{O}(n^2)$</td><td>稳定</td></tr></tbody></table><p><strong>注：《算法》的作者曾经说过，所有的不稳定算法都可以用额外空间变成稳定的，所以这里的整理只能用于 NOIP 初赛</strong></p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>冒泡排序,简单选择排序,堆排序,直接插入排序,希尔排序的空间复杂度为 $\mathcal{O}(1)$，因为需要一个临时变量来交换元素位置,(另外遍历序列时自然少不了用一个变量来做索引)<br>快速排序空间复杂度为 $\mathcal{O}(\log n)$ （因为递归调用了），归并排序空间复杂是 $\mathcal{O}(n)$，需要一个大小为n的临时数组.<br>基数排序的空间复杂是 $\mathcal{O}(n)$，桶排序的空间复杂度不确定。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;排序算法在初赛中似乎每次都会考到，而且考到的不外乎它们的时间复杂度和空间复杂度，所以此处进行一次整理。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 初赛" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E5%88%9D%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>[HEXO] hexo 中加入 AdSense 广告服务的方法</title>
    <link href="http://walesexcitedmei.github.io/2018/09/25/HEXO-hexo-%E4%B8%AD%E5%8A%A0%E5%85%A5-AdSense-%E5%B9%BF%E5%91%8A%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://walesexcitedmei.github.io/2018/09/25/HEXO-hexo-中加入-AdSense-广告服务的方法/</id>
    <published>2018-09-25T09:56:35.000Z</published>
    <updated>2018-10-11T12:46:32.073Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>就在昨天！我的 AdSense 申请终于过了！这里来总结一下 hexo 上 AdSense 通过的经验。</p></div><a id="more"></a><h3 id="注册-AdSense-账号"><a href="#注册-AdSense-账号" class="headerlink" title="注册 AdSense 账号"></a>注册 AdSense 账号</h3><p>这个不多说了，直接去<a href="https://www.google.com/adsense/start/#/?modal_active=none" target="_blank" rel="noopener">这里</a></p><div> <img style="align: center" src="pic1.jpg"> </div><h3 id="更改自己-hexo-主题文件"><a href="#更改自己-hexo-主题文件" class="headerlink" title="更改自己 hexo 主题文件"></a>更改自己 hexo 主题文件</h3><p>此处以 NexT 主题为例（注：可能不是最简方式，自行斟酌）：</p><ol><li>新建 <code>theme/next/layout/_custom/google_adsense.swig</code>，将 AdSense 上的代码粘贴进去</li><li>在 <code>theme/next/layout/_custom/head.swig</code> 中也粘贴一份</li><li>如果在每篇博客里也想看到广告的话，在 <code>theme/next/layout/post.swig</code> 里中在希望看到的地方加上:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;_custom/google_adsense.swig&apos; %&#125;</span><br></pre></td></tr></table></figure><p>例如：在 <code>&lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &lt;/div&gt;</code> 中间插入，总代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;&#123; post_template.render(page) &#125;&#125;</span><br><span class="line">    &#123;% include &apos;_custom/google_adsense.swig&apos; %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>此时如果 <code>hexo server</code> 的话是看不到广告的，因为 AdSense 的显示是 Google 控制的。</p><h3 id="疯狂更新博客"><a href="#疯狂更新博客" class="headerlink" title="疯狂更新博客"></a>疯狂更新博客</h3><p>你需要使你的网站内容充足以通过 AdSense 的审核（我写了 21 篇左右才通过，其实算上所有网页其实还不止），如果被拒绝了，就再重新申请一次，说不定就过了🤣。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用 AdSense 来赚外块，美滋滋~~</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;就在昨天！我的 AdSense 申请终于过了！这里来总结一下 hexo 上 AdSense 通过的经验。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://walesexcitedmei.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://walesexcitedmei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[C++ 奇技淫巧] 终极快速读入/输出</title>
    <link href="http://walesexcitedmei.github.io/2018/09/22/C-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7-%E7%BB%88%E6%9E%81%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%85%A5-%E8%BE%93%E5%87%BA/"/>
    <id>http://walesexcitedmei.github.io/2018/09/22/C-奇技淫巧-终极快速读入-输出/</id>
    <published>2018-09-22T10:24:03.000Z</published>
    <updated>2018-10-11T12:46:32.042Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>上次看到一个手写 <code>getchar()</code> 的大神，发现自己的快速读入还是不够骚，于是去查了下网络，发现了更加厉害的快读方式。顺便把自己的快输用非递归优化了一下。</p></div><a id="more"></a><h3 id="手写-getchar"><a href="#手写-getchar" class="headerlink" title="手写 getchar()"></a>手写 <code>getchar()</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nextchar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class="line">  <span class="keyword">return</span> (p1 == p2) &amp;&amp;</span><br><span class="line">    (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, <span class="number">100000</span>, <span class="built_in">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class="line">&#125; <span class="comment">// 使用 fread() 来提高速度</span></span><br></pre></td></tr></table></figure><h3 id="快读使用-nextchar"><a href="#快读使用-nextchar" class="headerlink" title="快读使用 nextchar()"></a>快读使用 <code>nextchar()</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 使用 static 节省空间</span></span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123; sign |= (ch == <span class="string">'-'</span>); ch = nextchar(); &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123; x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>); ch = nextchar(); &#125;</span><br><span class="line">  <span class="comment">// 这里 x * 10 和 (x &lt;&lt; 1) + (x &lt;&lt; 3) 编译后的代码是一样的</span></span><br><span class="line">  <span class="comment">// 所以不需要用位运算了</span></span><br><span class="line">  x = sign ? -x : x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归-write"><a href="#非递归-write" class="headerlink" title="非递归 write()"></a>非递归 <code>write()</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> stk[<span class="number">100</span>], top = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (x == <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'0'</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; x = -x; <span class="built_in">putchar</span>(<span class="string">'-'</span>); &#125;</span><br><span class="line">  <span class="keyword">while</span> (x) &#123; stk[++top] = x % <span class="number">10</span>; x /= <span class="number">10</span>; &#125;</span><br><span class="line">  <span class="keyword">while</span> (top) &#123; <span class="built_in">putchar</span>(stk[top--] + <span class="string">'0'</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="速度测试"><a href="#速度测试" class="headerlink" title="速度测试"></a>速度测试</h3><h4 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">ofstream <span class="title">test</span><span class="params">(<span class="string">"testdata.txt"</span>)</span></span>;</span><br><span class="line">  srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>) * <span class="number">19260817</span>); <span class="comment">// +1s</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5000000</span>; ++i)</span><br><span class="line">    test &lt;&lt; rand() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">// 祖传代码</span></span><br></pre></td></tr></table></figure><h4 id="老版本测试"><a href="#老版本测试" class="headerlink" title="老版本测试"></a>老版本测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>::chrono;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123; sign |= (ch == <span class="string">'-'</span>); ch = getchar(); &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123; x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>); ch = getchar(); &#125;</span><br><span class="line">  x = sign ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>); x = -x; &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  freopen(<span class="string">"testdata.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">"output.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">1000000</span>];</span><br><span class="line">  <span class="keyword">auto</span> start = system_clock::now();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; ++i) read(<span class="built_in">array</span>[i - <span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; ++i) write(<span class="built_in">array</span>[i - <span class="number">1</span>]), <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> end = system_clock::now();</span><br><span class="line">  <span class="keyword">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"cost: "</span></span><br><span class="line">       &lt;&lt; <span class="keyword">double</span>(duration.count()) *</span><br><span class="line">          microseconds::period::num / microseconds::period::den</span><br><span class="line">       &lt;&lt; <span class="string">" seconds"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>cost: 0.406813 seconds</code></pre><h4 id="新版本测试"><a href="#新版本测试" class="headerlink" title="新版本测试"></a>新版本测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>::chrono;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nextchar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class="line">  <span class="keyword">return</span> (p1 == p2) &amp;&amp;</span><br><span class="line">    (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, <span class="number">100000</span>, <span class="built_in">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class="line">&#125; <span class="comment">// 使用 fread() 来提高速度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 使用 static 节省空间</span></span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123; sign |= (ch == <span class="string">'-'</span>); ch = nextchar(); &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123; x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>); ch = nextchar(); &#125;</span><br><span class="line">  <span class="comment">// 这里 x * 10 和 (x &lt;&lt; 1) + (x &lt;&lt; 3) 编译后的代码是一样的</span></span><br><span class="line">  <span class="comment">// 所以不需要用位运算了</span></span><br><span class="line">  x = sign ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> stk[<span class="number">100</span>], top = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (x == <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'0'</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; x = -x; <span class="built_in">putchar</span>(<span class="string">'-'</span>); &#125;</span><br><span class="line">  <span class="keyword">while</span> (x) &#123; stk[++top] = x % <span class="number">10</span>; x /= <span class="number">10</span>; &#125;</span><br><span class="line">  <span class="keyword">while</span> (top) &#123; <span class="built_in">putchar</span>(stk[top--] + <span class="string">'0'</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  freopen(<span class="string">"testdata.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">"output.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">1000000</span>];</span><br><span class="line">  <span class="keyword">auto</span> start = system_clock::now();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; ++i) read(<span class="built_in">array</span>[i - <span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; ++i) write(<span class="built_in">array</span>[i - <span class="number">1</span>]), <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> end = system_clock::now();</span><br><span class="line">  <span class="keyword">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"cost: "</span></span><br><span class="line">       &lt;&lt; <span class="keyword">double</span>(duration.count()) *</span><br><span class="line">          microseconds::period::num / microseconds::period::den</span><br><span class="line">       &lt;&lt; <span class="string">" seconds"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>cost: 0.275003 seconds</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>新的快读几乎是快了一倍，不过两者都已经是神仙打架了，像 <code>scanf</code> 这种都已经被踢飞了，不过，快读虽好，使用还是要谨慎，速度的提高主要还是靠算法的优化（除了某些高性能的题）。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>这个 <code>nextchar()</code> 函数只能在读入文件时使用，在控制台输入时会出错，因为 <code>fread()</code> 是专门针对文件的。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;上次看到一个手写 &lt;code&gt;getchar()&lt;/code&gt; 的大神，发现自己的快速读入还是不够骚，于是去查了下网络，发现了更加厉害的快读方式。顺便把自己的快输用非递归优化了一下。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="奇技淫巧" scheme="http://walesexcitedmei.github.io/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="C++ 奇技淫巧" scheme="http://walesexcitedmei.github.io/tags/C-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP 初赛] 总结一波读程序写结果题目</title>
    <link href="http://walesexcitedmei.github.io/2018/09/20/NOIP-%E5%88%9D%E8%B5%9B-%E6%80%BB%E7%BB%93%E4%B8%80%E6%B3%A2%E8%AF%BB%E7%A8%8B%E5%BA%8F%E5%86%99%E7%BB%93%E6%9E%9C%E9%A2%98%E7%9B%AE/"/>
    <id>http://walesexcitedmei.github.io/2018/09/20/NOIP-初赛-总结一波读程序写结果题目/</id>
    <published>2018-09-20T09:57:14.000Z</published>
    <updated>2018-10-11T12:46:32.073Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>为了提高初赛分数，痛下决心总结一波<strong>读程序写结果</strong>的题。</p><p>ps: 一次更新不完，会持续更新</p></div><a id="more"></a><h3 id="第二十一届-NOIP-2015"><a href="#第二十一届-NOIP-2015" class="headerlink" title="第二十一届 / NOIP 2015"></a>第二十一届 / NOIP 2015</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">char</span> *b)</span> </span>&#123;</span><br><span class="line">  a = b;</span><br><span class="line">  (*a)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> c1, c2, *p1, *p2;</span><br><span class="line">  c1 = <span class="string">'A'</span>;</span><br><span class="line">  c2 = <span class="string">'a'</span>;</span><br><span class="line">  p1 = &amp;c1;</span><br><span class="line">  p2 = &amp;c2;</span><br><span class="line">  fun(p1, p2);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：Ab</span></span><br></pre></td></tr></table></figure><p>这道题中先是将 <code>p1</code> 赋值为 <code>c1</code> 的地址，将 <code>p2</code> 赋值为 <code>c2</code> 的地址，然后将 <code>p1</code> 赋值为 <code>p2</code> 的值，即现在 <code>p1</code> 所表示的是 <code>c2</code> 的地址，所以最后只有 <code>c2</code> 会发生改变，这道题一开始没看出来，后来仔细想了想才反应过来，不失为一道坑题。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> fromPos, <span class="keyword">int</span> toPos)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> t, tot;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (t = <span class="number">1</span>; t &lt;= <span class="number">3</span>; t++)</span><br><span class="line">    <span class="keyword">if</span> (t != fromPos &amp;&amp; t != toPos)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  tot = <span class="number">0</span>;</span><br><span class="line">  tot += fun(n - <span class="number">1</span>, fromPos, t);</span><br><span class="line">  tot++;</span><br><span class="line">  tot += fun(n - <span class="number">1</span>, t, toPos);</span><br><span class="line">  <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; fun(n, <span class="number">1</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入：5</span></span><br><span class="line"><span class="comment">// 输出：31</span></span><br></pre></td></tr></table></figure><p>这道题其实纯属糊弄人，可以发现 <code>fun</code> 这个函数中不管 <code>fromPos</code> 和 <code>toPos</code> 为何值，总能继续下去，所以简化后的函数如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> fun(n - <span class="number">1</span>) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，这样子的递归函数手推就行了。</p><h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;为了提高初赛分数，痛下决心总结一波&lt;strong&gt;读程序写结果&lt;/strong&gt;的题。&lt;/p&gt;&lt;p&gt;ps: 一次更新不完，会持续更新&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 初赛" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E5%88%9D%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP 初赛] 总结各种坑人基础知识</title>
    <link href="http://walesexcitedmei.github.io/2018/09/16/NOIP-%E5%88%9D%E8%B5%9B-%E6%80%BB%E7%BB%93%E5%90%84%E7%A7%8D%E5%9D%91%E4%BA%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://walesexcitedmei.github.io/2018/09/16/NOIP-初赛-总结各种坑人基础知识/</id>
    <published>2018-09-16T12:14:37.000Z</published>
    <updated>2018-10-11T12:46:32.073Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>初赛临近，每天一张初赛卷让我发现了很多基础知识上的坑，于是决定总结一下。</p></div><a id="more"></a><h3 id="信仰坑"><a href="#信仰坑" class="headerlink" title="信仰坑"></a>信仰坑</h3><div class="note info"><p><strong>NOI（1984 至今）:</strong> 已组织 33 次活动，各省选拔五名选手，至少一名为女选手。<br><strong>NOIP（1995 至今）:</strong> 已组织 22 次比赛，全国同一时间，不同地点。<br><strong>IOI（1989 至今）:</strong> 已组织 19 次比赛，IOI 2000 由中国主办，CCF 承办。<br><strong>APIO（2007 创建）:</strong> APIO 中国赛区由中国计算机学会组织。</p></div><div class="note warning"><p><strong>NOIP 2022 年开始将停止支持 Pascal</strong></p></div><h3 id="网络协议坑"><a href="#网络协议坑" class="headerlink" title="网络协议坑"></a>网络协议坑</h3><div class="note info"><p><strong>ARP (Address Resolution Protocol) 地址解析协议</strong><br><strong>DHCP (Dynamic Host Configuration Protocol) 动态主机配置协议</strong><br><strong>FTP (File Transfer Protocol) 文件传输协议</strong><br><strong>HTTP (Hypertext Transfer Protocol) 超文本传输协议</strong><br><strong>HTTPS (Secure Hypertext Transfer Protocol) 安全超文本传输协议</strong><br><strong>IMAP4 (Internet Mail Access Protocol Version 4) Internet 邮件访问协议——版本4</strong><br><strong>IPv6 (Internet Protocol Version 6) Internet 协议——版本6</strong><br><strong>POP3 (Post Office Protocol version 3) 邮局协议——版本3</strong><br><strong>SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议</strong><br><strong>TFTP (Trivial File Transfer Protocol) 小型文件传输协议</strong></p></div><div class="note warning"><p><strong>WWW 是 URL，不是网络协议</strong></p></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;初赛临近，每天一张初赛卷让我发现了很多基础知识上的坑，于是决定总结一下。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 初赛" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E5%88%9D%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP 模拟] 记录一道坑题</title>
    <link href="http://walesexcitedmei.github.io/2018/09/01/NOIP-%E6%A8%A1%E6%8B%9F-%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E5%9D%91%E9%A2%98/"/>
    <id>http://walesexcitedmei.github.io/2018/09/01/NOIP-模拟-记录一道坑题/</id>
    <published>2018-09-01T02:56:35.000Z</published>
    <updated>2018-10-11T12:46:32.088Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>昨天的一场模拟，第二题本来应该是一道很水的题，然而最后打崩了，归根结底还是自己不够仔细，题目审错，最后导致方法用错。</p></div><a id="more"></a><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>[问题描述]</strong></p><pre><code>神即将带领一些人去他们的孤寂之境，由于这个世界的不稳定，地点之间的有向道路会不定期地毁坏，出于工作准备，神想知道在某些道路毁坏之后某两点之间的最短路。就是给定一个有向图，现有两个操作，操作1 是删除一条边（一条边可重复删除），操作2是询问两个点之间的最短路。</code></pre><p><strong>[输入格式]</strong></p><pre><code>输入文件名为journey.in。第1 行两个正整数n, m，分别表示图的点数和操作数。第2 行至第n + 1 行每行n 个正整数，为图的邻接矩阵，第i 行第j 列的数表示点i 和点j 间距离，保证对角线为0。接下来m 行每行三个正整数c, x, y； c 表示操作种类，为1 或2，当c = 1 时表示删除x与y 相连的边，当 c = 2 时表示询问 x 到 y 的最短路，若不可达则输出 -1。</code></pre><p><strong>[输出格式]</strong></p><pre><code>输出文件名为journey.out输出若干行，每个 2 操作对应一行，答案为询问中 x 到 y 的最短路或 -1</code></pre><p><strong>[样例]</strong></p><pre><code>见下发/girls/girls.in(out)。</code></pre><p><strong>[数据规模与约定]</strong></p><pre><code>对于30% 的数据：n, m &lt;= 10对于50% 的数据：n, m &lt;= 50对于100% 的数据：n &lt;= 200; m &lt;= 100000, 操作1 不超过200 次，边权不超过10000</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一碰到查找的题，那肯定就是两条路了，离线和在线两种思路，乍一看这 $n$ 的数据范围，并且题目中还说输入邻接矩阵，那求最短路肯定是 Floyd 了，再一想，如果是在线查询那只有朴素算法了，查一次求一次全源最短路，然后这种方法就 <code>TLE</code> 了，代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 210</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    sign |= (ch == <span class="string">'-'</span>);</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  x = sign ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>); x = -x; &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; write(x); <span class="built_in">puts</span>(<span class="string">""</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span> </span>&#123; read(a); read(b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b, <span class="keyword">int</span> &amp;c)</span> </span>&#123; read(a); read(b); read(c); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g[maxn][maxn], d[maxn][maxn], n, m, c, x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        g[i][j] = min(g[i][j], g[i][k] + g[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  freopen(<span class="string">"journey.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">"journey.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">memset</span>(d, INF, <span class="keyword">sizeof</span>(d));</span><br><span class="line">  read(n, m);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">      read(g[i][j]);</span><br><span class="line">  <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">    read(c, x, y);</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>: &#123; g[x][y] = INF; <span class="keyword">break</span>; &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(d, g, <span class="keyword">sizeof</span>(g));</span><br><span class="line">        Floyd();</span><br><span class="line">        <span class="keyword">if</span> (g[x][y] == INF) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span> writeln(g[x][y]);</span><br><span class="line">        <span class="built_in">memcpy</span>(g, d, <span class="keyword">sizeof</span>(d));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以正解肯定就是离线操作了，先把该删的边都给删掉，然后从最后一个操作开始处理，遇到操作一就加边，求一次最短路，当然这里不是用 Floyd 而是用一个 $\mathcal{O}(n^2)$ 的方法，附上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 210</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 100010</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">op</span> &#123;</span> <span class="keyword">int</span> c, x, y; &#125;;</span><br><span class="line"><span class="comment">// op 结构体，记录操作</span></span><br><span class="line">op ops[maxm];</span><br><span class="line"><span class="keyword">int</span> g[maxn][maxn], d[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> w[maxm], ans[maxm];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    sign |= (ch == <span class="string">'-'</span>);</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  x = sign ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>); x = -x; &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; write(x); <span class="built_in">puts</span>(<span class="string">""</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span> </span>&#123; read(a); read(b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b, <span class="keyword">int</span> &amp;c)</span> </span>&#123; read(a); read(b); read(c); &#125;</span><br><span class="line"><span class="comment">// 快读快写黑科技</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Floyd 对 d[][] 操作求最短路</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  freopen(<span class="string">"journey.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">"journey.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  read(n, m);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">      read(g[i][j]);</span><br><span class="line">  <span class="built_in">memcpy</span>(d, g, <span class="keyword">sizeof</span>(g));</span><br><span class="line">  <span class="comment">// 输入，g[][] 用来备份原邻接矩阵</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    read(ops[i].c, ops[i].x, ops[i].y);</span><br><span class="line">    <span class="keyword">if</span> (ops[i].c == <span class="number">1</span>) &#123;</span><br><span class="line">      w[i] = g[ops[i].x][ops[i].y];</span><br><span class="line">      d[ops[i].x][ops[i].y] = INF;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Floyd();</span><br><span class="line">  <span class="comment">// 读入所有操作后 Floyd</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = m; k &gt; <span class="number">0</span>; --k) &#123;</span><br><span class="line">  <span class="comment">// 注意循环顺序，从最后一个开始</span></span><br><span class="line">    <span class="keyword">int</span> x = ops[k].x;</span><br><span class="line">    <span class="keyword">int</span> y = ops[k].y;</span><br><span class="line">    <span class="keyword">if</span> (ops[k].c == <span class="number">2</span>) ans[++cnt] = (d[x][y] == INF ? <span class="number">-1</span> : d[x][y]);</span><br><span class="line">    <span class="comment">// 题目中要求如果不连通输出 -1，所以这里特判一下</span></span><br><span class="line">    <span class="comment">// 标程中似乎没有这一句，自己搞了一个数据把标程给卡掉了，所以还是要加的</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 求一次最短路，只要把 d[x][y] 加进去再比较一下就可以了</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">          <span class="keyword">int</span> tmp = d[i][x] + d[y][j] + w[k];</span><br><span class="line">          <span class="keyword">if</span> (tmp &lt; d[i][j]) d[i][j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后输出要注意顺序</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = cnt; i &gt; <span class="number">0</span>; --i) writeln(ans[i]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以后看到这种题必须要读清楚题意，然后决定是否离线操作，考试的时候我根本就是智障了，直接在数组 $d$ 上面删边，求最短路，然后 GG。幸好最后醒悟过来打了个暴力。邻阶矩阵就是这点太坑。。。容易让人误操作。。。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;昨天的一场模拟，第二题本来应该是一道很水的题，然而最后打崩了，归根结底还是自己不够仔细，题目审错，最后导致方法用错。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 模拟" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>[HEXO] NexT 主题提高博客颜值</title>
    <link href="http://walesexcitedmei.github.io/2018/08/30/HEXO-NexT-%E4%B8%BB%E9%A2%98%E6%8F%90%E9%AB%98%E5%8D%9A%E5%AE%A2%E9%A2%9C%E5%80%BC/"/>
    <id>http://walesexcitedmei.github.io/2018/08/30/HEXO-NexT-主题提高博客颜值/</id>
    <published>2018-08-30T12:37:23.000Z</published>
    <updated>2018-10-11T12:46:32.073Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>今天是把博客好好地美化了一把，今天就来讲一下 hexo 博客美化过程中的心得，因为自己使用的是 NexT 主题，所以这里的有些过程仅供别的主题的用户做参考。</p></div><a id="more"></a><h3 id="文章的模板文件"><a href="#文章的模板文件" class="headerlink" title="文章的模板文件"></a>文章的模板文件</h3><p>为了每次更新方便，我直接改了 <code>blog/scaffolds/</code> 下的 <code>post.md</code>，每次生成的时候模板就都有了，不需要自己再去弄。这个是我的模板：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">mathjax: true</span><br><span class="line">copyright: true</span><br><span class="line">comment: true</span><br><span class="line">photo: </span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&#123;% note default %&#125;</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>说明一下，这个 <code>note</code> 要在 <code>next\_config.yml</code> 中开启才可以写。下面会讲到。<code>photo</code> 是文章开头的图片，就像这篇文章开头那样，注意一定要加绝对路径，比如我这张图片存在文章的文件夹下，那么路径就是 <code>/2018/08/30/HEXO-NexT-主题提高博客颜值/photo1.jpg</code>。<code>copyright</code> 这一项也是要开启之后才行，我的博客的 copyright 是自己重新写的，后面会讲到。最后这个 <code>---</code> 是结束符，和最后的结束语一起用。</p><h3 id="Markdown-技巧与内置样式"><a href="#Markdown-技巧与内置样式" class="headerlink" title="Markdown 技巧与内置样式"></a>Markdown 技巧与内置样式</h3><p><a href="https://segmentfault.com/markdown" target="_blank" rel="noopener">基础的语法</a>就不提了，点进来的应该都会了。这里就讲讲一些技巧。</p><h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4><p>我用的 Markdown 编辑器是 <a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>，有些行内公式的显示可以在设置里打开。这是我用过的最好的 Markdown编辑器</p><h4 id="分隔线和空行"><a href="#分隔线和空行" class="headerlink" title="分隔线和空行"></a>分隔线和空行</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是文字</span><br><span class="line">&lt;hr /&gt;</span><br><span class="line">上面是分隔线</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">上面是空行</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>这是文字</p><p><hr><br>上面是分隔线<br><br><br>上面是空行</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;blockquote&gt;引用内容&lt;/blockquote&gt;</span><br><span class="line">&lt;!-- 如果前后间隙很小，可以像下面这样写 --&gt;</span><br><span class="line">&lt;p&gt;&lt;blockquote&gt;引用内容&lt;/blockquote&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><blockquote>引用内容</blockquote></p><p><blockquote>引用内容</blockquote></p><h4 id="居中和右对齐"><a href="#居中和右对齐" class="headerlink" title="居中和右对齐"></a>居中和右对齐</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 居中 --&gt;</span><br><span class="line">&lt;center&gt;内容&lt;/center&gt;</span><br><span class="line">&lt;!-- 右对齐 --&gt;</span><br><span class="line">&lt;div style="text-align:right"&gt;内容&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><center>内容</center></p><div style="text-align:right">内容</div><h4 id="字体大小和颜色"><a href="#字体大小和颜色" class="headerlink" title="字体大小和颜色"></a>字体大小和颜色</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;font color="#187892" size="number"&gt;内容&lt;/font&gt;</span><br><span class="line">&lt;!-- 详细请查看 http://www.w3school.com.cn/tags/tag_font.asp --&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><font color="#187892" size="number">内容</font><h4 id="Todo-list"><a href="#Todo-list" class="headerlink" title="Todo list"></a>Todo list</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><br><li><i class="fa fa-check-square"></i> 已完成</li><br><li><i class="fa fa-square"></i> 未完成</li><br></ul><h4 id="Note-嵌套-Todo-list"><a href="#Note-嵌套-Todo-list" class="headerlink" title="Note 嵌套 Todo list"></a>Note 嵌套 Todo list</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 一共有两种写法，效果看下面 --&gt;</span><br><span class="line">&lt;div class="note primary"&gt;</span><br><span class="line">  &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span><br><span class="line">  &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span><br><span class="line">  &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span><br><span class="line">  &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span><br><span class="line">  &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span><br><span class="line">  &lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成</span><br><span class="line">  &lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成</span><br><span class="line">  &lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="note primary"&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line"><span class="code">    &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成</span></span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><div class="note primary"><br>  <i class="fa fa-check-square"></i> 已完成<br>  <i class="fa fa-check-square"></i> 已完成<br>  <i class="fa fa-check-square"></i> 已完成<br>  <i class="fa fa-check-square"></i> 已完成<br>  <i class="fa fa-check-square"></i> 已完成<br>  <i class="fa fa-square"></i> 未完成<br>  <i class="fa fa-square"></i> 未完成<br>  <i class="fa fa-square"></i> 未完成<br></div><br><div class="note primary"><br>  <p><br>    <i class="fa fa-check-square"></i> 已完成<br>    <i class="fa fa-check-square"></i> 已完成<br>    <i class="fa fa-check-square"></i> 已完成<br>    <i class="fa fa-check-square"></i> 已完成<br>    <i class="fa fa-check-square"></i> 已完成<br>    <i class="fa fa-square"></i> 未完成<br>    <i class="fa fa-square"></i> 未完成<br>    <i class="fa fa-square"></i> 未完成<br>  </p><br></div><p>这两个写法熟悉 HTML 的同学应该是明白的，这里<del>因为我太菜了</del>就不讲了。主要说一下 <code>&lt;i class=&quot;fa fa-square&quot;&gt;&lt;/i&gt;</code> 是从 <a href="https://fontawesome.com/" target="_blank" rel="noopener">Font Awesome</a> 上获取图标的方法，不过有些图标似乎是不能加载的，我也不知道为什么。</p><h4 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a>Font Awesome</h4><p>Font Awesome 更多的使用可以看<a href="https://fontawesome.com/how-to-use/on-the-web/setup/getting-started?using=web-fonts-with-css" target="_blank" rel="noopener">官网示例</a>，这里讲一个放大图标的方法</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class="fa fa-download"&gt;&lt;/i&gt; 普通</span><br><span class="line">&lt;i class="fa fa-download fa-lg"&gt;&lt;/i&gt; 变大 33%</span><br><span class="line">&lt;i class="fa fa-download fa-2x"&gt;&lt;/i&gt; 两倍大</span><br></pre></td></tr></table></figure><p>效果如下：<br><i class="fa fa-download"></i> 普通<br><i class="fa fa-download fa-lg"></i> 变大 33%<br><i class="fa fa-download fa-2x"></i> 两倍大</p><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><p>主题自带样式 代码块高亮<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```[language] [title] [url] [link-text]</span><br><span class="line">`代码`</span><br></pre></td></tr></table></figure></p><p><code>[language]</code> 是代码语言的名称，用来设置代码块颜色高亮，非必须；<br><code>[title]</code> 是顶部左边的说明，非必须；<br><code>[url]</code> 是顶部右边的超链接地址，非必须；<br><code>[link text]</code> 如它的字面意思，超链接的名称，非必须。<br>亲测这 4 项应该是根据空格来分隔，而不是[]，故请不要加[]。除非如果你想写后面两个，但不想写前面两个，那么就必须加 <code>[]</code> 了，要这样写：<code>[] [] [url] [link text]</code>。</p><p>首先关于代码块颜色高亮，高亮的模式可以在主题配置文件中设置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code Highlight theme</span></span><br><span class="line"><span class="comment"># Available value:</span></span><br><span class="line"><span class="comment">#    normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">eighties</span></span><br></pre></td></tr></table></figure></p><p>要颜色正确高亮，代码语言的名称肯定要写对，各种支持语言的名称可以查看<a href="https://almostover.ru/2016-07/hexo-highlight-code-styles/" target="_blank" rel="noopener">这篇文章</a>。当然，如果你和我一样懒，可以在站点配置文件 <code>_config.yml</code> 中设置自动高亮（不过这个自动高亮似乎有问题，不建议打开）：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line"># 代码自动高亮</span><br><span class="line"><span class="deletion">-  auto_detect: false</span></span><br><span class="line"><span class="addition">+  auto_detect: true</span></span><br></pre></td></tr></table></figure></p><p>从网上找到的一个文本效果如下（别跟我说你不知道 <code>diff</code> 是什么）：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">Index: languages/ini.js</span></span><br><span class="line"><span class="comment">===================================================================</span></span><br><span class="line"><span class="comment">--- languages/ini.js    (revision 199)</span></span><br><span class="line"><span class="comment">+++ languages/ini.js    (revision 200)</span></span><br><span class="line"><span class="meta">@@ -1,8 +1,7 @@</span></span><br><span class="line"> hljs.LANGUAGES.ini =</span><br><span class="line"> &#123;</span><br><span class="line"><span class="deletion">-   case_insensitive: true,</span></span><br><span class="line"><span class="deletion">-  defaultMode:</span></span><br><span class="line">   &#123;</span><br><span class="line"><span class="addition">+  defaultMode: &#123;</span></span><br><span class="line"><span class="deletion">-     contains: ['comment', 'title', 'setting'],</span></span><br><span class="line"><span class="addition">+     illegal: '[^\\s]'</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line"><span class="comment">*** /path/to/original timestamp</span></span><br><span class="line"><span class="comment">--- /path/to/new      timestamp</span></span><br><span class="line"><span class="comment">***************</span></span><br><span class="line"><span class="meta">*** 1,3 ****</span></span><br><span class="line"><span class="meta">--- 1,9 ----</span></span><br><span class="line"><span class="addition">+ This is an important</span></span><br><span class="line"><span class="addition">+ notice! It should</span></span><br><span class="line"><span class="addition">+ therefore be located at</span></span><br><span class="line"><span class="addition">+ the beginning of this</span></span><br><span class="line"><span class="addition">+ document!</span></span><br><span class="line"><span class="addition">! compress the size of the</span></span><br><span class="line"><span class="addition">! changes.</span></span><br><span class="line">  It is important to spell</span><br></pre></td></tr></table></figure></p><p>代码仅仅高亮肯定是不够地，代码块地功能也很重要，比如复制这个功能。只要在 <code>_config.yml</code> 里打开就行啦：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Manual define the border radius in codeblock</span></span><br><span class="line">  <span class="comment"># Leave it empty for the default 1</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line"><span class="attr">  copy_button:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result</span></span><br><span class="line"><span class="attr">    show_result:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h4 id="Note-标签"><a href="#Note-标签" class="headerlink" title="Note 标签"></a>Note 标签</h4><p>在主题配置文件_config.yml里有一个关于这个的配置:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Note tag (bs-callout).</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># 风格</span></span><br><span class="line"><span class="attr">  style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="comment"># 要不要图标</span></span><br><span class="line"><span class="attr">  icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 圆角矩形</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>用 HTML 写就是这个样子<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note default"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>default<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note primary"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note success"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>success<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note info"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>info<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note warning"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>warning<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note danger"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>danger<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note danger no-icon"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>danger no-icon<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>用 swig 语法写就是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">          May be not defined.</span><br></pre></td></tr></table></figure><p>里面的三种风格长啥样？开启图标长啥样？可以查看<a href="https://github.com/iissnan/hexo-theme-next/pull/1697" target="_blank" rel="noopener">这个页面</a>，更多的介绍也在这个页面，请自行查看</p><p>最后的几种效果：</p><div class="note default"><p>default</p></div><br><div class="note primary"><p>primary</p></div><br><div class="note success"><p>success</p></div><br><div class="note info"><p>info</p></div><br><div class="note warning"><p>warning</p></div><br><div class="note danger"><p>danger</p></div><br><div class="note danger no-icon"><p>danger no-icon</p></div><h4 id="Label-标签"><a href="#Label-标签" class="headerlink" title="Label 标签"></a>Label 标签</h4><p><code>label</code> 标签不建议加在段首, 首先可以在主题配置文件中有配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Label tag.</span><br><span class="line">label: true</span><br></pre></td></tr></table></figure></p><p>然后效果如下（<code>@</code>前面的是label的名字，后面的是要显示的文字）</p><span class="label default">default</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label default@default %&#125;</span><br></pre></td></tr></table></figure><span class="label primary">primary</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label primary@primary %&#125;</span><br></pre></td></tr></table></figure><span class="label success">success</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label success@success %&#125;</span><br></pre></td></tr></table></figure><span class="label info">info</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label info@info %&#125;</span><br></pre></td></tr></table></figure><span class="label warning">warning</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label warning@warning %&#125;</span><br></pre></td></tr></table></figure><span class="label danger">danger</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label danger@danger %&#125;</span><br></pre></td></tr></table></figure><h4 id="Tab-选项卡"><a href="#Tab-选项卡" class="headerlink" title="Tab 选项卡"></a>Tab 选项卡</h4><p>当然也是要先配置一下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tabs tag.</span></span><br><span class="line"><span class="attr">tabs:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  transition:</span></span><br><span class="line"><span class="attr">    tabs:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    labels:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs 选项卡, 2 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 1** 呵呵哈哈哈哈哈哈</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 2** 额。。。</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 3** 哇，你找到我了！</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><div class="tabs" id="选项卡"><ul class="nav-tabs"><li class="tab"><a href="#选项卡-1">选项卡 1</a></li><li class="tab active"><a href="#选项卡-2">选项卡 2</a></li><li class="tab"><a href="#选项卡-3">选项卡 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="选项卡-1"><p><strong>这是选项卡 1</strong> 呵呵哈哈哈哈哈哈</p></div><div class="tab-pane active" id="选项卡-2"><p><strong>这是选项卡 2</strong> 额。。。</p></div><div class="tab-pane" id="选项卡-3"><p><strong>这是选项卡 3</strong> 哇，你找到我了！</p></div></div></div></p><p>上面源码中，2 表示一开始在第二个选项卡，非必须，若数值为 -1 则隐藏选项卡内容。</p><h4 id="按钮样式"><a href="#按钮样式" class="headerlink" title="按钮样式"></a>按钮样式</h4><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test, 更多关于按钮的使用点这里, download fa-lg fa-fw %&#125;</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><a class="btn" href="https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>更多关于按钮的使用点这里</a><h3 id="更多的主题配置"><a href="#更多的主题配置" class="headerlink" title="更多的主题配置"></a>更多的主题配置</h3><h4 id="返回顶部按钮与阅读进度"><a href="#返回顶部按钮与阅读进度" class="headerlink" title="返回顶部按钮与阅读进度"></a>返回顶部按钮与阅读进度</h4><p>在 <code>next/_config.yml</code> 里找到 <code>b2t</code> 这个地方进行如下配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Back to top in sidebar (only for Pisces | Gemini).</span></span><br><span class="line"><span class="attr">b2t:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h4 id="添加-RSS-订阅"><a href="#添加-RSS-订阅" class="headerlink" title="添加 RSS 订阅"></a>添加 RSS 订阅</h4><p>首先安装一个模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p><p>然后在<strong>根目录</strong>下的 <code>_config.yml</code> 里添加：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br></pre></td></tr></table></figure></p><p>最后在 <code>next\_config.yml</code> 里配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site's feed link, and install hexo-generator-feed: `npm install hexo-generator-feed --save`.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure></p><p>重新生成就可以使用 RSS 了。</p><h3 id="评论系统重配置"><a href="#评论系统重配置" class="headerlink" title="评论系统重配置"></a>评论系统重配置</h3><p>以前用的是 Disqus，然而需要翻墙，所以决定换成 Valine。这个 Valine 要先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 里注册并创建一个应用，这里就不再赘述.然后在 <code>next\_config.yml</code> 里配置。注意：得在 <code>LeanCloud -&gt; 应用 -&gt; 设置 -&gt; 应用 Key</code> 中把 AppID 和 AppKey 给复制到 <code>next\_config.yml</code> 里面去，并且在 <code>LeanCloud -&gt; 应用 -&gt; 设置 -&gt; 安全中心</code> 里将自己的域名添加到 <code>Web 安全域名</code> 中。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.</span></span><br><span class="line"><span class="attr">  appid:</span> <span class="comment"># your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span> <span class="comment"># your leancloud application appkey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">true</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">true</span> <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">😎看了这么多，不想说点什么嘛😉</span> <span class="comment"># comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br><span class="line"><span class="attr">  visitor:</span> <span class="literal">false</span> <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure><p>这个 LeanCloud 也是比较良心的啊，可以免费使用，当然我用的是开发版，所以大家不要太着急🤣。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;今天是把博客好好地美化了一把，今天就来讲一下 hexo 博客美化过程中的心得，因为自己使用的是 NexT 主题，所以这里的有些过程仅供别的主题的用户做参考。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://walesexcitedmei.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://walesexcitedmei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[杂谈] 编程规范那些事</title>
    <link href="http://walesexcitedmei.github.io/2018/08/29/%E6%9D%82%E8%B0%88-%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://walesexcitedmei.github.io/2018/08/29/杂谈-编程规范那些事/</id>
    <published>2018-08-29T14:28:29.000Z</published>
    <updated>2018-10-11T12:46:32.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>一直很想写一篇博客来普及一下“编程规范”这个看似不重要其实很重要的东西，首先，它是团队合作的基础，有些 OI 竞赛也是有团队合作的。其次，下到 OI 中几十行的程序，上到大项目中几千行甚至几万行乃至上亿（额，这个似乎很少见），如果写得太难看那就会让人实在是无法忍受（比如在写 DP 的时候硬是将一个状态转移方程压成了一行，行数比列数还多一倍）。可见编程规范是多么的重要!</p><a id="more"></a><h3 id="Google-C-编程规范"><a href="#Google-C-编程规范" class="headerlink" title="Google C++ 编程规范"></a>Google C++ 编程规范</h3><p>Google 的项目一直都让人看起来赏心悦目，即使有些混乱的宏定义也让人看起来赏心悦目，首先贴一张图，转自 <a href="https://blog.csdn.net/voidccc/article/details/37599203" target="_blank" rel="noopener">CSDN 上的一篇博客</a></p><div style="slign: center"> <img src="pic1.jpg"> </div><p>然后贴上谷歌编程指南的<a href="https://zh-google-styleguide.readthedocs.io/en/latest/" target="_blank" rel="noopener">详细说明</a></p><h3 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h3><p>Google 的编程指南真的是高妙，看起来赏心悦目，但个人觉得还是要去其糟粕的，比如“不用全局变量”这种，在竞赛中就可以直接忽视了，还是以代码的易用性为第一要务。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;一直很想写一篇博客来普及一下“编程规范”这个看似不重要其实很重要的东西，首先，它是团队合作的基础，有些 OI 竞赛也是有团队合作的。其次，下到 OI 中几十行的程序，上到大项目中几千行甚至几万行乃至上亿（额，这个似乎很少见），如果写得太难看那就会让人实在是无法忍受（比如在写 DP 的时候硬是将一个状态转移方程压成了一行，行数比列数还多一倍）。可见编程规范是多么的重要!&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://walesexcitedmei.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://walesexcitedmei.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="编程规范" scheme="http://walesexcitedmei.github.io/tags/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>[HEXO] hexo 中插入视频的方法</title>
    <link href="http://walesexcitedmei.github.io/2018/08/29/HEXO-hexo-%E4%B8%AD%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://walesexcitedmei.github.io/2018/08/29/HEXO-hexo-中插入视频的方法/</id>
    <published>2018-08-29T12:31:30.000Z</published>
    <updated>2018-10-11T12:46:32.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>以前一直以为 hexo 是不能插入视频的，今天突然知道了，原来插入视频是可以的！！本篇博客主要讲解一下 hexo 博客如何插入视频。</p><a id="more"></a><h3 id="插入-Youtube-视频"><a href="#插入-Youtube-视频" class="headerlink" title="插入 Youtube 视频"></a>插入 Youtube 视频</h3><p>插入 Youtube 视频其实很简单，在 YouTube 视频的下方的“共享”中，选择嵌入即可获取类似这样的链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"560"</span> <span class="attr">height</span>=<span class="string">"315"</span> <span class="attr">src</span>=<span class="string">"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">allow</span>=<span class="string">"autoplay; encrypted-media"</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下（要梯子）：</p><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><p>可以将 <code>width</code> 或 <code>height</code> 改为 <code>&quot;100%&quot;</code>（当然也可以两个都改，具体效果试了才知道，这个数值是可以随便改的）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"350"</span> <span class="attr">src</span>=<span class="string">"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">allow</span>=<span class="string">"autoplay; encrypted-media"</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下（要梯子）：</p><iframe width="100%" height="350" src="https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><h3 id="插入-Bilibili-视频"><a href="#插入-Bilibili-视频" class="headerlink" title="插入 Bilibili 视频"></a>插入 Bilibili 视频</h3><p>其实也是一样，点击“分享”，获取 <code>iframe</code> 这个代码就可以了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=19448254&amp;cid=31715906&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><iframe src="//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>自定义了大小之后的效果：</p><iframe width="100%" height="350" src="//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h3><p>直接把视频文件放在资源文件夹里，然后直接写 HTML 代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">The `<span class="tag">&lt;<span class="name">video</span>&gt;</span>` tag is not supported by your browser.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><video width="100%" height="400" src="movie.mp4" controls="controls"><br>The <code>&lt;video&gt;</code> tag is not supported by your browser.<br></video><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>嗯…… HTML 大法好，在 Markdown 里用 HTML 控件简直美滋滋。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;以前一直以为 hexo 是不能插入视频的，今天突然知道了，原来插入视频是可以的！！本篇博客主要讲解一下 hexo 博客如何插入视频。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://walesexcitedmei.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://walesexcitedmei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[图论] Dijkstra 最短路计数</title>
    <link href="http://walesexcitedmei.github.io/2018/08/29/%E5%9B%BE%E8%AE%BA-Dijkstra-%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0/"/>
    <id>http://walesexcitedmei.github.io/2018/08/29/图论-Dijkstra-最短路计数/</id>
    <published>2018-08-29T09:58:02.000Z</published>
    <updated>2018-10-11T12:46:32.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>最短路计数是一个很经典的问题，今天刚好做到了这样一道题，就来总结一下。</p><a id="more"></a><h3 id="最短路计数"><a href="#最短路计数" class="headerlink" title="最短路计数"></a>最短路计数</h3><p><a href="https://www.luogu.org/problemnew/show/P1144" target="_blank" rel="noopener">题目：洛谷 P1144 最短路计数</a><br>最短路计数本质上还是求最短路，只不过在迭代的同时来更新最短路数量。首先来回忆一下 Dijkstra 求最短路的更新条件，对于一条有向边 $(u,v,w)$，我们更新到 $v$ 的最短路的条件是：<br>$$<br>dist[v] &gt; dist[u] + w<br>$$<br>在最短路计数的时候我们可以用动态规划的思想，记 $num[x]$ 表示到 $x$ 的最短路的数量，那么：</p><ol><li>若 $dist[v] = dist[u] + w$ 我们更新 $num[v] = num[v] + num[u]$，即有另外一条路径。</li><li>若 $dist[v] &gt; dist[u] + w$ 我们更新 $num[v] = num[u]$，即有更短的路径，前面的全部作废。</li></ol><p>所以这道题的代码就呼之欲出了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 2000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> modn 100003</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heapNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, d;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> heapNode &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> d &gt; b.d; &#125;</span><br><span class="line"><span class="comment">// 这里似乎是一定要加 const，否则会 CE</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edgeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> vertexTo;</span><br><span class="line"><span class="keyword">int</span> edgeNext;</span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line">&#125; edges[maxm &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> numEdges = <span class="number">0</span>, heads[maxn];</span><br><span class="line">priority_queue&lt;heapNode&gt; Q;</span><br><span class="line"><span class="keyword">int</span> dist[maxn], num[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">numEdges = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(heads, <span class="number">-1</span>, <span class="keyword">sizeof</span>(heads));</span><br><span class="line"><span class="built_in">memset</span>(dist, INF, <span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">numEdges++;</span><br><span class="line">edges[numEdges].vertexTo = vertex2;</span><br><span class="line">edges[numEdges].weight = weight;</span><br><span class="line">edges[numEdges].edgeNext = heads[vertex1];</span><br><span class="line">heads[vertex1] = numEdges;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDuplexEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">addEdge(vertex1, vertex2, weight);</span><br><span class="line">addEdge(vertex2, vertex1, weight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">dist[x] = <span class="number">0</span>;</span><br><span class="line">num[x] = <span class="number">1</span>;</span><br><span class="line">Q.push((heapNode)&#123; x, <span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">heapNode f = Q.top();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">int</span> u = f.u;</span><br><span class="line"><span class="keyword">int</span> d = f.d;</span><br><span class="line"><span class="keyword">if</span> (d != dist[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = heads[u]; i != <span class="number">-1</span>; i = edges[i].edgeNext) &#123;</span><br><span class="line"><span class="keyword">int</span> j = edges[i].vertexTo;</span><br><span class="line"><span class="keyword">int</span> w = edges[i].weight;</span><br><span class="line"><span class="keyword">if</span> (dist[j] == dist[u] + w) &#123;</span><br><span class="line">num[j] += num[u]; <span class="comment">// 更新情况一</span></span><br><span class="line">num[j] %= modn; <span class="comment">// 题目要求取模</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dist[j] &gt; dist[u] + w) &#123;</span><br><span class="line">num[j] = num[u]; <span class="comment">// 更新情况二</span></span><br><span class="line">dist[j] = dist[u] + w;</span><br><span class="line">Q.push((heapNode)&#123; j, dist[j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (x == y) <span class="keyword">continue</span>;</span><br><span class="line">addDuplexEdge(x, y, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123; <span class="built_in">cout</span> &lt;&lt; num[i] &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由这个最短路计数我们可以看出动态规划实在是实用啊！</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;最短路计数是一个很经典的问题，今天刚好做到了这样一道题，就来总结一下。&lt;/p&gt;
    
    </summary>
    
      <category term="图论" scheme="http://walesexcitedmei.github.io/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="图论" scheme="http://walesexcitedmei.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://walesexcitedmei.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="最短路计数" scheme="http://walesexcitedmei.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0/"/>
    
      <category term="Dijkstra" scheme="http://walesexcitedmei.github.io/tags/Dijkstra/"/>
    
  </entry>
  
  <entry>
    <title>[平衡树] Treap 总结</title>
    <link href="http://walesexcitedmei.github.io/2018/08/25/%E5%B9%B3%E8%A1%A1%E6%A0%91-Treap-%E6%80%BB%E7%BB%93/"/>
    <id>http://walesexcitedmei.github.io/2018/08/25/平衡树-Treap-总结/</id>
    <published>2018-08-25T00:21:53.000Z</published>
    <updated>2018-10-11T12:46:32.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>为了继续完善自己的数据结构有关的知识，决定先总结一波 Treap。Treap 是我学的第一个平衡树结构，花了很长时间才<del>把板子背下来</del>把它真正理解了，不禁感叹数据结构真的是神奇啊！</p><a id="more"></a><h3 id="BST-二叉查找树的性质"><a href="#BST-二叉查找树的性质" class="headerlink" title="BST 二叉查找树的性质"></a>BST 二叉查找树的性质</h3><p>因为想重点总结的是 Treap 而不是<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9" target="_blank" rel="noopener">普通 BST</a>，所以这里只稍微提一下它的性质：</p><ol><li>若任意节点的左子树不空，则左子树上<strong>所有节点</strong>的值均<strong>小于</strong>它的根节点的值；</li><li>若任意节点的右子树不空，则右子树上<strong>所有节点</strong>的值均<strong>大于</strong>它的根节点的值；</li><li>任意节点的左、右子树也分别为二叉查找树；</li><li><strong>没有键值相等的节点。</strong></li></ol><p>BST 是 Treap 学习的基础，更多内容可以看<a href="https://lufficc.com/blog/binary-search-tree" target="_blank" rel="noopener">这篇博客</a>。<br>上面这些性质，可以使得在 BST 上查找前驱 / 后继更为方便。这些性质是构建 BST 的基础，但是也使得 BST 不能很好地保持树的平衡，即左右子树的大小相差太大，最极端的情况就是一条链，为了保持 BST 的平衡，诞生了各种平衡树。</p><h3 id="Treap"><a href="#Treap" class="headerlink" title="Treap"></a>Treap</h3><h4 id="Zig-和-Zag"><a href="#Zig-和-Zag" class="headerlink" title="Zig 和 Zag"></a>Zig 和 Zag</h4><p>保持 Treap 平衡的方式就是改变 Treap 的形态，同时又必须保证 Treap 仍然具备 BST 的性质，于是 Zig 和 Zag 操作就诞生了</p><div style="align: center"> <img src="zigzag.png"> </div><p>可见这并不是简单的旋转，它还将某个节点向根节点移动，这个过程只可意会不可言传，还是好好理解上图。旋转的代码实现如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zig</span><span class="params">(<span class="keyword">int</span> &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> q = treap[p].lChild;</span><br><span class="line">treap[p].lChild = treap[q].rChild;</span><br><span class="line">treap[q].rChild = p;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zag</span><span class="params">(<span class="keyword">int</span> &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> q = treap[p].rChild;</span><br><span class="line">treap[p].rChild = treap[q].lChild;</span><br><span class="line">treap[q].lChild = p;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="保证-Treap-的平衡"><a href="#保证-Treap-的平衡" class="headerlink" title="保证 Treap 的平衡"></a>保证 Treap 的平衡</h4><p>什么样的旋转才能保证它的平衡呢？Treap 是 Tree 和 Heap 的复合名词，所以它还满足堆性质。它利用“随机”来创造平衡的条件，每一个节点都有一个随机生成的额外权值，Treap 在满足 BST 性质的同时还通过旋转使得权值满足大根堆的性质。特别的，在删除 Treap 的节点时，可以直接把这个节点旋转到叶节点来直接删除，这样就免去了很多复杂的操作。</p><h4 id="从一道例题看代码实现"><a href="#从一道例题看代码实现" class="headerlink" title="从一道例题看代码实现"></a>从一道例题看代码实现</h4><p>题目在这：<a href="https://www.luogu.org/problemnew/show/P3369" target="_blank" rel="noopener">洛谷 P3369 【模板】普通平衡树</a></p><p>因为题目中同一个节点可能有多个，所以可以为每个节点增加一个“副本数”，同时在获取 Rank 的时候别忘了减一，因为初始化的时候有一个正无穷，一个负无穷，它们只是为了保证 BST 性质，并不是实际的节点。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treapNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> lChild, rChild; <span class="comment">// 左右子节点下标</span></span><br><span class="line"><span class="keyword">int</span> value, weight;  <span class="comment">// 节点关键码及权值</span></span><br><span class="line"><span class="keyword">int</span> count, size;    <span class="comment">// 副本数及子树大小</span></span><br><span class="line">&#125; treap[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> numNodes, root, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">numNodes++;</span><br><span class="line">treap[numNodes].value = val;</span><br><span class="line">treap[numNodes].weight = rand(); <span class="comment">// 随机权值</span></span><br><span class="line">treap[numNodes].count = treap[numNodes].size = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> numNodes;</span><br><span class="line">&#125; <span class="comment">// 建立一个新的节点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">treap[p].size = treap[treap[p].lChild].size +</span><br><span class="line">treap[treap[p].rChild].size +</span><br><span class="line">treap[p].count;</span><br><span class="line">&#125; <span class="comment">// 更新某一个点的 size 方便获取排名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">newNode(-INF); <span class="comment">// 保证 BST 性质的两个点</span></span><br><span class="line">newNode(INF);</span><br><span class="line">root = <span class="number">1</span>;</span><br><span class="line">treap[root].rChild = <span class="number">2</span>;</span><br><span class="line">update(root);</span><br><span class="line">&#125; <span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRankByVal</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (val == treap[p].value)</span><br><span class="line"><span class="keyword">return</span> treap[treap[p].lChild].size + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (val &lt; treap[p].value)</span><br><span class="line"><span class="keyword">return</span> getRankByVal(treap[p].lChild, val);</span><br><span class="line"><span class="keyword">return</span> getRankByVal(treap[p].rChild, val) +</span><br><span class="line">treap[treap[p].lChild].size +</span><br><span class="line">treap[p].count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上下两个函数很好理解，不作赘述</span></span><br><span class="line"><span class="comment">// 一切从 BST 性质出发</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValByRank</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> rnk)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="keyword">if</span> (treap[treap[p].lChild].size &gt;= rnk)</span><br><span class="line"><span class="keyword">return</span> getValByRank(treap[p].lChild, rnk);</span><br><span class="line"><span class="keyword">if</span> (treap[treap[p].lChild].size + treap[p].count &gt;= rnk)</span><br><span class="line"><span class="keyword">return</span> treap[p].value;</span><br><span class="line"><span class="keyword">return</span> getValByRank(treap[p].rChild,</span><br><span class="line">rnk - treap[treap[p].lChild].size - treap[p].count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zig</span><span class="params">(<span class="keyword">int</span> &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> q = treap[p].lChild;</span><br><span class="line">treap[p].lChild = treap[q].rChild;</span><br><span class="line">treap[q].rChild = p;</span><br><span class="line">p = q;</span><br><span class="line">update(treap[p].rChild);</span><br><span class="line">update(p); <span class="comment">// 别忘记更新</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zag</span><span class="params">(<span class="keyword">int</span> &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> q = treap[p].rChild;</span><br><span class="line">treap[p].rChild = treap[q].lChild;</span><br><span class="line">treap[q].lChild = p;</span><br><span class="line">p = q;</span><br><span class="line">update(treap[p].lChild);</span><br><span class="line">update(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;p, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">p = newNode(val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (val == treap[p].value) &#123;</span><br><span class="line">treap[p].count++;</span><br><span class="line">update(p);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (val &lt; treap[p].value) &#123;</span><br><span class="line">insert(treap[p].lChild, val);</span><br><span class="line"><span class="keyword">if</span> (treap[p].weight &lt; treap[treap[p].lChild].weight) zig(p);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">insert(treap[p].rChild, val);</span><br><span class="line"><span class="keyword">if</span> (treap[p].weight &lt; treap[treap[p].rChild].weight) zag(p);</span><br><span class="line">&#125; <span class="comment">// zig 和 zag 操作，保证满足大根堆性质</span></span><br><span class="line">update(p);</span><br><span class="line">&#125; <span class="comment">// 插入一个点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPre</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> p = root;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (val == treap[p].value) &#123;</span><br><span class="line"><span class="keyword">if</span> (treap[p].lChild &gt; <span class="number">0</span>) &#123;</span><br><span class="line">p = treap[p].lChild; <span class="comment">// 左子树上不断向右走，获取最大的前驱</span></span><br><span class="line"><span class="keyword">while</span> (treap[p].rChild &gt; <span class="number">0</span>) p = treap[p].rChild;</span><br><span class="line">ans = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (treap[p].value &lt; val &amp;&amp;</span><br><span class="line">treap[p].value &gt; treap[ans].value) ans = p; <span class="comment">// 尝试更新答案</span></span><br><span class="line">p = val &lt; treap[p].value ? treap[p].lChild : treap[p].rChild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> treap[ans].value;</span><br><span class="line">&#125; <span class="comment">// 获取前驱</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNext</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> p = root;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (val == treap[p].value) &#123;</span><br><span class="line"><span class="keyword">if</span> (treap[p].rChild &gt; <span class="number">0</span>) &#123;</span><br><span class="line">p = treap[p].rChild; <span class="comment">// 右子树上不断向左走，获取最小的后继</span></span><br><span class="line"><span class="keyword">while</span> (treap[p].lChild &gt; <span class="number">0</span>) p = treap[p].lChild;</span><br><span class="line">ans = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (treap[p].value &gt; val &amp;&amp;</span><br><span class="line">treap[p].value &lt; treap[ans].value) ans = p; <span class="comment">// 尝试更新答案</span></span><br><span class="line">p = val &lt; treap[p].value ? treap[p].lChild : treap[p].rChild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> treap[ans].value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> &amp;p, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (val == treap[p].value) &#123;</span><br><span class="line"><span class="keyword">if</span> (treap[p].count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">treap[p].count--;</span><br><span class="line">update(p);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (treap[p].lChild != <span class="number">0</span> || treap[p].rChild != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (treap[p].rChild == <span class="number">0</span> ||</span><br><span class="line">treap[treap[p].lChild].weight &gt; treap[treap[p].rChild].weight) &#123;</span><br><span class="line">zig(p);</span><br><span class="line">remove(treap[p].rChild, val);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">zag(p);</span><br><span class="line">remove(treap[p].lChild, val);</span><br><span class="line">&#125; <span class="comment">// 通过旋转来删除节点</span></span><br><span class="line">update(p);</span><br><span class="line">&#125; <span class="keyword">else</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (val &lt; treap[p].value) remove(treap[p].lChild, val);</span><br><span class="line"><span class="keyword">else</span> remove(treap[p].rChild, val);</span><br><span class="line">update(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">numNodes = <span class="number">0</span>;</span><br><span class="line">build();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> opt, x;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; opt &gt;&gt; x;</span><br><span class="line"><span class="keyword">switch</span> (opt) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123; insert(root, x); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123; remove(root, x); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: &#123; <span class="built_in">cout</span> &lt;&lt; getRankByVal(root, x) - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>; &#125; <span class="comment">// 减一</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: &#123; <span class="built_in">cout</span> &lt;&lt; getValByRank(root, x + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>; &#125; <span class="comment">// 加一</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: &#123; <span class="built_in">cout</span> &lt;&lt; getPre(x) &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: &#123; <span class="built_in">cout</span> &lt;&lt; getNext(x) &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>班里的某个大佬和我说 Treap 没有 ZigZag，这让我很懵逼。但是 Zig 和 Zag 操作的确是很重要的，似乎在学 Splay 的时候也会用到，多学无害。Treap 还是很有用的，<del>关键时候可以救命</del>。 </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;为了继续完善自己的数据结构有关的知识，决定先总结一波 Treap。Treap 是我学的第一个平衡树结构，花了很长时间才&lt;del&gt;把板子背下来&lt;/del&gt;把它真正理解了，不禁感叹数据结构真的是神奇啊！&lt;/p&gt;
    
    </summary>
    
      <category term="平衡树" scheme="http://walesexcitedmei.github.io/categories/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    
      <category term="树形结构" scheme="http://walesexcitedmei.github.io/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
      <category term="Treap" scheme="http://walesexcitedmei.github.io/tags/Treap/"/>
    
      <category term="平衡树" scheme="http://walesexcitedmei.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>[数论] OI 中素数有关的算法整理</title>
    <link href="http://walesexcitedmei.github.io/2018/08/22/%E6%95%B0%E8%AE%BA-OI-%E4%B8%AD%E7%B4%A0%E6%95%B0%E6%9C%89%E5%85%B3%E7%9A%84%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>http://walesexcitedmei.github.io/2018/08/22/数论-OI-中素数有关的算法整理/</id>
    <published>2018-08-22T10:26:19.000Z</published>
    <updated>2018-10-11T12:46:32.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>本来是想总结一道数论神题的，但是怎么证明似乎都不是很完美，而且代码的实现涉及到很多数论有关的算法，于是想现总结一下与素数有关的算法。</p><a id="more"></a><h3 id="素数的判定"><a href="#素数的判定" class="headerlink" title="素数的判定"></a>素数的判定</h3><h4 id="Brute-Force-朴素算法"><a href="#Brute-Force-朴素算法" class="headerlink" title="Brute-Force 朴素算法"></a>Brute-Force 朴素算法</h4><p>额，这个就不多说了吧，最无脑的，$2\thicksim n$ 枚举所有小于 $n$ 的数来进行判定。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++i)</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (isPrime(n) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Optimized-Brute-Force-优化过的朴素算法"><a href="#Optimized-Brute-Force-优化过的朴素算法" class="headerlink" title="Optimized-Brute-Force 优化过的朴素算法"></a>Optimized-Brute-Force 优化过的朴素算法</h4><p>如果一个数不是素数是合数， 那么一定可以由两个大于 $1$ 自然数相乘得到， 其中一个大于或等于它的平方根，一个小于或等于它的平方根。并且成对出现。所以可以优化朴素算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt; n; ++i)</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (isPrime(n) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="筛法求素数"><a href="#筛法求素数" class="headerlink" title="筛法求素数"></a>筛法求素数</h4><p>上面两个菜鸡方法只能针对数很小的情况，这些情况在 OI 中出现的话出卷老师会<del>死得很惨</del>变成广大 OIer 的恩人，然而这种情况是不可能的。于是又有了更高效的方法——筛法。它的思想就是将一个范围内的素数全部筛出来，预处理之后方便查找和判定。最朴素的筛法莫过于 Eratosthenes 筛法了<del>（不要纠结这个名字怎么读，因为我也不会）</del>，它是将所有素数的倍数都给筛掉，剩下的就是素数了。时间复杂度为 $O(N\log\log N)$ 接近线性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000010</span></span><br><span class="line"><span class="keyword">bool</span> prime[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eratosthenes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(prime, <span class="literal">true</span>, <span class="keyword">sizeof</span>(prime));</span><br><span class="line">prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxn; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!prime[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= maxn / i; ++j) &#123;</span><br><span class="line"><span class="comment">// 这里是一个小优化，因为小于 i^2 的数在前面肯定已经筛过了</span></span><br><span class="line"><span class="comment">// 所以 j 从 i 开始取</span></span><br><span class="line">prime[j * i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">Eratosthenes();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (prime[n] ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，Eratosthenes 筛会重复标记素数，造成时间复杂度冗余，如果对于每个数有唯一的方法确定它，那么就可以解决这个问题。由此引出了线性筛这个方法，它通过从大到小累计质因子的方法标记每一个合数，即让 $12$ 只有 $2\times 2\times 3$ 这种产生方式。设数组 $fac$ 记录每个数的最小质因子，我们按照下面的步骤来维护 $fac$：</p><ol><li>依次考虑 $1\thicksim n$ 之见的每一个数 $i$</li><li>若 $fac[i]=i$ 说明 $i$ 是质数，将它保存下来</li><li>扫描不大于 $fac[i]$ 的每个质数 $p$，令 $fac[i\times p]=p$，即在 $i$ 的基础上累积一个质因子 $p$，因为 $p\leqslant fac[i]$，所以 $p$ 为合数 $i\times p$ 的最小质因子。</li></ol><p>这样子，每个合数只会被它的最小质因子 $p$ 筛一次，时间复杂度为线性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000010</span></span><br><span class="line"><span class="keyword">int</span> fac[maxn], prime[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinearSieve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(fac, <span class="number">0</span>, <span class="keyword">sizeof</span>(fac));</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (fac[i] == <span class="number">0</span>) &#123; fac[i] = i; prime[++m] = i; &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="comment">// 跳出循环的条件</span></span><br><span class="line"><span class="keyword">if</span> (prime[j] &gt; fac[i] || prime[j] &gt; n / i) <span class="keyword">break</span>;</span><br><span class="line">fac[i * prime[j]] = prime[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">cout</span> &lt;&lt; prime[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LinearSieve(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线性筛又名<strong>欧拉筛</strong>。</p><h4 id="伪素数测试"><a href="#伪素数测试" class="headerlink" title="伪素数测试"></a>伪素数测试</h4><p>在开始 Miller-Rabin 算法之前我们先来看一下伪素数测试，首先要了解费马小定理： $a^{p-1}\equiv1(\bmod p)$ 当 $p$ 为素数时且 $gcd(a,p)=1$ 时。费马小定理的逆命题虽然不是真命题，但是几乎成立，而不成立的时候，即如果 $n$ 是一个合数且 $a^{n-1}\equiv 1(\bmod n)$，那么称 $n$ 为基为 $a$ 的<strong>伪素数</strong>。<br>如果我们找到一个 $a$ 使得 $n$ 不满足上述等式，那么 $n$ 必定为合数，那如果满足呢？$n$ 不一定是素数，这样的数被称作 Carmicheal 数，但是这种数十分稀少，前 $10000$ 个 $n$ 中只有 $22​$ 个数为 Carmicheal 数，所以这种方法还是比较可靠的。附上算法导论中的伪代码：</p><div style="align: center"> <img src="pic1.png"> </div><p>因为 Carmicheal 数的存在，人们寻求更好的，更准确的素数判定方法，于是就有了 Miller-Rabin 算法</p><h4 id="Miller-Rabin-算法"><a href="#Miller-Rabin-算法" class="headerlink" title="Miller-Rabin 算法"></a>Miller-Rabin 算法</h4><p>通过费马小定理我们可以得出一个推论，若 $p$ 为一个奇素数，那么有：<br>$$<br>a^p\equiv a\pmod p,1\leqslant a\leqslant p<br>$$</p><p>我们记<br>$$<br>p-1=2^kq,2\nmid q<br>$$<br>设 $a$ 是不被 $p$ 整除的数，那么下面两个条件之一必然成立：</p><ul><li>$a^q \equiv 1 \pmod p$</li><li>$a^q, a^{2q}, a^{2^2q}, \dots, a^{2^{k-1}q} \equiv -1 \pmod p$ 之中有一个等式成立</li></ul><p>根据如下命题：<br>$$<br>a^2 \equiv 1 \pmod p \Rightarrow a \equiv \pm 1 \pmod p<br>$$<br>又因为上面第二个条件中的数，每一个都是前一个的平方，且最后一个数的平方是 $1$，所以如果表中一个数它模 $p$ 不余 $1$，但是它的平方模 $p$ 余 $1$，那么那个数一定是 $-1$，所以在这种情况下表中包含 $ -1$，又或者表中全是 $1$，那么第一个条件就会成立。</p><p>所以我们得到了 Miller-Rabin 素性测试的方法，也就是说，如果一个数不满足上面的性质，那么它就是和数，这个 $a$ 就成为证据。而 Miller-Rabin 的证据和上面提到的方法的证据不同，它能够保证每一个奇合数 $p$ 都会有不少于 $\frac{(p−1)}{2}$个证据（具体证明详见算法导论）。</p><p>我们只要随机 $50$ 个数来测试，那么测试失败的概率一定小于 $2^{−50}$，大约是 $8.9⋅10^{−16}$，如果你觉得不够，还可以找更多的数来测试。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>  int64;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> int64 <span class="title">rand64</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">abs</span>((int64)rand() &lt;&lt; <span class="number">32</span> | rand()); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> int64 <span class="title">random</span><span class="params">(int64 x, int64 y)</span> </span>&#123; <span class="keyword">return</span> x + rand64() % (y - x + <span class="number">1</span>); &#125;</span><br><span class="line"><span class="comment">// 随机数生成函数</span></span><br><span class="line"><span class="function">int64 <span class="title">montgomery</span><span class="params">(int64 a, int64 b, int64 c)</span> </span>&#123;</span><br><span class="line">int64 result = <span class="number">1</span>;</span><br><span class="line">int64 temp = a;</span><br><span class="line"><span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) result = (result * temp) % c;</span><br><span class="line">temp = (temp * temp) % c;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">witness</span><span class="params">(int64 a, int64 p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">int64 q = p - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ((q &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123; k++; q &gt;&gt;=<span class="number">1</span>; &#125;</span><br><span class="line">int64 v = montgomery(a, q, p); <span class="comment">// 判断一</span></span><br><span class="line"><span class="keyword">if</span> (v == <span class="number">1</span> || v == p - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line">v = v * v % p;</span><br><span class="line"><span class="keyword">if</span> (v == p - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 判断二</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MillerRabin</span><span class="params">(int64 p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (p % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 这里其实可以加更多的特判来节约时间</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50</span>; ++i)</span><br><span class="line"><span class="keyword">if</span> (witness(random(<span class="number">1</span>, p - <span class="number">1</span>), p)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (MillerRabin(i)) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="comment">// 输出 1 ~ n 之间的所有素数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于大的素数，为了节约判定的时间，我们只能退而求其次选择非完美算法来进行验证，不过不得不说，Miller-Rabin 其实已经很完备了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>事实上，对于素数的判定还有很多算法，例如 <a href="https://en.wikipedia.org/wiki/Solovay%E2%80%93Strassen_primality_test" target="_blank" rel="noopener">Solovay-Strassen 算法</a>和 <a href="https://en.wikipedia.org/wiki/AKS_primality_test" target="_blank" rel="noopener">AKS 算法</a>，然而这两个似乎都超出了 OI 的范围，一般不会用得到，这里也就不再赘述。</p><h3 id="质因数分解"><a href="#质因数分解" class="headerlink" title="质因数分解"></a>质因数分解</h3><h4 id="试除法"><a href="#试除法" class="headerlink" title="试除法"></a>试除法</h4><p>结合素数判定的“试除法”和“Eratosthenes 筛法”，我们可以扫描 $2\thicksim\lfloor\sqrt{n}\rfloor$ 中的每个数 $d$，若 $d$ 能整除 $n$，则从 $n$ 中除掉所有的因子 $d$，同时累计个数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p[maxn], c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">p[++m] = i;</span><br><span class="line">c[m] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123; n /= i; c[m]++; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123; p[++m] = n; c[m] = <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">cout</span> &lt;&lt; p[i] &lt;&lt; <span class="string">'^'</span> &lt;&lt; c[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Pollard-Rho-算法"><a href="#Pollard-Rho-算法" class="headerlink" title="Pollard-Rho 算法"></a>Pollard-Rho 算法</h4><p>Pollard-Rho 也是一个不完美算法，不完美之处在时间复杂度上体现。Pollard-Rho算法分解一个数 $n$ 的过程大体上是这样子的：</p><ol><li>找到一个数 $p$，使得 $p|n$，将 $n$ 分解为 $p$ 与 $\frac{n}{p}$</li><li>如果 $p$ 或 $\frac{n}{p}$ 不为质数，将其带入递归上述过程</li><li>如果其是质数，将其记录并退出</li></ol><p>那有人就会问了：这跟暴力分解有什么区别？好像时间复杂度比暴力还高啊！！？？所以，下面的优化才是关键。第一个优化，使用 Miller-Rabin 判定其是否为质数。第二个优化才是最关键的：对于一个大整数n，我们要找到一个 $p$ 满足 $p|n$，这如同大海捞针。但是如果我们要找出 $p_1$、$p_2$，使得 $(|p_1−p_2|)|n$，这看起来似乎要容易一些。实际上我们只需要找出 $\gcd((|p1−p2|),n)&gt;1$的 $p_1$、$p_2$，则其 $\gcd$ 值肯定为n的约数。这看起来又容易了一些。实际上，这让整个算法容易许多。根据<a href="https://zh.wikipedia.org/wiki/%E7%94%9F%E6%97%A5%E5%95%8F%E9%A1%8C" target="_blank" rel="noopener">生日悖论</a>，这种两两比较的方式，在加入比较的数越来越多的时候，其效率会大大提升，比找一个数的效率快很多。于是，找 $p$ 的过程变成了这个样子：</p><ol><li>找到一个数 $p_1$</li><li>通过某种玄学推导手段找出一个与 $p_1$ 对应的 $p_2$</li><li>判断 $\gcd((|p1−p2|),n)$ 是否大于 $1$，不大于则将 $p_2$作为新的 $p_1$，重复过程，否则就找到了</li></ol><p>为什么要用玄学手段？因为只有通过推导手段，才能保证不做重复判断。理论上的推导手段可以有很多，但实际使用中一般使用如下公式推导：<br>$$<br>p_2=(p_1^2+c)\bmod n<br>$$<br>其中 $c$ 为随机常数。<br>这个公式的好处:</p><ol><li>推导出来的 $p_2-p_1$ 差值基本不会相等。</li><li>可以证明，该推导结果会出现循环。也就是说，在出现循环之前，结果不会重复，少做了许多无用的判断。</li></ol><p>出现循环了怎么办？换一个随机常数再搞。这就是该算法“非完美”的地方，<del>时间复杂度要看脸的</del>。那么如何判环呢？这里介绍一个算法：<a href="https://zh.wikipedia.org/wiki/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Floyd 判圈</a>。 需要注意的是，之所以不能一个标记定在原地，是因为循环节不一定在开头就产生，可能走着走着才遇到循环。这条路径就类似于 $\rho$，Pollard-Rho 算法也是因此得名的。顺便附上算法导论中的一张玄学图：</p><div style="align: center"> <img src="pic2.png"> </div><p>注意，在小数分解的时候就别用这个了，老老实实用试除法吧。</p><h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;本来是想总结一道数论神题的，但是怎么证明似乎都不是很完美，而且代码的实现涉及到很多数论有关的算法，于是想现总结一下与素数有关的算法。&lt;/p&gt;
    
    </summary>
    
      <category term="数论" scheme="http://walesexcitedmei.github.io/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="数论" scheme="http://walesexcitedmei.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="素数" scheme="http://walesexcitedmei.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>[数论] OI 中的模运算计算方法</title>
    <link href="http://walesexcitedmei.github.io/2018/08/19/%E6%95%B0%E8%AE%BA-OI-%E4%B8%AD%E7%9A%84%E6%A8%A1%E8%BF%90%E7%AE%97%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/"/>
    <id>http://walesexcitedmei.github.io/2018/08/19/数论-OI-中的模运算计算方法/</id>
    <published>2018-08-19T03:01:03.000Z</published>
    <updated>2018-10-11T12:46:32.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>模运算在 OI 中是非常神奇的存在，有时候题目会非常好（m）心（m）地（p）让我们将答案取模，然而计算模的方法随着题目的变化而变化，网上很多博客又太零散，这里痛下决心总结一下。</p><a id="more"></a><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><ul><li>恒等式：<ul><li>$(a\bmod n)\bmod n=a\bmod n$</li><li>对于所有的正数 $x$ 有：$n^x\bmod n = 0$</li><li>如果 p 是一个质数，且不为 b 的因数，此时由费马小定理有：$ab^{p−1}\bmod p=a\bmod p$</li></ul></li><li>分配律<ul><li>$(a-b)\bmod n=(a\bmod n-b\bmod n)\bmod n$</li><li>$(a+b)\bmod n=(a\bmod n+b\bmod n)\bmod n$</li><li>$ab\bmod n=(a\bmod n)(b\bmod n)\bmod n$</li></ul></li></ul><h3 id="高次幂函数的取模"><a href="#高次幂函数的取模" class="headerlink" title="高次幂函数的取模"></a>高次幂函数的取模</h3><h4 id="暴力取模法"><a href="#暴力取模法" class="headerlink" title="暴力取模法"></a>暴力取模法</h4><p>由于我们的高次幂函数往往拥有很高的幂，而我们在计算机中只有<code>int</code>、<code>float</code>、<code>double</code>、<code>long long</code>这几种变量类型，远远不能满足我们对于大数字运算的要求，从而导致数据溢出无法完成运算。<br>所以这里我们需要在每次迭代取模的过程中进行取模运算，从而保证数据不会溢出。代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b--) result = result * a % c;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算 a^b % c</span></span><br></pre></td></tr></table></figure></p><p>这种算法的正确性毋庸置疑，但是如果幂指数太大的话，需要耗费的时间就更非常多，直接导致运算效率低下，所以只适用于指数不大的情况下使用。</p><h4 id="二分幂"><a href="#二分幂" class="headerlink" title="二分幂"></a>二分幂</h4><p>要求 $a^n$，如果知道了 $a^{\frac{n}{2}}$ 那么再平方就行了。<br>令 $A=a^{\lfloor\frac{n}{2}\rfloor}$<br>若 $n$ 为偶数，那么 $Result=A^2$<br>若 $n$ 为奇数，那么 $Result=a\times A^2$<br>这样子复杂度从 $O(n)$ 降到了 $O(\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % c;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x = <span class="built_in">pow</span>(a, b / <span class="number">2</span>, c);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = (<span class="keyword">long</span> <span class="keyword">long</span>)x * x % m;</span><br><span class="line"><span class="keyword">if</span> (b % <span class="number">2</span> == <span class="number">1</span>) ans = ans * a % m;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="蒙哥马利算法"><a href="#蒙哥马利算法" class="headerlink" title="蒙哥马利算法"></a>蒙哥马利算法</h4><p>具体详细介绍见<a href="https://en.wikipedia.org/wiki/Montgomery_modular_multiplication" target="_blank" rel="noopener">维基百科</a>，这里直接上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Montgomery</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = a;</span><br><span class="line"><span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) result = (result * temp) % c;</span><br><span class="line">temp = (temp * temp) % c;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合数取模"><a href="#组合数取模" class="headerlink" title="组合数取模"></a>组合数取模</h3><h4 id="方法一：杨辉三角递推"><a href="#方法一：杨辉三角递推" class="headerlink" title="方法一：杨辉三角递推"></a>方法一：杨辉三角递推</h4><p>使用递推公式：$C_n^m=C_{n-1}^m+C_{n-1}^{m-1}$<br>写成数组：$C[n][m]=C[n-1][m]+C[n-1][m-1]$<br>这也是杨辉三角的递推公式，所以边界为 $C[0][0]=1$。下面给出求一个组合数的方法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">m = min(m, n - m);</span><br><span class="line"><span class="comment">// 因为 c[n][m] == c[n][n - m]</span></span><br><span class="line"><span class="comment">// 所以取最小值减少运算。</span></span><br><span class="line">c[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">c[j] = c[j] + c[j - <span class="number">1</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[m];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为只求一个组合数，所以使用了滚动数组的方式</span></span><br></pre></td></tr></table></figure></p><p>由于递推时间复杂度为 $O(n^2)$，所以只适用于小数据的情况。</p><h4 id="方法二：乘法逆元"><a href="#方法二：乘法逆元" class="headerlink" title="方法二：乘法逆元"></a>方法二：乘法逆元</h4><p>在数据很大的时候，我们对组合数取模就会比较麻烦，因为数据不一定能存下，而且通过观察组合数的公式：<br>$$<br>C_n^m=\frac{n!}{m!(n-m)!}=\frac{n\times (n-1)\times…\times(n-m+1)}{m!}<br>$$<br>我们发现组合数是带有除法的，不能走一步取一次模，为了解决除法取模的问题，人们发明了逆元这个<a href="https://en.wikipedia.org/wiki/Inverse_element" target="_blank" rel="noopener">东西</a>。<br>若 $a\times b\equiv1\pmod p$ 则称 $b$ 为 $a$ 在模 $p$ 下的乘法逆元，一般认为，$b &lt; p$，$b$ 记为 $a^{-1}$。<strong>注意，此处 $a$ 与 $p$ 必须互质，否则乘法逆元不存在。</strong>那么逆元该怎么用呢？当然是借助它将除法转为乘法，再用分配律来计算了。<br>我们来看一个式子：<br>$$<br>\frac{a}{b}\equiv\frac{a}{b}\times b\times b^{-1}\equiv a\times b^{-1}\pmod p<br>$$<br>这样就可以把问题转化为求一个数的逆元，再转化为乘法运算。</p><h5 id="递推求逆元"><a href="#递推求逆元" class="headerlink" title="递推求逆元"></a>递推求逆元</h5><p>求 $i​$ 在模 $p​$ 下的乘法逆元，满足 $gcd(i, p)=1, i&lt; p​$<br>使用欧几里得除法的形式，令 $p=k\times i+r​$，则 $k=\lfloor\frac{p}{i}\rfloor,r=p\bmod i​$<br>显然，$k\times i+r\equiv 0(\bmod p)​$<br>两边同乘 $i^{-1}\times r^{-1}​$，得 $k\times r^{-1}+i^{-1}\equiv 0\pmod p​$<br>移项，整理：$i^{-1}\equiv -k\times r^{-1}\equiv (p-k)\times r^{-1}\pmod p​$<br>将 $k​$ 和 $r​$ 用 $p​$ 来替换：$i^{-1}\equiv (p-\lfloor\frac{p}{i}\rfloor)\times (p\bmod i)^{-1}\pmod p​$<br>使用 <code>inv[i]</code> 来表示 <code>i</code> 的逆元，有 <code>inv[i] = (p - p / i) * inv[p % i]</code><br>时间复杂的为线性，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> inv[<span class="number">10000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getInverse</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (inv[x] != <span class="number">0</span>) <span class="keyword">return</span> inv[x];</span><br><span class="line">inv[x] = (p - p / i) * getInverse(p % x, p) % p;</span><br><span class="line"><span class="keyword">return</span> inv[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="费马小定理求逆元"><a href="#费马小定理求逆元" class="headerlink" title="费马小定理求逆元"></a>费马小定理求逆元</h5><p>费马小定理：<del>如此可爱的定理名称</del> $a^{p-1}\equiv1\pmod p$ 当 $p$ 为素数时且 $gcd(a,p)=1$ 时。<br>所以求 $a$ 的逆元时，只要求出 $a^{p-2}$ 的值就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Montgomery</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = a;</span><br><span class="line"><span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) result = (result * temp) % c;</span><br><span class="line">temp = (temp * temp) % c;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getinverse</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Montgomery(x, p - <span class="number">2</span>, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="逆元求组合数"><a href="#逆元求组合数" class="headerlink" title="逆元求组合数"></a>逆元求组合数</h5><p>从组合数原公式出发<br>$$<br>C_n^m=\frac{n!}{m!(n-m)!}=\frac{n\times (n-1)\times…\times(n-m+1)}{m!}<br>$$</p><p>对于分子，我们可以用传统方法，边乘边模，对于分母，我们可以求逆元再乘分子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Montgomery</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = a;</span><br><span class="line"><span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) result = (result * temp) % c;</span><br><span class="line">temp = (temp * temp) % c;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getInverse</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Montgomery(x, p - <span class="number">2</span>, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">c</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">1</span>, y = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = n; i &gt;= n - m + <span class="number">1</span>; --i) x = x * i % p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= m; ++i) y = y * i % p;</span><br><span class="line"><span class="keyword">return</span> x * getInverse(y, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, m, p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c(n, m, p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：$p$ 一定要是大质数，起码得大于 $m$。若要求 $a$ 在模 $p$ 下的乘法逆元，必须要保证 $a$ 与 $p$ 互质。在此题中，要求 $m!$ 的乘法逆元，那么 $p$ 必须与 $m!$ 互质，所以 $p$ 要大于 $m$，且是个质数。<del>我一开始忘记了这点，导致调了一年</del></strong></p><h4 id="方法三：卢卡斯定理"><a href="#方法三：卢卡斯定理" class="headerlink" title="方法三：卢卡斯定理"></a>方法三：卢卡斯定理</h4><p><strong>适用于对答案模一个质数的情况。</strong><br>与逆元不同的是，这个方法不要求 $p$ 是个很大的素数，因此，适用范围更广（也许吧）。<br><strong><a href="https://zh.wikipedia.org/wiki/%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">卢卡斯定理</a></strong>：<br>对于非负整数 $m$ 和 $n$ 及素数 $p$，有同余式：<br>$$<br>\binom{n}{m}\equiv\prod_{i=0}^k\binom{n_i}{m_i} \pmod p<br>$$<br>成立。其中：<br>$$<br>n=n_kp^k+n_{k-1}p^{k-1}+…+n_1p+n_0<br>$$<br>并且<br>$$<br>m=m_kp^k+m_{k-1}p^{k-1}+…+m_1p+m_0<br>$$<br>以上两个式子是 $n$ 和 $m$ 的 $p$ 进制展开。当 $m &lt; n$ 时，二项式系数 $\binom{n}{m}=0$。<br>可以通过<a href="https://www.luogu.org/blog/user28007/lucas" target="_blank" rel="noopener">一系列的推导</a>得出下面这个结论：<br>$$<br>\binom{n}{m}\equiv\binom{\lfloor\frac{n}{p}\rfloor}{\lfloor\frac{m}{p}\rfloor}\times \binom{n\bmod p}{m\bmod p} \pmod p<br>$$<br>由这个公式我们可以得出结论：<strong>在 $n$ 和 $m$ 都小于 $p$ 时，公式一点用都没有。（啥？你问我为什么？$\binom{0}{0}=1$ 啊！）</strong>所以这个公式是在 $n\geqslant p$ 或 $m\geqslant p$ 的情况下使用的。这样可以减小 $n$ 和 $m$，使之小于 $p$，再用乘法逆元去求组合数。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Montgomery</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = a;</span><br><span class="line"><span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) result = (result * temp) % c;</span><br><span class="line">temp = (temp * temp) % c;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getInverse</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Montgomery(a, b - <span class="number">2</span>, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % p;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt;= p || m &gt;= p) <span class="keyword">return</span> c(n / p, m / p, p) * c(n % p, m % p, p) % p;</span><br><span class="line"><span class="comment">// 核心语句</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">1</span>, y = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= n - m + <span class="number">1</span>; --i) x = x * i % p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) y = y * i % p;</span><br><span class="line"><span class="keyword">return</span> x * getInverse(y, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, m, p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c(n, m, p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;模运算在 OI 中是非常神奇的存在，有时候题目会非常好（m）心（m）地（p）让我们将答案取模，然而计算模的方法随着题目的变化而变化，网上很多博客又太零散，这里痛下决心总结一下。&lt;/p&gt;
    
    </summary>
    
      <category term="数论" scheme="http://walesexcitedmei.github.io/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="数论" scheme="http://walesexcitedmei.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="模运算" scheme="http://walesexcitedmei.github.io/tags/%E6%A8%A1%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
</feed>
