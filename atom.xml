<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梅骏逸的博客</title>
  
  <subtitle>Talk is cheap, show me the code!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://walesexcitedmei.github.io/"/>
  <updated>2018-09-25T12:58:18.144Z</updated>
  <id>http://walesexcitedmei.github.io/</id>
  
  <author>
    <name>Wales Mei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[HEXO] hexo 中加入 AdSense 广告服务的方法</title>
    <link href="http://walesexcitedmei.github.io/2018/09/25/HEXO-hexo-%E4%B8%AD%E5%8A%A0%E5%85%A5-AdSense-%E5%B9%BF%E5%91%8A%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://walesexcitedmei.github.io/2018/09/25/HEXO-hexo-中加入-AdSense-广告服务的方法/</id>
    <published>2018-09-25T09:56:35.000Z</published>
    <updated>2018-09-25T12:58:18.144Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>就在昨天！我的 AdSense 申请终于过了！这里来总结一下 hexo 上 AdSense 通过的经验。</p></div><a id="more"></a><h3 id="注册-AdSense-账号"><a href="#注册-AdSense-账号" class="headerlink" title="注册 AdSense 账号"></a>注册 AdSense 账号</h3><p>这个不多说了，直接去<a href="https://www.google.com/adsense/start/#/?modal_active=none" target="_blank" rel="noopener">这里</a></p><div> <img style="align: center" src="pic1.jpg"> </div><h3 id="更改自己-hexo-主题文件"><a href="#更改自己-hexo-主题文件" class="headerlink" title="更改自己 hexo 主题文件"></a>更改自己 hexo 主题文件</h3><p>此处以 NexT 主题为例（注：可能不是最简方式，自行斟酌）：</p><ol><li>新建 <code>theme/next/layout/_custom/google_adsense.swig</code>，将 AdSense 上的代码粘贴进去</li><li>在 <code>theme/next/layout/_custom/head.swig</code> 中也粘贴一份</li><li>如果在每篇博客里也想看到广告的话，在 <code>theme/next/layout/post.swig</code> 里中在希望看到的地方加上:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;_custom/google_adsense.swig&apos; %&#125;</span><br></pre></td></tr></table></figure><p>例如：在 <code>&lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &lt;/div&gt;</code> 中间插入，总代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;&#123; post_template.render(page) &#125;&#125;</span><br><span class="line">    &#123;% include &apos;_custom/google_adsense.swig&apos; %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>此时如果 <code>hexo server</code> 的话是看不到广告的，因为 AdSense 的显示是 Google 控制的。</p><h3 id="疯狂更新博客"><a href="#疯狂更新博客" class="headerlink" title="疯狂更新博客"></a>疯狂更新博客</h3><p>你需要使你的网站内容充足以通过 AdSense 的审核（我写了 21 篇左右才通过，其实算上所有网页其实还不止），如果被拒绝了，就再重新申请一次，说不定就过了🤣。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用 AdSense 来赚外块，美滋滋~~</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;就在昨天！我的 AdSense 申请终于过了！这里来总结一下 hexo 上 AdSense 通过的经验。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://walesexcitedmei.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://walesexcitedmei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[C++ 奇技淫巧] 终极快速读入/输出</title>
    <link href="http://walesexcitedmei.github.io/2018/09/22/C-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7-%E7%BB%88%E6%9E%81%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%85%A5-%E8%BE%93%E5%87%BA/"/>
    <id>http://walesexcitedmei.github.io/2018/09/22/C-奇技淫巧-终极快速读入-输出/</id>
    <published>2018-09-22T10:24:03.000Z</published>
    <updated>2018-09-25T12:58:18.144Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>上次看到一个手写 <code>getchar()</code> 的大神，发现自己的快速读入还是不够骚，于是去查了下网络，发现了更加厉害的快读方式。顺便把自己的快输用非递归优化了一下。</p></div><a id="more"></a><h3 id="手写-getchar"><a href="#手写-getchar" class="headerlink" title="手写 getchar()"></a>手写 <code>getchar()</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nextchar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class="line">  <span class="keyword">return</span> (p1 == p2) &amp;&amp;</span><br><span class="line">    (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, <span class="number">100000</span>, <span class="built_in">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class="line">&#125; <span class="comment">// 使用 fread() 来提高速度</span></span><br></pre></td></tr></table></figure><h3 id="快读使用-nextchar"><a href="#快读使用-nextchar" class="headerlink" title="快读使用 nextchar()"></a>快读使用 <code>nextchar()</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 使用 static 节省空间</span></span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123; sign |= (ch == <span class="string">'-'</span>); ch = nextchar(); &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123; x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>); ch = nextchar(); &#125;</span><br><span class="line">  <span class="comment">// 这里 x * 10 和 (x &lt;&lt; 1) + (x &lt;&lt; 3) 编译后的代码是一样的</span></span><br><span class="line">  <span class="comment">// 所以不需要用位运算了</span></span><br><span class="line">  x = sign ? -x : x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归-write"><a href="#非递归-write" class="headerlink" title="非递归 write()"></a>非递归 <code>write()</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> stk[<span class="number">100</span>], top = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (x == <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'0'</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; x = -x; <span class="built_in">putchar</span>(<span class="string">'-'</span>); &#125;</span><br><span class="line">  <span class="keyword">while</span> (x) &#123; stk[++top] = x % <span class="number">10</span>; x /= <span class="number">10</span>; &#125;</span><br><span class="line">  <span class="keyword">while</span> (top) &#123; <span class="built_in">putchar</span>(stk[top--] + <span class="string">'0'</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="速度测试"><a href="#速度测试" class="headerlink" title="速度测试"></a>速度测试</h3><h4 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">ofstream <span class="title">test</span><span class="params">(<span class="string">"testdata.txt"</span>)</span></span>;</span><br><span class="line">  srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>) * <span class="number">19260817</span>); <span class="comment">// +1s</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5000000</span>; ++i)</span><br><span class="line">    test &lt;&lt; rand() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">// 祖传代码</span></span><br></pre></td></tr></table></figure><h4 id="老版本测试"><a href="#老版本测试" class="headerlink" title="老版本测试"></a>老版本测试</h4><pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>::chrono;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>{  x = <span class="number">0</span>;  <span class="keyword">char</span> ch = <span class="number">0</span>;  <span class="keyword">bool</span> sign = <span class="literal">false</span>;  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) { sign |= (ch == <span class="string">'-'</span>); ch = getchar(); }  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) { x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>); ch = getchar(); }  x = sign ? -x : x;}<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) { <span class="built_in">putchar</span>(<span class="string">'-'</span>); x = -x; }  <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);  <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);}<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{  freopen(<span class="string">"testdata.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);  freopen(<span class="string">"output.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);  <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">1000000</span>];  <span class="keyword">auto</span> start = system_clock::now();  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; ++i) read(<span class="built_in">array</span>[i - <span class="number">1</span>]);  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; ++i) write(<span class="built_in">array</span>[i - <span class="number">1</span>]), <span class="built_in">putchar</span>(<span class="string">' '</span>);  <span class="keyword">auto</span> end = system_clock::now();  <span class="keyword">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);  <span class="built_in">cout</span> &lt;&lt; <span class="string">"cost: "</span>       &lt;&lt; <span class="keyword">double</span>(duration.count()) *          microseconds::period::num / microseconds::period::den       &lt;&lt; <span class="string">" seconds"</span> &lt;&lt; <span class="built_in">endl</span>;  <span class="keyword">return</span> <span class="number">0</span>;}</code></pre><pre><code>cost: 0.406813 seconds</code></pre><h4 id="新版本测试"><a href="#新版本测试" class="headerlink" title="新版本测试"></a>新版本测试</h4><pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>::chrono;<span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nextchar</span><span class="params">()</span> </span>{  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>], *p1 = buf, *p2 = buf;  <span class="keyword">return</span> (p1 == p2) &amp;&amp;    (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, <span class="number">100000</span>, <span class="built_in">stdin</span>), p1 == p2) ? EOF : *p1++;} <span class="comment">// 使用 fread() 来提高速度</span><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>{  x = <span class="number">0</span>;  <span class="keyword">static</span> <span class="keyword">char</span> ch = <span class="number">0</span>;  <span class="keyword">static</span> <span class="keyword">bool</span> sign = <span class="literal">false</span>;  <span class="comment">// 使用 static 节省空间</span>  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) { sign |= (ch == <span class="string">'-'</span>); ch = nextchar(); }  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) { x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>); ch = nextchar(); }  <span class="comment">// 这里 x * 10 和 (x &lt;&lt; 1) + (x &lt;&lt; 3) 编译后的代码是一样的</span>  <span class="comment">// 所以不需要用位运算了</span>  x = sign ? -x : x;}<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{  <span class="keyword">static</span> <span class="keyword">int</span> stk[<span class="number">100</span>], top = <span class="number">0</span>;  <span class="keyword">if</span> (x == <span class="number">0</span>) { <span class="built_in">putchar</span>(<span class="string">'0'</span>); <span class="keyword">return</span>; }  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) { x = -x; <span class="built_in">putchar</span>(<span class="string">'-'</span>); }  <span class="keyword">while</span> (x) { stk[++top] = x % <span class="number">10</span>; x /= <span class="number">10</span>; }  <span class="keyword">while</span> (top) { <span class="built_in">putchar</span>(stk[top--] + <span class="string">'0'</span>); }}<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{  freopen(<span class="string">"testdata.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);  freopen(<span class="string">"output.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);  <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">1000000</span>];  <span class="keyword">auto</span> start = system_clock::now();  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; ++i) read(<span class="built_in">array</span>[i - <span class="number">1</span>]);  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; ++i) write(<span class="built_in">array</span>[i - <span class="number">1</span>]), <span class="built_in">putchar</span>(<span class="string">' '</span>);  <span class="keyword">auto</span> end = system_clock::now();  <span class="keyword">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);  <span class="built_in">cout</span> &lt;&lt; <span class="string">"cost: "</span>       &lt;&lt; <span class="keyword">double</span>(duration.count()) *          microseconds::period::num / microseconds::period::den       &lt;&lt; <span class="string">" seconds"</span> &lt;&lt; <span class="built_in">endl</span>;  <span class="keyword">return</span> <span class="number">0</span>;}</code></pre><pre><code>cost: 0.275003 seconds</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>新的快读几乎是快了一倍，不过两者都已经是神仙打架了，像 <code>scanf</code> 这种都已经被踢飞了，不过，快读虽好，使用还是要谨慎，速度的提高主要还是靠算法的优化（除了某些高性能的题）。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;上次看到一个手写 &lt;code&gt;getchar()&lt;/code&gt; 的大神，发现自己的快速读入还是不够骚，于是去查了下网络，发现了更加厉害的快读方式。顺便把自己的快输用非递归优化了一下。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="奇技淫巧" scheme="http://walesexcitedmei.github.io/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="C++ 奇技淫巧" scheme="http://walesexcitedmei.github.io/tags/C-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP 初赛] 总结一波读程序写结果题目</title>
    <link href="http://walesexcitedmei.github.io/2018/09/20/NOIP-%E5%88%9D%E8%B5%9B-%E6%80%BB%E7%BB%93%E4%B8%80%E6%B3%A2%E8%AF%BB%E7%A8%8B%E5%BA%8F%E5%86%99%E7%BB%93%E6%9E%9C%E9%A2%98%E7%9B%AE/"/>
    <id>http://walesexcitedmei.github.io/2018/09/20/NOIP-初赛-总结一波读程序写结果题目/</id>
    <published>2018-09-20T09:57:14.000Z</published>
    <updated>2018-09-25T12:58:18.160Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>为了提高初赛分数，痛下决心总结一波<strong>读程序写结果</strong>的题。</p><p>ps: 一次更新不完，会持续更新</p></div><a id="more"></a><h3 id="第二十一届-NOIP-2015"><a href="#第二十一届-NOIP-2015" class="headerlink" title="第二十一届 / NOIP 2015"></a>第二十一届 / NOIP 2015</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">char</span> *b)</span> </span>&#123;</span><br><span class="line">  a = b;</span><br><span class="line">  (*a)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> c1, c2, *p1, *p2;</span><br><span class="line">  c1 = <span class="string">'A'</span>;</span><br><span class="line">  c2 = <span class="string">'a'</span>;</span><br><span class="line">  p1 = &amp;c1;</span><br><span class="line">  p2 = &amp;c2;</span><br><span class="line">  fun(p1, p2);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：Ab</span></span><br></pre></td></tr></table></figure><p>这道题中先是将 <code>p1</code> 赋值为 <code>c1</code> 的地址，将 <code>p2</code> 赋值为 <code>c2</code> 的地址，然后将 <code>p1</code> 赋值为 <code>p2</code> 的值，即现在 <code>p1</code> 所表示的是 <code>c2</code> 的地址，所以最后只有 <code>c2</code> 会发生改变，这道题一开始没看出来，后来仔细想了想才反应过来，不失为一道坑题。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> fromPos, <span class="keyword">int</span> toPos)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> t, tot;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (t = <span class="number">1</span>; t &lt;= <span class="number">3</span>; t++)</span><br><span class="line">    <span class="keyword">if</span> (t != fromPos &amp;&amp; t != toPos)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  tot = <span class="number">0</span>;</span><br><span class="line">  tot += fun(n - <span class="number">1</span>, fromPos, t);</span><br><span class="line">  tot++;</span><br><span class="line">  tot += fun(n - <span class="number">1</span>, t, toPos);</span><br><span class="line">  <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; fun(n, <span class="number">1</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入：5</span></span><br><span class="line"><span class="comment">// 输出：31</span></span><br></pre></td></tr></table></figure><p>这道题其实纯属糊弄人，可以发现 <code>fun</code> 这个函数中不管 <code>fromPos</code> 和 <code>toPos</code> 为何值，总能继续下去，所以简化后的函数如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> fun(n - <span class="number">1</span>) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，这样子的递归函数手推就行了。</p><h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;为了提高初赛分数，痛下决心总结一波&lt;strong&gt;读程序写结果&lt;/strong&gt;的题。&lt;/p&gt;&lt;p&gt;ps: 一次更新不完，会持续更新&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 初赛" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E5%88%9D%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP 初赛] 总结各种坑人基础知识</title>
    <link href="http://walesexcitedmei.github.io/2018/09/16/NOIP-%E5%88%9D%E8%B5%9B-%E6%80%BB%E7%BB%93%E5%90%84%E7%A7%8D%E5%9D%91%E4%BA%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://walesexcitedmei.github.io/2018/09/16/NOIP-初赛-总结各种坑人基础知识/</id>
    <published>2018-09-16T12:14:37.000Z</published>
    <updated>2018-09-25T12:58:18.160Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>初赛临近，每天一张初赛卷让我发现了很多基础知识上的坑，于是决定总结一下。</p></div><a id="more"></a><h3 id="信仰坑"><a href="#信仰坑" class="headerlink" title="信仰坑"></a>信仰坑</h3><div class="note info"><p><strong>NOI（1984 至今）:</strong> 已组织 33 次活动，各省选拔五名选手，至少一名为女选手。<br><strong>NOIP（1995 至今）:</strong> 已组织 22 次比赛，全国同一时间，不同地点。<br><strong>IOI（1989 至今）:</strong> 已组织 19 次比赛，IOI 2000 由中国主办，CCF 承办。<br><strong>APIO（2007 创建）:</strong> APIO 中国赛区由中国计算机学会组织。</p></div><div class="note warning"><p><strong>NOIP 2022 年开始将停止支持 Pascal</strong></p></div><h3 id="网络协议坑"><a href="#网络协议坑" class="headerlink" title="网络协议坑"></a>网络协议坑</h3><div class="note info"><p><strong>ARP (Address Resolution Protocol) 地址解析协议</strong><br><strong>DHCP (Dynamic Host Configuration Protocol) 动态主机配置协议</strong><br><strong>FTP (File Transfer Protocol) 文件传输协议</strong><br><strong>HTTP (Hypertext Transfer Protocol) 超文本传输协议</strong><br><strong>HTTPS (Secure Hypertext Transfer Protocol) 安全超文本传输协议</strong><br><strong>IMAP4 (Internet Mail Access Protocol Version 4) Internet 邮件访问协议——版本4</strong><br><strong>IPv6 (Internet Protocol Version 6) Internet 协议——版本6</strong><br><strong>POP3 (Post Office Protocol version 3) 邮局协议——版本3</strong><br><strong>SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议</strong><br><strong>TFTP (Trivial File Transfer Protocol) 小型文件传输协议</strong></p></div><div class="note warning"><p><strong>WWW 是 URL，不是网络协议</strong></p></div><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;初赛临近，每天一张初赛卷让我发现了很多基础知识上的坑，于是决定总结一下。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 初赛" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E5%88%9D%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP 模拟] 记录一道坑题</title>
    <link href="http://walesexcitedmei.github.io/2018/09/01/NOIP-%E6%A8%A1%E6%8B%9F-%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E5%9D%91%E9%A2%98/"/>
    <id>http://walesexcitedmei.github.io/2018/09/01/NOIP-模拟-记录一道坑题/</id>
    <published>2018-09-01T02:56:35.000Z</published>
    <updated>2018-09-25T12:58:18.191Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>昨天的一场模拟，第二题本来应该是一道很水的题，然而最后打崩了，归根结底还是自己不够仔细，题目审错，最后导致方法用错。</p></div><a id="more"></a><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>[问题描述]</strong></p><pre><code>神即将带领一些人去他们的孤寂之境，由于这个世界的不稳定，地点之间的有向道路会不定期地毁坏，出于工作准备，神想知道在某些道路毁坏之后某两点之间的最短路。就是给定一个有向图，现有两个操作，操作1 是删除一条边（一条边可重复删除），操作2是询问两个点之间的最短路。</code></pre><p><strong>[输入格式]</strong></p><pre><code>输入文件名为journey.in。第1 行两个正整数n, m，分别表示图的点数和操作数。第2 行至第n + 1 行每行n 个正整数，为图的邻接矩阵，第i 行第j 列的数表示点i 和点j 间距离，保证对角线为0。接下来m 行每行三个正整数c, x, y； c 表示操作种类，为1 或2，当c = 1 时表示删除x与y 相连的边，当 c = 2 时表示询问 x 到 y 的最短路，若不可达则输出 -1。</code></pre><p><strong>[输出格式]</strong></p><pre><code>输出文件名为journey.out输出若干行，每个 2 操作对应一行，答案为询问中 x 到 y 的最短路或 -1</code></pre><p><strong>[样例]</strong></p><pre><code>见下发/girls/girls.in(out)。</code></pre><p><strong>[数据规模与约定]</strong></p><pre><code>对于30% 的数据：n, m &lt;= 10对于50% 的数据：n, m &lt;= 50对于100% 的数据：n &lt;= 200; m &lt;= 100000, 操作1 不超过200 次，边权不超过10000</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一碰到查找的题，那肯定就是两条路了，离线和在线两种思路，乍一看这 $n$ 的数据范围，并且题目中还说输入邻接矩阵，那求最短路肯定是 Floyd 了，再一想，如果是在线查询那只有朴素算法了，查一次求一次全源最短路，然后这种方法就 <code>TLE</code> 了，代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 210</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    sign |= (ch == <span class="string">'-'</span>);</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  x = sign ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>); x = -x; &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; write(x); <span class="built_in">puts</span>(<span class="string">""</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span> </span>&#123; read(a); read(b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b, <span class="keyword">int</span> &amp;c)</span> </span>&#123; read(a); read(b); read(c); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g[maxn][maxn], d[maxn][maxn], n, m, c, x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        g[i][j] = min(g[i][j], g[i][k] + g[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  freopen(<span class="string">"journey.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">"journey.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">memset</span>(d, INF, <span class="keyword">sizeof</span>(d));</span><br><span class="line">  read(n, m);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">      read(g[i][j]);</span><br><span class="line">  <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">    read(c, x, y);</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>: &#123; g[x][y] = INF; <span class="keyword">break</span>; &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(d, g, <span class="keyword">sizeof</span>(g));</span><br><span class="line">        Floyd();</span><br><span class="line">        <span class="keyword">if</span> (g[x][y] == INF) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">else</span> writeln(g[x][y]);</span><br><span class="line">        <span class="built_in">memcpy</span>(g, d, <span class="keyword">sizeof</span>(d));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以正解肯定就是离线操作了，先把该删的边都给删掉，然后从最后一个操作开始处理，遇到操作一就加边，求一次最短路，当然这里不是用 Floyd 而是用一个 $\mathcal{O}(n^2)$ 的方法，附上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 210</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 100010</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">op</span> &#123;</span> <span class="keyword">int</span> c, x, y; &#125;;</span><br><span class="line"><span class="comment">// op 结构体，记录操作</span></span><br><span class="line">op ops[maxm];</span><br><span class="line"><span class="keyword">int</span> g[maxn][maxn], d[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> w[maxm], ans[maxm];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    sign |= (ch == <span class="string">'-'</span>);</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  x = sign ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>); x = -x; &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; write(x); <span class="built_in">puts</span>(<span class="string">""</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span> </span>&#123; read(a); read(b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b, <span class="keyword">int</span> &amp;c)</span> </span>&#123; read(a); read(b); read(c); &#125;</span><br><span class="line"><span class="comment">// 快读快写黑科技</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">        d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Floyd 对 d[][] 操作求最短路</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  freopen(<span class="string">"journey.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">"journey.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  read(n, m);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">      read(g[i][j]);</span><br><span class="line">  <span class="built_in">memcpy</span>(d, g, <span class="keyword">sizeof</span>(g));</span><br><span class="line">  <span class="comment">// 输入，g[][] 用来备份原邻接矩阵</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    read(ops[i].c, ops[i].x, ops[i].y);</span><br><span class="line">    <span class="keyword">if</span> (ops[i].c == <span class="number">1</span>) &#123;</span><br><span class="line">      w[i] = g[ops[i].x][ops[i].y];</span><br><span class="line">      d[ops[i].x][ops[i].y] = INF;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Floyd();</span><br><span class="line">  <span class="comment">// 读入所有操作后 Floyd</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = m; k &gt; <span class="number">0</span>; --k) &#123;</span><br><span class="line">  <span class="comment">// 注意循环顺序，从最后一个开始</span></span><br><span class="line">    <span class="keyword">int</span> x = ops[k].x;</span><br><span class="line">    <span class="keyword">int</span> y = ops[k].y;</span><br><span class="line">    <span class="keyword">if</span> (ops[k].c == <span class="number">2</span>) ans[++cnt] = (d[x][y] == INF ? <span class="number">-1</span> : d[x][y]);</span><br><span class="line">    <span class="comment">// 题目中要求如果不连通输出 -1，所以这里特判一下</span></span><br><span class="line">    <span class="comment">// 标程中似乎没有这一句，自己搞了一个数据把标程给卡掉了，所以还是要加的</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 求一次最短路，只要把 d[x][y] 加进去再比较一下就可以了</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">          <span class="keyword">int</span> tmp = d[i][x] + d[y][j] + w[k];</span><br><span class="line">          <span class="keyword">if</span> (tmp &lt; d[i][j]) d[i][j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后输出要注意顺序</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = cnt; i &gt; <span class="number">0</span>; --i) writeln(ans[i]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以后看到这种题必须要读清楚题意，然后决定是否离线操作，考试的时候我根本就是智障了，直接在数组 $d$ 上面删边，求最短路，然后 GG。幸好最后醒悟过来打了个暴力。邻阶矩阵就是这点太坑。。。容易让人误操作。。。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;昨天的一场模拟，第二题本来应该是一道很水的题，然而最后打崩了，归根结底还是自己不够仔细，题目审错，最后导致方法用错。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 模拟" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>[HEXO] NexT 主题提高博客颜值</title>
    <link href="http://walesexcitedmei.github.io/2018/08/30/HEXO-NexT-%E4%B8%BB%E9%A2%98%E6%8F%90%E9%AB%98%E5%8D%9A%E5%AE%A2%E9%A2%9C%E5%80%BC/"/>
    <id>http://walesexcitedmei.github.io/2018/08/30/HEXO-NexT-主题提高博客颜值/</id>
    <published>2018-08-30T12:37:23.000Z</published>
    <updated>2018-09-25T12:58:18.144Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p>今天是把博客好好地美化了一把，今天就来讲一下 hexo 博客美化过程中的心得，因为自己使用的是 NexT 主题，所以这里的有些过程仅供别的主题的用户做参考。</p></div><a id="more"></a><h3 id="文章的模板文件"><a href="#文章的模板文件" class="headerlink" title="文章的模板文件"></a>文章的模板文件</h3><p>为了每次更新方便，我直接改了 <code>blog/scaffolds/</code> 下的 <code>post.md</code>，每次生成的时候模板就都有了，不需要自己再去弄。这个是我的模板：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">mathjax: true</span><br><span class="line">copyright: true</span><br><span class="line">comment: true</span><br><span class="line">photo: </span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&#123;% note default %&#125;</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span></span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>说明一下，这个 <code>note</code> 要在 <code>next\_config.yml</code> 中开启才可以写。下面会讲到。<code>photo</code> 是文章开头的图片，就像这篇文章开头那样，注意一定要加绝对路径，比如我这张图片存在文章的文件夹下，那么路径就是 <code>/2018/08/30/HEXO-NexT-主题提高博客颜值/photo1.jpg</code>。<code>copyright</code> 这一项也是要开启之后才行，我的博客的 copyright 是自己重新写的，后面会讲到。最后这个 <code>---</code> 是结束符，和最后的结束语一起用。</p><h3 id="Markdown-技巧与内置样式"><a href="#Markdown-技巧与内置样式" class="headerlink" title="Markdown 技巧与内置样式"></a>Markdown 技巧与内置样式</h3><p><a href="https://segmentfault.com/markdown" target="_blank" rel="noopener">基础的语法</a>就不提了，点进来的应该都会了。这里就讲讲一些技巧。</p><h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4><p>我用的 Markdown 编辑器是 <a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>，有些行内公式的显示可以在设置里打开。这是我用过的最好的 Markdown编辑器</p><h4 id="分隔线和空行"><a href="#分隔线和空行" class="headerlink" title="分隔线和空行"></a>分隔线和空行</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是文字</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line">上面是分隔线</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">上面是空行</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>这是文字</p><p><hr><br>上面是分隔线<br><br><br>上面是空行</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span>引用内容<span class="xml"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 如果前后间隙很小，可以像下面这样写 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span>引用内容<span class="xml"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><blockquote>引用内容</blockquote></p><p><blockquote>引用内容</blockquote></p><h4 id="居中和右对齐"><a href="#居中和右对齐" class="headerlink" title="居中和右对齐"></a>居中和右对齐</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 居中 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span>内容<span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 右对齐 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:right"</span>&gt;</span></span>内容<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><center>内容</center></p><div style="text-align:right">内容</div><h4 id="字体大小和颜色"><a href="#字体大小和颜色" class="headerlink" title="字体大小和颜色"></a>字体大小和颜色</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#187892"</span> <span class="attr">size</span>=<span class="string">"number"</span>&gt;</span></span>内容<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 详细请查看 http://www.w3school.com.cn/tags/tag_font.asp --&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果如下：</p><font color="#187892" size="number">内容</font><h4 id="Todo-list"><a href="#Todo-list" class="headerlink" title="Todo list"></a>Todo list</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 已完成<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 未完成<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><br><li><i class="fa fa-check-square"></i> 已完成</li><br><li><i class="fa fa-square"></i> 未完成</li><br></ul><h4 id="Note-嵌套-Todo-list"><a href="#Note-嵌套-Todo-list" class="headerlink" title="Note 嵌套 Todo list"></a>Note 嵌套 Todo list</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 一共有两种写法，效果看下面 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note primary"</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 已完成</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 已完成</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 已完成</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 已完成</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-check-square"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 已完成</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 未完成</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 未完成</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-square"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 未完成</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note primary"</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-check-square"&gt;&lt;/i&gt; 已完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成</span></span><br><span class="line"><span class="code">    &lt;i class="fa fa-square"&gt;&lt;/i&gt; 未完成</span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果如下：</p><div class="note primary"><br>  <i class="fa fa-check-square"></i> 已完成<br>  <i class="fa fa-check-square"></i> 已完成<br>  <i class="fa fa-check-square"></i> 已完成<br>  <i class="fa fa-check-square"></i> 已完成<br>  <i class="fa fa-check-square"></i> 已完成<br>  <i class="fa fa-square"></i> 未完成<br>  <i class="fa fa-square"></i> 未完成<br>  <i class="fa fa-square"></i> 未完成<br></div><br><div class="note primary"><br>  <p><br>    <i class="fa fa-check-square"></i> 已完成<br>    <i class="fa fa-check-square"></i> 已完成<br>    <i class="fa fa-check-square"></i> 已完成<br>    <i class="fa fa-check-square"></i> 已完成<br>    <i class="fa fa-check-square"></i> 已完成<br>    <i class="fa fa-square"></i> 未完成<br>    <i class="fa fa-square"></i> 未完成<br>    <i class="fa fa-square"></i> 未完成<br>  </p><br></div><p>这两个写法熟悉 HTML 的同学应该是明白的，这里<del>因为我太菜了</del>就不讲了。主要说一下 <code>&lt;i class=&quot;fa fa-square&quot;&gt;&lt;/i&gt;</code> 是从 <a href="https://fontawesome.com/" target="_blank" rel="noopener">Font Awesome</a> 上获取图标的方法，不过有些图标似乎是不能加载的，我也不知道为什么。</p><h4 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a>Font Awesome</h4><p>Font Awesome 更多的使用可以看<a href="https://fontawesome.com/how-to-use/on-the-web/setup/getting-started?using=web-fonts-with-css" target="_blank" rel="noopener">官网示例</a>，这里讲一个放大图标的方法</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-download"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 普通</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-download fa-lg"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 变大 33%</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-download fa-2x"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 两倍大</span><br></pre></td></tr></table></figure><p>效果如下：<br><i class="fa fa-download"></i> 普通<br><i class="fa fa-download fa-lg"></i> 变大 33%<br><i class="fa fa-download fa-2x"></i> 两倍大</p><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><p>主题自带样式 代码块高亮<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```[language] [title] [url] [link-text]</span><br><span class="line">`代码`</span><br></pre></td></tr></table></figure></p><p><code>[language]</code> 是代码语言的名称，用来设置代码块颜色高亮，非必须；<br><code>[title]</code> 是顶部左边的说明，非必须；<br><code>[url]</code> 是顶部右边的超链接地址，非必须；<br><code>[link text]</code> 如它的字面意思，超链接的名称，非必须。<br>亲测这 4 项应该是根据空格来分隔，而不是[]，故请不要加[]。除非如果你想写后面两个，但不想写前面两个，那么就必须加 <code>[]</code> 了，要这样写：<code>[] [] [url] [link text]</code>。</p><p>首先关于代码块颜色高亮，高亮的模式可以在主题配置文件中设置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code Highlight theme</span></span><br><span class="line"><span class="comment"># Available value:</span></span><br><span class="line"><span class="comment">#    normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">eighties</span></span><br></pre></td></tr></table></figure></p><p>要颜色正确高亮，代码语言的名称肯定要写对，各种支持语言的名称可以查看<a href="https://almostover.ru/2016-07/hexo-highlight-code-styles/" target="_blank" rel="noopener">这篇文章</a>。当然，如果你和我一样懒，可以在站点配置文件 <code>_config.yml</code> 中设置自动高亮（不过这个自动高亮似乎有问题，不建议打开）：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line"># 代码自动高亮</span><br><span class="line"><span class="deletion">-  auto_detect: false</span></span><br><span class="line"><span class="addition">+  auto_detect: true</span></span><br></pre></td></tr></table></figure></p><p>从网上找到的一个文本效果如下（别跟我说你不知道 <code>diff</code> 是什么）：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">Index: languages/ini.js</span></span><br><span class="line"><span class="comment">===================================================================</span></span><br><span class="line"><span class="comment">--- languages/ini.js    (revision 199)</span></span><br><span class="line"><span class="comment">+++ languages/ini.js    (revision 200)</span></span><br><span class="line"><span class="meta">@@ -1,8 +1,7 @@</span></span><br><span class="line"> hljs.LANGUAGES.ini =</span><br><span class="line"> &#123;</span><br><span class="line"><span class="deletion">-   case_insensitive: true,</span></span><br><span class="line"><span class="deletion">-  defaultMode:</span></span><br><span class="line">   &#123;</span><br><span class="line"><span class="addition">+  defaultMode: &#123;</span></span><br><span class="line"><span class="deletion">-     contains: ['comment', 'title', 'setting'],</span></span><br><span class="line"><span class="addition">+     illegal: '[^\\s]'</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line"><span class="comment">*** /path/to/original timestamp</span></span><br><span class="line"><span class="comment">--- /path/to/new      timestamp</span></span><br><span class="line"><span class="comment">***************</span></span><br><span class="line"><span class="meta">*** 1,3 ****</span></span><br><span class="line"><span class="meta">--- 1,9 ----</span></span><br><span class="line"><span class="addition">+ This is an important</span></span><br><span class="line"><span class="addition">+ notice! It should</span></span><br><span class="line"><span class="addition">+ therefore be located at</span></span><br><span class="line"><span class="addition">+ the beginning of this</span></span><br><span class="line"><span class="addition">+ document!</span></span><br><span class="line"><span class="addition">! compress the size of the</span></span><br><span class="line"><span class="addition">! changes.</span></span><br><span class="line">  It is important to spell</span><br></pre></td></tr></table></figure></p><p>代码仅仅高亮肯定是不够地，代码块地功能也很重要，比如复制这个功能。只要在 <code>_config.yml</code> 里打开就行啦：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Manual define the border radius in codeblock</span></span><br><span class="line">  <span class="comment"># Leave it empty for the default 1</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line"><span class="attr">  copy_button:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result</span></span><br><span class="line"><span class="attr">    show_result:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h4 id="Note-标签"><a href="#Note-标签" class="headerlink" title="Note 标签"></a>Note 标签</h4><p>在主题配置文件_config.yml里有一个关于这个的配置:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Note tag (bs-callout).</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># 风格</span></span><br><span class="line"><span class="attr">  style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="comment"># 要不要图标</span></span><br><span class="line"><span class="attr">  icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 圆角矩形</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>用 HTML 写就是这个样子<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note default"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>default<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note primary"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note success"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>success<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note info"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>info<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note warning"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>warning<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note danger"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>danger<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note danger no-icon"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>danger no-icon<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>用 swig 语法写就是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">[class] : default | primary | success | info | warning | danger.</span><br><span class="line">          May be not defined.</span><br></pre></td></tr></table></figure><p>里面的三种风格长啥样？开启图标长啥样？可以查看<a href="https://github.com/iissnan/hexo-theme-next/pull/1697" target="_blank" rel="noopener">这个页面</a>，更多的介绍也在这个页面，请自行查看</p><p>最后的几种效果：</p><div class="note default"><p>default</p></div><br><div class="note primary"><p>primary</p></div><br><div class="note success"><p>success</p></div><br><div class="note info"><p>info</p></div><br><div class="note warning"><p>warning</p></div><br><div class="note danger"><p>danger</p></div><br><div class="note danger no-icon"><p>danger no-icon</p></div><h4 id="Label-标签"><a href="#Label-标签" class="headerlink" title="Label 标签"></a>Label 标签</h4><p><code>label</code> 标签不建议加在段首, 首先可以在主题配置文件中有配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Label tag.</span><br><span class="line">label: true</span><br></pre></td></tr></table></figure></p><p>然后效果如下（<code>@</code>前面的是label的名字，后面的是要显示的文字）</p><span class="label default">default</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label default@default %&#125;</span><br></pre></td></tr></table></figure><span class="label primary">primary</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label primary@primary %&#125;</span><br></pre></td></tr></table></figure><span class="label success">success</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label success@success %&#125;</span><br></pre></td></tr></table></figure><span class="label info">info</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label info@info %&#125;</span><br></pre></td></tr></table></figure><span class="label warning">warning</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label warning@warning %&#125;</span><br></pre></td></tr></table></figure><span class="label danger">danger</span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label danger@danger %&#125;</span><br></pre></td></tr></table></figure><h4 id="Tab-选项卡"><a href="#Tab-选项卡" class="headerlink" title="Tab 选项卡"></a>Tab 选项卡</h4><p>当然也是要先配置一下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tabs tag.</span></span><br><span class="line"><span class="attr">tabs:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  transition:</span></span><br><span class="line"><span class="attr">    tabs:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    labels:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs 选项卡, 2 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 1** 呵呵哈哈哈哈哈哈</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 2** 额。。。</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**这是选项卡 3** 哇，你找到我了！</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><div class="tabs" id="选项卡"><ul class="nav-tabs"><li class="tab"><a href="#选项卡-1">选项卡 1</a></li><li class="tab active"><a href="#选项卡-2">选项卡 2</a></li><li class="tab"><a href="#选项卡-3">选项卡 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="选项卡-1"><p><strong>这是选项卡 1</strong> 呵呵哈哈哈哈哈哈</p></div><div class="tab-pane active" id="选项卡-2"><p><strong>这是选项卡 2</strong> 额。。。</p></div><div class="tab-pane" id="选项卡-3"><p><strong>这是选项卡 3</strong> 哇，你找到我了！</p></div></div></div></p><p>上面源码中，2 表示一开始在第二个选项卡，非必须，若数值为 -1 则隐藏选项卡内容。</p><h4 id="按钮样式"><a href="#按钮样式" class="headerlink" title="按钮样式"></a>按钮样式</h4><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test, 更多关于按钮的使用点这里, download fa-lg fa-fw %&#125;</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><a class="btn" href="https://almostover.ru/2016-01/hexo-theme-next-test/#Button-tag-test" target="_blank" rel="noopener"><i class="fa fa-download fa-lg fa-fw"></i>更多关于按钮的使用点这里</a><h3 id="更多的主题配置"><a href="#更多的主题配置" class="headerlink" title="更多的主题配置"></a>更多的主题配置</h3><h4 id="返回顶部按钮与阅读进度"><a href="#返回顶部按钮与阅读进度" class="headerlink" title="返回顶部按钮与阅读进度"></a>返回顶部按钮与阅读进度</h4><p>在 <code>next/_config.yml</code> 里找到 <code>b2t</code> 这个地方进行如下配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Back to top in sidebar (only for Pisces | Gemini).</span></span><br><span class="line"><span class="attr">b2t:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h4 id="添加-RSS-订阅"><a href="#添加-RSS-订阅" class="headerlink" title="添加 RSS 订阅"></a>添加 RSS 订阅</h4><p>首先安装一个模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p><p>然后在<strong>根目录</strong>下的 <code>_config.yml</code> 里添加：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br></pre></td></tr></table></figure></p><p>最后在 <code>next\_config.yml</code> 里配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site's feed link, and install hexo-generator-feed: `npm install hexo-generator-feed --save`.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure></p><p>重新生成就可以使用 RSS 了。</p><h3 id="评论系统重配置"><a href="#评论系统重配置" class="headerlink" title="评论系统重配置"></a>评论系统重配置</h3><p>以前用的是 Disqus，然而需要翻墙，所以决定换成 Valine。这个 Valine 要先在 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 里注册并创建一个应用，这里就不再赘述.然后在 <code>next\_config.yml</code> 里配置。注意：得在 <code>LeanCloud -&gt; 应用 -&gt; 设置 -&gt; 应用 Key</code> 中把 AppID 和 AppKey 给复制到 <code>next\_config.yml</code> 里面去，并且在 <code>LeanCloud -&gt; 应用 -&gt; 设置 -&gt; 安全中心</code> 里将自己的域名添加到 <code>Web 安全域名</code> 中。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.</span></span><br><span class="line"><span class="attr">  appid:</span> <span class="comment"># your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span> <span class="comment"># your leancloud application appkey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">true</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">true</span> <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">😎看了这么多，不想说点什么嘛😉</span> <span class="comment"># comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br><span class="line"><span class="attr">  visitor:</span> <span class="literal">false</span> <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure><p>这个 LeanCloud 也是比较良心的啊，可以免费使用，当然我用的是开发版，所以大家不要太着急🤣。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;今天是把博客好好地美化了一把，今天就来讲一下 hexo 博客美化过程中的心得，因为自己使用的是 NexT 主题，所以这里的有些过程仅供别的主题的用户做参考。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://walesexcitedmei.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://walesexcitedmei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[杂谈] 编程规范那些事</title>
    <link href="http://walesexcitedmei.github.io/2018/08/29/%E6%9D%82%E8%B0%88-%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://walesexcitedmei.github.io/2018/08/29/杂谈-编程规范那些事/</id>
    <published>2018-08-29T14:28:29.000Z</published>
    <updated>2018-09-25T12:58:18.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>一直很想写一篇博客来普及一下“编程规范”这个看似不重要其实很重要的东西，首先，它是团队合作的基础，有些 OI 竞赛也是有团队合作的。其次，下到 OI 中几十行的程序，上到大项目中几千行甚至几万行乃至上亿（额，这个似乎很少见），如果写得太难看那就会让人实在是无法忍受（比如在写 DP 的时候硬是将一个状态转移方程压成了一行，行数比列数还多一倍）。可见编程规范是多么的重要!</p><a id="more"></a><h3 id="Google-C-编程规范"><a href="#Google-C-编程规范" class="headerlink" title="Google C++ 编程规范"></a>Google C++ 编程规范</h3><p>Google 的项目一直都让人看起来赏心悦目，即使有些混乱的宏定义也让人看起来赏心悦目，首先贴一张图，转自 <a href="https://blog.csdn.net/voidccc/article/details/37599203" target="_blank" rel="noopener">CSDN 上的一篇博客</a></p><div style="slign: center"> <img src="pic1.jpg"> </div><p>然后贴上谷歌编程指南的<a href="https://zh-google-styleguide.readthedocs.io/en/latest/" target="_blank" rel="noopener">详细说明</a></p><h3 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h3><p>Google 的编程指南真的是高妙，看起来赏心悦目，但个人觉得还是要去其糟粕的，比如“不用全局变量”这种，在竞赛中就可以直接忽视了，还是以代码的易用性为第一要务。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;一直很想写一篇博客来普及一下“编程规范”这个看似不重要其实很重要的东西，首先，它是团队合作的基础，有些 OI 竞赛也是有团队合作的。其次，下到 OI 中几十行的程序，上到大项目中几千行甚至几万行乃至上亿（额，这个似乎很少见），如果写得太难看那就会让人实在是无法忍受（比如在写 DP 的时候硬是将一个状态转移方程压成了一行，行数比列数还多一倍）。可见编程规范是多么的重要!&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://walesexcitedmei.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://walesexcitedmei.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="编程规范" scheme="http://walesexcitedmei.github.io/tags/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>[HEXO] hexo 中插入视频的方法</title>
    <link href="http://walesexcitedmei.github.io/2018/08/29/HEXO-hexo-%E4%B8%AD%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://walesexcitedmei.github.io/2018/08/29/HEXO-hexo-中插入视频的方法/</id>
    <published>2018-08-29T12:31:30.000Z</published>
    <updated>2018-09-25T12:58:18.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>以前一直以为 hexo 是不能插入视频的，今天突然知道了，原来插入视频是可以的！！本篇博客主要讲解一下 hexo 博客如何插入视频。</p><a id="more"></a><h3 id="插入-Youtube-视频"><a href="#插入-Youtube-视频" class="headerlink" title="插入 Youtube 视频"></a>插入 Youtube 视频</h3><p>插入 Youtube 视频其实很简单，在 YouTube 视频的下方的“共享”中，选择嵌入即可获取类似这样的链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"560"</span> <span class="attr">height</span>=<span class="string">"315"</span> <span class="attr">src</span>=<span class="string">"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">allow</span>=<span class="string">"autoplay; encrypted-media"</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下（要梯子）：</p><iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><p>可以将 <code>width</code> 或 <code>height</code> 改为 <code>&quot;100%&quot;</code>（当然也可以两个都改，具体效果试了才知道，这个数值是可以随便改的）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"350"</span> <span class="attr">src</span>=<span class="string">"https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">allow</span>=<span class="string">"autoplay; encrypted-media"</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下（要梯子）：</p><iframe width="100%" height="350" src="https://www.youtube-nocookie.com/embed/7gJ8mGFjeqA" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><h3 id="插入-Bilibili-视频"><a href="#插入-Bilibili-视频" class="headerlink" title="插入 Bilibili 视频"></a>插入 Bilibili 视频</h3><p>其实也是一样，点击“分享”，获取 <code>iframe</code> 这个代码就可以了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=19448254&amp;cid=31715906&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><iframe src="//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>自定义了大小之后的效果：</p><iframe width="100%" height="350" src="//player.bilibili.com/player.html?aid=19448254&cid=31715906&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h3><p>直接把视频文件放在资源文件夹里，然后直接写 HTML 代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">The `<span class="tag">&lt;<span class="name">video</span>&gt;</span>` tag is not supported by your browser.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><video width="100%" height="400" src="movie.mp4" controls="controls"><br>The <code>&lt;video&gt;</code> tag is not supported by your browser.<br></video><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>嗯…… HTML 大法好，在 Markdown 里用 HTML 控件简直美滋滋。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;以前一直以为 hexo 是不能插入视频的，今天突然知道了，原来插入视频是可以的！！本篇博客主要讲解一下 hexo 博客如何插入视频。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://walesexcitedmei.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://walesexcitedmei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>[图论] Dijkstra 最短路计数</title>
    <link href="http://walesexcitedmei.github.io/2018/08/29/%E5%9B%BE%E8%AE%BA-Dijkstra-%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0/"/>
    <id>http://walesexcitedmei.github.io/2018/08/29/图论-Dijkstra-最短路计数/</id>
    <published>2018-08-29T09:58:02.000Z</published>
    <updated>2018-09-25T12:58:18.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>最短路计数是一个很经典的问题，今天刚好做到了这样一道题，就来总结一下。</p><a id="more"></a><h3 id="最短路计数"><a href="#最短路计数" class="headerlink" title="最短路计数"></a>最短路计数</h3><p><a href="https://www.luogu.org/problemnew/show/P1144" target="_blank" rel="noopener">题目：洛谷 P1144 最短路计数</a><br>最短路计数本质上还是求最短路，只不过在迭代的同时来更新最短路数量。首先来回忆一下 Dijkstra 求最短路的更新条件，对于一条有向边 $(u,v,w)$，我们更新到 $v$ 的最短路的条件是：<br>$$<br>dist[v] &gt; dist[u] + w<br>$$<br>在最短路计数的时候我们可以用动态规划的思想，记 $num[x]$ 表示到 $x$ 的最短路的数量，那么：</p><ol><li>若 $dist[v] = dist[u] + w$ 我们更新 $num[v] = num[v] + num[u]$，即有另外一条路径。</li><li>若 $dist[v] &gt; dist[u] + w$ 我们更新 $num[v] = num[u]$，即有更短的路径，前面的全部作废。</li></ol><p>所以这道题的代码就呼之欲出了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 2000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> modn 100003</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7f7f7f7f</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heapNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, d;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> heapNode &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> d &gt; b.d; &#125;</span><br><span class="line"><span class="comment">// 这里似乎是一定要加 const，否则会 CE</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edgeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> vertexTo;</span><br><span class="line"><span class="keyword">int</span> edgeNext;</span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line">&#125; edges[maxm &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> numEdges = <span class="number">0</span>, heads[maxn];</span><br><span class="line">priority_queue&lt;heapNode&gt; Q;</span><br><span class="line"><span class="keyword">int</span> dist[maxn], num[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">numEdges = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(heads, <span class="number">-1</span>, <span class="keyword">sizeof</span>(heads));</span><br><span class="line"><span class="built_in">memset</span>(dist, INF, <span class="keyword">sizeof</span>(dist));</span><br><span class="line"><span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">numEdges++;</span><br><span class="line">edges[numEdges].vertexTo = vertex2;</span><br><span class="line">edges[numEdges].weight = weight;</span><br><span class="line">edges[numEdges].edgeNext = heads[vertex1];</span><br><span class="line">heads[vertex1] = numEdges;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDuplexEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">addEdge(vertex1, vertex2, weight);</span><br><span class="line">addEdge(vertex2, vertex1, weight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">dist[x] = <span class="number">0</span>;</span><br><span class="line">num[x] = <span class="number">1</span>;</span><br><span class="line">Q.push((heapNode)&#123; x, <span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">heapNode f = Q.top();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">int</span> u = f.u;</span><br><span class="line"><span class="keyword">int</span> d = f.d;</span><br><span class="line"><span class="keyword">if</span> (d != dist[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = heads[u]; i != <span class="number">-1</span>; i = edges[i].edgeNext) &#123;</span><br><span class="line"><span class="keyword">int</span> j = edges[i].vertexTo;</span><br><span class="line"><span class="keyword">int</span> w = edges[i].weight;</span><br><span class="line"><span class="keyword">if</span> (dist[j] == dist[u] + w) &#123;</span><br><span class="line">num[j] += num[u]; <span class="comment">// 更新情况一</span></span><br><span class="line">num[j] %= modn; <span class="comment">// 题目要求取模</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dist[j] &gt; dist[u] + w) &#123;</span><br><span class="line">num[j] = num[u]; <span class="comment">// 更新情况二</span></span><br><span class="line">dist[j] = dist[u] + w;</span><br><span class="line">Q.push((heapNode)&#123; j, dist[j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (x == y) <span class="keyword">continue</span>;</span><br><span class="line">addDuplexEdge(x, y, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123; <span class="built_in">cout</span> &lt;&lt; num[i] &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由这个最短路计数我们可以看出动态规划实在是实用啊！</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;最短路计数是一个很经典的问题，今天刚好做到了这样一道题，就来总结一下。&lt;/p&gt;
    
    </summary>
    
      <category term="图论" scheme="http://walesexcitedmei.github.io/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="图论" scheme="http://walesexcitedmei.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://walesexcitedmei.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="最短路计数" scheme="http://walesexcitedmei.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0/"/>
    
      <category term="Dijkstra" scheme="http://walesexcitedmei.github.io/tags/Dijkstra/"/>
    
  </entry>
  
  <entry>
    <title>[平衡树] Treap 总结</title>
    <link href="http://walesexcitedmei.github.io/2018/08/25/%E5%B9%B3%E8%A1%A1%E6%A0%91-Treap-%E6%80%BB%E7%BB%93/"/>
    <id>http://walesexcitedmei.github.io/2018/08/25/平衡树-Treap-总结/</id>
    <published>2018-08-25T00:21:53.000Z</published>
    <updated>2018-09-25T12:58:18.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>为了继续完善自己的数据结构有关的知识，决定先总结一波 Treap。Treap 是我学的第一个平衡树结构，花了很长时间才<del>把板子背下来</del>把它真正理解了，不禁感叹数据结构真的是神奇啊！</p><a id="more"></a><h3 id="BST-二叉查找树的性质"><a href="#BST-二叉查找树的性质" class="headerlink" title="BST 二叉查找树的性质"></a>BST 二叉查找树的性质</h3><p>因为想重点总结的是 Treap 而不是<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9" target="_blank" rel="noopener">普通 BST</a>，所以这里只稍微提一下它的性质：</p><ol><li>若任意节点的左子树不空，则左子树上<strong>所有节点</strong>的值均<strong>小于</strong>它的根节点的值；</li><li>若任意节点的右子树不空，则右子树上<strong>所有节点</strong>的值均<strong>大于</strong>它的根节点的值；</li><li>任意节点的左、右子树也分别为二叉查找树；</li><li><strong>没有键值相等的节点。</strong></li></ol><p>BST 是 Treap 学习的基础，更多内容可以看<a href="https://lufficc.com/blog/binary-search-tree" target="_blank" rel="noopener">这篇博客</a>。<br>上面这些性质，可以使得在 BST 上查找前驱 / 后继更为方便。这些性质是构建 BST 的基础，但是也使得 BST 不能很好地保持树的平衡，即左右子树的大小相差太大，最极端的情况就是一条链，为了保持 BST 的平衡，诞生了各种平衡树。</p><h3 id="Treap"><a href="#Treap" class="headerlink" title="Treap"></a>Treap</h3><h4 id="Zig-和-Zag"><a href="#Zig-和-Zag" class="headerlink" title="Zig 和 Zag"></a>Zig 和 Zag</h4><p>保持 Treap 平衡的方式就是改变 Treap 的形态，同时又必须保证 Treap 仍然具备 BST 的性质，于是 Zig 和 Zag 操作就诞生了</p><div style="align: center"> <img src="zigzag.png"> </div><p>可见这并不是简单的旋转，它还将某个节点向根节点移动，这个过程只可意会不可言传，还是好好理解上图。旋转的代码实现如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zig</span><span class="params">(<span class="keyword">int</span> &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> q = treap[p].lChild;</span><br><span class="line">treap[p].lChild = treap[q].rChild;</span><br><span class="line">treap[q].rChild = p;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zag</span><span class="params">(<span class="keyword">int</span> &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> q = treap[p].rChild;</span><br><span class="line">treap[p].rChild = treap[q].lChild;</span><br><span class="line">treap[q].lChild = p;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="保证-Treap-的平衡"><a href="#保证-Treap-的平衡" class="headerlink" title="保证 Treap 的平衡"></a>保证 Treap 的平衡</h4><p>什么样的旋转才能保证它的平衡呢？Treap 是 Tree 和 Heap 的复合名词，所以它还满足堆性质。它利用“随机”来创造平衡的条件，每一个节点都有一个随机生成的额外权值，Treap 在满足 BST 性质的同时还通过旋转使得权值满足大根堆的性质。特别的，在删除 Treap 的节点时，可以直接把这个节点旋转到叶节点来直接删除，这样就免去了很多复杂的操作。</p><h4 id="从一道例题看代码实现"><a href="#从一道例题看代码实现" class="headerlink" title="从一道例题看代码实现"></a>从一道例题看代码实现</h4><p>题目在这：<a href="https://www.luogu.org/problemnew/show/P3369" target="_blank" rel="noopener">洛谷 P3369 【模板】普通平衡树</a></p><p>因为题目中同一个节点可能有多个，所以可以为每个节点增加一个“副本数”，同时在获取 Rank 的时候别忘了减一，因为初始化的时候有一个正无穷，一个负无穷，它们只是为了保证 BST 性质，并不是实际的节点。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treapNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> lChild, rChild; <span class="comment">// 左右子节点下标</span></span><br><span class="line"><span class="keyword">int</span> value, weight;  <span class="comment">// 节点关键码及权值</span></span><br><span class="line"><span class="keyword">int</span> count, size;    <span class="comment">// 副本数及子树大小</span></span><br><span class="line">&#125; treap[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> numNodes, root, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">numNodes++;</span><br><span class="line">treap[numNodes].value = val;</span><br><span class="line">treap[numNodes].weight = rand(); <span class="comment">// 随机权值</span></span><br><span class="line">treap[numNodes].count = treap[numNodes].size = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> numNodes;</span><br><span class="line">&#125; <span class="comment">// 建立一个新的节点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">treap[p].size = treap[treap[p].lChild].size +</span><br><span class="line">treap[treap[p].rChild].size +</span><br><span class="line">treap[p].count;</span><br><span class="line">&#125; <span class="comment">// 更新某一个点的 size 方便获取排名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">newNode(-INF); <span class="comment">// 保证 BST 性质的两个点</span></span><br><span class="line">newNode(INF);</span><br><span class="line">root = <span class="number">1</span>;</span><br><span class="line">treap[root].rChild = <span class="number">2</span>;</span><br><span class="line">update(root);</span><br><span class="line">&#125; <span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRankByVal</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (val == treap[p].value)</span><br><span class="line"><span class="keyword">return</span> treap[treap[p].lChild].size + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (val &lt; treap[p].value)</span><br><span class="line"><span class="keyword">return</span> getRankByVal(treap[p].lChild, val);</span><br><span class="line"><span class="keyword">return</span> getRankByVal(treap[p].rChild, val) +</span><br><span class="line">treap[treap[p].lChild].size +</span><br><span class="line">treap[p].count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上下两个函数很好理解，不作赘述</span></span><br><span class="line"><span class="comment">// 一切从 BST 性质出发</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValByRank</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> rnk)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="keyword">if</span> (treap[treap[p].lChild].size &gt;= rnk)</span><br><span class="line"><span class="keyword">return</span> getValByRank(treap[p].lChild, rnk);</span><br><span class="line"><span class="keyword">if</span> (treap[treap[p].lChild].size + treap[p].count &gt;= rnk)</span><br><span class="line"><span class="keyword">return</span> treap[p].value;</span><br><span class="line"><span class="keyword">return</span> getValByRank(treap[p].rChild,</span><br><span class="line">rnk - treap[treap[p].lChild].size - treap[p].count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zig</span><span class="params">(<span class="keyword">int</span> &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> q = treap[p].lChild;</span><br><span class="line">treap[p].lChild = treap[q].rChild;</span><br><span class="line">treap[q].rChild = p;</span><br><span class="line">p = q;</span><br><span class="line">update(treap[p].rChild);</span><br><span class="line">update(p); <span class="comment">// 别忘记更新</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zag</span><span class="params">(<span class="keyword">int</span> &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> q = treap[p].rChild;</span><br><span class="line">treap[p].rChild = treap[q].lChild;</span><br><span class="line">treap[q].lChild = p;</span><br><span class="line">p = q;</span><br><span class="line">update(treap[p].lChild);</span><br><span class="line">update(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;p, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">p = newNode(val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (val == treap[p].value) &#123;</span><br><span class="line">treap[p].count++;</span><br><span class="line">update(p);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (val &lt; treap[p].value) &#123;</span><br><span class="line">insert(treap[p].lChild, val);</span><br><span class="line"><span class="keyword">if</span> (treap[p].weight &lt; treap[treap[p].lChild].weight) zig(p);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">insert(treap[p].rChild, val);</span><br><span class="line"><span class="keyword">if</span> (treap[p].weight &lt; treap[treap[p].rChild].weight) zag(p);</span><br><span class="line">&#125; <span class="comment">// zig 和 zag 操作，保证满足大根堆性质</span></span><br><span class="line">update(p);</span><br><span class="line">&#125; <span class="comment">// 插入一个点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPre</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> p = root;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (val == treap[p].value) &#123;</span><br><span class="line"><span class="keyword">if</span> (treap[p].lChild &gt; <span class="number">0</span>) &#123;</span><br><span class="line">p = treap[p].lChild; <span class="comment">// 左子树上不断向右走，获取最大的前驱</span></span><br><span class="line"><span class="keyword">while</span> (treap[p].rChild &gt; <span class="number">0</span>) p = treap[p].rChild;</span><br><span class="line">ans = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (treap[p].value &lt; val &amp;&amp;</span><br><span class="line">treap[p].value &gt; treap[ans].value) ans = p; <span class="comment">// 尝试更新答案</span></span><br><span class="line">p = val &lt; treap[p].value ? treap[p].lChild : treap[p].rChild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> treap[ans].value;</span><br><span class="line">&#125; <span class="comment">// 获取前驱</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNext</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> p = root;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (val == treap[p].value) &#123;</span><br><span class="line"><span class="keyword">if</span> (treap[p].rChild &gt; <span class="number">0</span>) &#123;</span><br><span class="line">p = treap[p].rChild; <span class="comment">// 右子树上不断向左走，获取最小的后继</span></span><br><span class="line"><span class="keyword">while</span> (treap[p].lChild &gt; <span class="number">0</span>) p = treap[p].lChild;</span><br><span class="line">ans = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (treap[p].value &gt; val &amp;&amp;</span><br><span class="line">treap[p].value &lt; treap[ans].value) ans = p; <span class="comment">// 尝试更新答案</span></span><br><span class="line">p = val &lt; treap[p].value ? treap[p].lChild : treap[p].rChild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> treap[ans].value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> &amp;p, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (val == treap[p].value) &#123;</span><br><span class="line"><span class="keyword">if</span> (treap[p].count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">treap[p].count--;</span><br><span class="line">update(p);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (treap[p].lChild != <span class="number">0</span> || treap[p].rChild != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (treap[p].rChild == <span class="number">0</span> ||</span><br><span class="line">treap[treap[p].lChild].weight &gt; treap[treap[p].rChild].weight) &#123;</span><br><span class="line">zig(p);</span><br><span class="line">remove(treap[p].rChild, val);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">zag(p);</span><br><span class="line">remove(treap[p].lChild, val);</span><br><span class="line">&#125; <span class="comment">// 通过旋转来删除节点</span></span><br><span class="line">update(p);</span><br><span class="line">&#125; <span class="keyword">else</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (val &lt; treap[p].value) remove(treap[p].lChild, val);</span><br><span class="line"><span class="keyword">else</span> remove(treap[p].rChild, val);</span><br><span class="line">update(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">numNodes = <span class="number">0</span>;</span><br><span class="line">build();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> opt, x;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; opt &gt;&gt; x;</span><br><span class="line"><span class="keyword">switch</span> (opt) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: &#123; insert(root, x); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: &#123; remove(root, x); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: &#123; <span class="built_in">cout</span> &lt;&lt; getRankByVal(root, x) - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>; &#125; <span class="comment">// 减一</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: &#123; <span class="built_in">cout</span> &lt;&lt; getValByRank(root, x + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>; &#125; <span class="comment">// 加一</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: &#123; <span class="built_in">cout</span> &lt;&lt; getPre(x) &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: &#123; <span class="built_in">cout</span> &lt;&lt; getNext(x) &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>班里的某个大佬和我说 Treap 没有 ZigZag，这让我很懵逼。但是 Zig 和 Zag 操作的确是很重要的，似乎在学 Splay 的时候也会用到，多学无害。Treap 还是很有用的，<del>关键时候可以救命</del>。 </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;为了继续完善自己的数据结构有关的知识，决定先总结一波 Treap。Treap 是我学的第一个平衡树结构，花了很长时间才&lt;del&gt;把板子背下来&lt;/del&gt;把它真正理解了，不禁感叹数据结构真的是神奇啊！&lt;/p&gt;
    
    </summary>
    
      <category term="平衡树" scheme="http://walesexcitedmei.github.io/categories/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    
      <category term="树形结构" scheme="http://walesexcitedmei.github.io/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
      <category term="Treap" scheme="http://walesexcitedmei.github.io/tags/Treap/"/>
    
      <category term="平衡树" scheme="http://walesexcitedmei.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>[数论] OI 中素数有关的算法整理</title>
    <link href="http://walesexcitedmei.github.io/2018/08/22/%E6%95%B0%E8%AE%BA-OI-%E4%B8%AD%E7%B4%A0%E6%95%B0%E6%9C%89%E5%85%B3%E7%9A%84%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>http://walesexcitedmei.github.io/2018/08/22/数论-OI-中素数有关的算法整理/</id>
    <published>2018-08-22T10:26:19.000Z</published>
    <updated>2018-09-25T12:58:18.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>本来是想总结一道数论神题的，但是怎么证明似乎都不是很完美，而且代码的实现涉及到很多数论有关的算法，于是想现总结一下与素数有关的算法。</p><a id="more"></a><h3 id="素数的判定"><a href="#素数的判定" class="headerlink" title="素数的判定"></a>素数的判定</h3><h4 id="Brute-Force-朴素算法"><a href="#Brute-Force-朴素算法" class="headerlink" title="Brute-Force 朴素算法"></a>Brute-Force 朴素算法</h4><p>额，这个就不多说了吧，最无脑的，$2\thicksim n$ 枚举所有小于 $n$ 的数来进行判定。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++i)</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (isPrime(n) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Optimized-Brute-Force-优化过的朴素算法"><a href="#Optimized-Brute-Force-优化过的朴素算法" class="headerlink" title="Optimized-Brute-Force 优化过的朴素算法"></a>Optimized-Brute-Force 优化过的朴素算法</h4><p>如果一个数不是素数是合数， 那么一定可以由两个大于 $1$ 自然数相乘得到， 其中一个大于或等于它的平方根，一个小于或等于它的平方根。并且成对出现。所以可以优化朴素算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt; n; ++i)</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (isPrime(n) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="筛法求素数"><a href="#筛法求素数" class="headerlink" title="筛法求素数"></a>筛法求素数</h4><p>上面两个菜鸡方法只能针对数很小的情况，这些情况在 OI 中出现的话出卷老师会<del>死得很惨</del>变成广大 OIer 的恩人，然而这种情况是不可能的。于是又有了更高效的方法——筛法。它的思想就是将一个范围内的素数全部筛出来，预处理之后方便查找和判定。最朴素的筛法莫过于 Eratosthenes 筛法了<del>（不要纠结这个名字怎么读，因为我也不会）</del>，它是将所有素数的倍数都给筛掉，剩下的就是素数了。时间复杂度为 $O(N\log\log N)$ 接近线性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000010</span></span><br><span class="line"><span class="keyword">bool</span> prime[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eratosthenes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(prime, <span class="literal">true</span>, <span class="keyword">sizeof</span>(prime));</span><br><span class="line">prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxn; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!prime[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= maxn / i; ++j) &#123;</span><br><span class="line"><span class="comment">// 这里是一个小优化，因为小于 i^2 的数在前面肯定已经筛过了</span></span><br><span class="line"><span class="comment">// 所以 j 从 i 开始取</span></span><br><span class="line">prime[j * i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">Eratosthenes();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (prime[n] ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，Eratosthenes 筛会重复标记素数，造成时间复杂度冗余，如果对于每个数有唯一的方法确定它，那么就可以解决这个问题。由此引出了线性筛这个方法，它通过从大到小累计质因子的方法标记每一个合数，即让 $12$ 只有 $2\times 2\times 3$ 这种产生方式。设数组 $fac$ 记录每个数的最小质因子，我们按照下面的步骤来维护 $fac$：</p><ol><li>依次考虑 $1\thicksim n$ 之见的每一个数 $i$</li><li>若 $fac[i]=i$ 说明 $i$ 是质数，将它保存下来</li><li>扫描不大于 $fac[i]$ 的每个质数 $p$，令 $fac[i\times p]=p$，即在 $i$ 的基础上累积一个质因子 $p$，因为 $p\leqslant fac[i]$，所以 $p$ 为合数 $i\times p$ 的最小质因子。</li></ol><p>这样子，每个合数只会被它的最小质因子 $p$ 筛一次，时间复杂度为线性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000010</span></span><br><span class="line"><span class="keyword">int</span> fac[maxn], prime[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinearSieve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(fac, <span class="number">0</span>, <span class="keyword">sizeof</span>(fac));</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (fac[i] == <span class="number">0</span>) &#123; fac[i] = i; prime[++m] = i; &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="comment">// 跳出循环的条件</span></span><br><span class="line"><span class="keyword">if</span> (prime[j] &gt; fac[i] || prime[j] &gt; n / i) <span class="keyword">break</span>;</span><br><span class="line">fac[i * prime[j]] = prime[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">cout</span> &lt;&lt; prime[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LinearSieve(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线性筛又名<strong>欧拉筛</strong>。</p><h4 id="伪素数测试"><a href="#伪素数测试" class="headerlink" title="伪素数测试"></a>伪素数测试</h4><p>在开始 Miller-Rabin 算法之前我们先来看一下伪素数测试，首先要了解费马小定理： $a^{p-1}\equiv1(\bmod p)$ 当 $p$ 为素数时且 $gcd(a,p)=1$ 时。费马小定理的逆命题虽然不是真命题，但是几乎成立，而不成立的时候，即如果 $n$ 是一个合数且 $a^{n-1}\equiv 1(\bmod n)$，那么称 $n$ 为基为 $a$ 的<strong>伪素数</strong>。<br>如果我们找到一个 $a$ 使得 $n$ 不满足上述等式，那么 $n$ 必定为合数，那如果满足呢？$n$ 不一定是素数，这样的数被称作 Carmicheal 数，但是这种数十分稀少，前 $10000$ 个 $n$ 中只有 $22​$ 个数为 Carmicheal 数，所以这种方法还是比较可靠的。附上算法导论中的伪代码：</p><div style="align: center"> <img src="pic1.png"> </div><p>因为 Carmicheal 数的存在，人们寻求更好的，更准确的素数判定方法，于是就有了 Miller-Rabin 算法</p><h4 id="Miller-Rabin-算法"><a href="#Miller-Rabin-算法" class="headerlink" title="Miller-Rabin 算法"></a>Miller-Rabin 算法</h4><p>通过费马小定理我们可以得出一个推论，若 $p$ 为一个奇素数，那么有：<br>$$<br>a^p\equiv a\pmod p,1\leqslant a\leqslant p<br>$$</p><p>我们记<br>$$<br>p-1=2^kq,2\nmid q<br>$$<br>设 $a$ 是不被 $p$ 整除的数，那么下面两个条件之一必然成立：</p><ul><li>$a^q \equiv 1 \pmod p$</li><li>$a^q, a^{2q}, a^{2^2q}, \dots, a^{2^{k-1}q} \equiv -1 \pmod p$ 之中有一个等式成立</li></ul><p>根据如下命题：<br>$$<br>a^2 \equiv 1 \pmod p \Rightarrow a \equiv \pm 1 \pmod p<br>$$<br>又因为上面第二个条件中的数，每一个都是前一个的平方，且最后一个数的平方是 $1$，所以如果表中一个数它模 $p$ 不余 $1$，但是它的平方模 $p$ 余 $1$，那么那个数一定是 $-1$，所以在这种情况下表中包含 $ -1$，又或者表中全是 $1$，那么第一个条件就会成立。</p><p>所以我们得到了 Miller-Rabin 素性测试的方法，也就是说，如果一个数不满足上面的性质，那么它就是和数，这个 $a$ 就成为证据。而 Miller-Rabin 的证据和上面提到的方法的证据不同，它能够保证每一个奇合数 $p$ 都会有不少于 $\frac{(p−1)}{2}$个证据（具体证明详见算法导论）。</p><p>我们只要随机 $50$ 个数来测试，那么测试失败的概率一定小于 $2^{−50}$，大约是 $8.9⋅10^{−16}$，如果你觉得不够，还可以找更多的数来测试。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>  int64;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> int64 <span class="title">rand64</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">abs</span>((int64)rand() &lt;&lt; <span class="number">32</span> | rand()); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> int64 <span class="title">random</span><span class="params">(int64 x, int64 y)</span> </span>&#123; <span class="keyword">return</span> x + rand64() % (y - x + <span class="number">1</span>); &#125;</span><br><span class="line"><span class="comment">// 随机数生成函数</span></span><br><span class="line"><span class="function">int64 <span class="title">montgomery</span><span class="params">(int64 a, int64 b, int64 c)</span> </span>&#123;</span><br><span class="line">int64 result = <span class="number">1</span>;</span><br><span class="line">int64 temp = a;</span><br><span class="line"><span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) result = (result * temp) % c;</span><br><span class="line">temp = (temp * temp) % c;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">witness</span><span class="params">(int64 a, int64 p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">int64 q = p - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ((q &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123; k++; q &gt;&gt;=<span class="number">1</span>; &#125;</span><br><span class="line">int64 v = montgomery(a, q, p); <span class="comment">// 判断一</span></span><br><span class="line"><span class="keyword">if</span> (v == <span class="number">1</span> || v == p - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line">v = v * v % p;</span><br><span class="line"><span class="keyword">if</span> (v == p - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 判断二</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MillerRabin</span><span class="params">(int64 p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (p % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 这里其实可以加更多的特判来节约时间</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50</span>; ++i)</span><br><span class="line"><span class="keyword">if</span> (witness(random(<span class="number">1</span>, p - <span class="number">1</span>), p)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">if</span> (MillerRabin(i)) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="comment">// 输出 1 ~ n 之间的所有素数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于大的素数，为了节约判定的时间，我们只能退而求其次选择非完美算法来进行验证，不过不得不说，Miller-Rabin 其实已经很完备了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>事实上，对于素数的判定还有很多算法，例如 <a href="https://en.wikipedia.org/wiki/Solovay%E2%80%93Strassen_primality_test" target="_blank" rel="noopener">Solovay-Strassen 算法</a>和 <a href="https://en.wikipedia.org/wiki/AKS_primality_test" target="_blank" rel="noopener">AKS 算法</a>，然而这两个似乎都超出了 OI 的范围，一般不会用得到，这里也就不再赘述。</p><h3 id="质因数分解"><a href="#质因数分解" class="headerlink" title="质因数分解"></a>质因数分解</h3><h4 id="试除法"><a href="#试除法" class="headerlink" title="试除法"></a>试除法</h4><p>结合素数判定的“试除法”和“Eratosthenes 筛法”，我们可以扫描 $2\thicksim\lfloor\sqrt{n}\rfloor$ 中的每个数 $d$，若 $d$ 能整除 $n$，则从 $n$ 中除掉所有的因子 $d$，同时累计个数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p[maxn], c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">p[++m] = i;</span><br><span class="line">c[m] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123; n /= i; c[m]++; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123; p[++m] = n; c[m] = <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">cout</span> &lt;&lt; p[i] &lt;&lt; <span class="string">'^'</span> &lt;&lt; c[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Pollard-Rho-算法"><a href="#Pollard-Rho-算法" class="headerlink" title="Pollard-Rho 算法"></a>Pollard-Rho 算法</h4><p>Pollard-Rho 也是一个不完美算法，不完美之处在时间复杂度上体现。Pollard-Rho算法分解一个数 $n$ 的过程大体上是这样子的：</p><ol><li>找到一个数 $p$，使得 $p|n$，将 $n$ 分解为 $p$ 与 $\frac{n}{p}$</li><li>如果 $p$ 或 $\frac{n}{p}$ 不为质数，将其带入递归上述过程</li><li>如果其是质数，将其记录并退出</li></ol><p>那有人就会问了：这跟暴力分解有什么区别？好像时间复杂度比暴力还高啊！！？？所以，下面的优化才是关键。第一个优化，使用 Miller-Rabin 判定其是否为质数。第二个优化才是最关键的：对于一个大整数n，我们要找到一个 $p$ 满足 $p|n$，这如同大海捞针。但是如果我们要找出 $p_1$、$p_2$，使得 $(|p_1−p_2|)|n$，这看起来似乎要容易一些。实际上我们只需要找出 $\gcd((|p1−p2|),n)&gt;1$的 $p_1$、$p_2$，则其 $\gcd$ 值肯定为n的约数。这看起来又容易了一些。实际上，这让整个算法容易许多。根据<a href="https://zh.wikipedia.org/wiki/%E7%94%9F%E6%97%A5%E5%95%8F%E9%A1%8C" target="_blank" rel="noopener">生日悖论</a>，这种两两比较的方式，在加入比较的数越来越多的时候，其效率会大大提升，比找一个数的效率快很多。于是，找 $p$ 的过程变成了这个样子：</p><ol><li>找到一个数 $p_1$</li><li>通过某种玄学推导手段找出一个与 $p_1$ 对应的 $p_2$</li><li>判断 $\gcd((|p1−p2|),n)$ 是否大于 $1$，不大于则将 $p_2$作为新的 $p_1$，重复过程，否则就找到了</li></ol><p>为什么要用玄学手段？因为只有通过推导手段，才能保证不做重复判断。理论上的推导手段可以有很多，但实际使用中一般使用如下公式推导：<br>$$<br>p_2=(p_1^2+c)\bmod n<br>$$<br>其中 $c$ 为随机常数。<br>这个公式的好处:</p><ol><li>推导出来的 $p_2-p_1$ 差值基本不会相等。</li><li>可以证明，该推导结果会出现循环。也就是说，在出现循环之前，结果不会重复，少做了许多无用的判断。</li></ol><p>出现循环了怎么办？换一个随机常数再搞。这就是该算法“非完美”的地方，<del>时间复杂度要看脸的</del>。那么如何判环呢？这里介绍一个算法：<a href="https://zh.wikipedia.org/wiki/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Floyd 判圈</a>。 需要注意的是，之所以不能一个标记定在原地，是因为循环节不一定在开头就产生，可能走着走着才遇到循环。这条路径就类似于 $\rho$，Pollard-Rho 算法也是因此得名的。顺便附上算法导论中的一张玄学图：</p><div style="align: center"> <img src="pic2.png"> </div><p>注意，在小数分解的时候就别用这个了，老老实实用试除法吧。</p><h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;本来是想总结一道数论神题的，但是怎么证明似乎都不是很完美，而且代码的实现涉及到很多数论有关的算法，于是想现总结一下与素数有关的算法。&lt;/p&gt;
    
    </summary>
    
      <category term="数论" scheme="http://walesexcitedmei.github.io/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="数论" scheme="http://walesexcitedmei.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="素数" scheme="http://walesexcitedmei.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>[数论] OI 中的模运算计算方法</title>
    <link href="http://walesexcitedmei.github.io/2018/08/19/%E6%95%B0%E8%AE%BA-OI-%E4%B8%AD%E7%9A%84%E6%A8%A1%E8%BF%90%E7%AE%97%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/"/>
    <id>http://walesexcitedmei.github.io/2018/08/19/数论-OI-中的模运算计算方法/</id>
    <published>2018-08-19T03:01:03.000Z</published>
    <updated>2018-09-25T12:58:18.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>模运算在 OI 中是非常神奇的存在，有时候题目会非常好（m）心（m）地（p）让我们将答案取模，然而计算模的方法随着题目的变化而变化，网上很多博客又太零散，这里痛下决心总结一下。</p><a id="more"></a><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><ul><li>恒等式：<ul><li>$(a\bmod n)\bmod n=a\bmod n$</li><li>对于所有的正数 $x$ 有：$n^x\bmod n = 0$</li><li>如果 p 是一个质数，且不为 b 的因数，此时由费马小定理有：$ab^{p−1}\bmod p=a\bmod p$</li></ul></li><li>分配律<ul><li>$(a-b)\bmod n=(a\bmod n-b\bmod n)\bmod n$</li><li>$(a+b)\bmod n=(a\bmod n+b\bmod n)\bmod n$</li><li>$ab\bmod n=(a\bmod n)(b\bmod n)\bmod n$</li></ul></li></ul><h3 id="高次幂函数的取模"><a href="#高次幂函数的取模" class="headerlink" title="高次幂函数的取模"></a>高次幂函数的取模</h3><h4 id="暴力取模法"><a href="#暴力取模法" class="headerlink" title="暴力取模法"></a>暴力取模法</h4><p>由于我们的高次幂函数往往拥有很高的幂，而我们在计算机中只有<code>int</code>、<code>float</code>、<code>double</code>、<code>long long</code>这几种变量类型，远远不能满足我们对于大数字运算的要求，从而导致数据溢出无法完成运算。<br>所以这里我们需要在每次迭代取模的过程中进行取模运算，从而保证数据不会溢出。代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b--) result = result * a % c;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算 a^b % c</span></span><br></pre></td></tr></table></figure></p><p>这种算法的正确性毋庸置疑，但是如果幂指数太大的话，需要耗费的时间就更非常多，直接导致运算效率低下，所以只适用于指数不大的情况下使用。</p><h4 id="二分幂"><a href="#二分幂" class="headerlink" title="二分幂"></a>二分幂</h4><p>要求 $a^n$，如果知道了 $a^{\frac{n}{2}}$ 那么再平方就行了。<br>令 $A=a^{\lfloor\frac{n}{2}\rfloor}$<br>若 $n$ 为偶数，那么 $Result=A^2$<br>若 $n$ 为奇数，那么 $Result=a\times A^2$<br>这样子复杂度从 $O(n)$ 降到了 $O(\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % c;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x = <span class="built_in">pow</span>(a, b / <span class="number">2</span>, c);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = (<span class="keyword">long</span> <span class="keyword">long</span>)x * x % m;</span><br><span class="line"><span class="keyword">if</span> (b % <span class="number">2</span> == <span class="number">1</span>) ans = ans * a % m;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="蒙哥马利算法"><a href="#蒙哥马利算法" class="headerlink" title="蒙哥马利算法"></a>蒙哥马利算法</h4><p>具体详细介绍见<a href="https://en.wikipedia.org/wiki/Montgomery_modular_multiplication" target="_blank" rel="noopener">维基百科</a>，这里直接上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Montgomery</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = a;</span><br><span class="line"><span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) result = (result * temp) % c;</span><br><span class="line">temp = (temp * temp) % c;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合数取模"><a href="#组合数取模" class="headerlink" title="组合数取模"></a>组合数取模</h3><h4 id="方法一：杨辉三角递推"><a href="#方法一：杨辉三角递推" class="headerlink" title="方法一：杨辉三角递推"></a>方法一：杨辉三角递推</h4><p>使用递推公式：$C_n^m=C_{n-1}^m+C_{n-1}^{m-1}$<br>写成数组：$C[n][m]=C[n-1][m]+C[n-1][m-1]$<br>这也是杨辉三角的递推公式，所以边界为 $C[0][0]=1$。下面给出求一个组合数的方法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">m = min(m, n - m);</span><br><span class="line"><span class="comment">// 因为 c[n][m] == c[n][n - m]</span></span><br><span class="line"><span class="comment">// 所以取最小值减少运算。</span></span><br><span class="line">c[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">c[j] = c[j] + c[j - <span class="number">1</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[m];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为只求一个组合数，所以使用了滚动数组的方式</span></span><br></pre></td></tr></table></figure></p><p>由于递推时间复杂度为 $O(n^2)$，所以只适用于小数据的情况。</p><h4 id="方法二：乘法逆元"><a href="#方法二：乘法逆元" class="headerlink" title="方法二：乘法逆元"></a>方法二：乘法逆元</h4><p>在数据很大的时候，我们对组合数取模就会比较麻烦，因为数据不一定能存下，而且通过观察组合数的公式：<br>$$<br>C_n^m=\frac{n!}{m!(n-m)!}=\frac{n\times (n-1)\times…\times(n-m+1)}{m!}<br>$$<br>我们发现组合数是带有除法的，不能走一步取一次模，为了解决除法取模的问题，人们发明了逆元这个<a href="https://en.wikipedia.org/wiki/Inverse_element" target="_blank" rel="noopener">东西</a>。<br>若 $a\times b\equiv1\pmod p$ 则称 $b$ 为 $a$ 在模 $p$ 下的乘法逆元，一般认为，$b &lt; p$，$b$ 记为 $a^{-1}$。<strong>注意，此处 $a$ 与 $p$ 必须互质，否则乘法逆元不存在。</strong>那么逆元该怎么用呢？当然是借助它将除法转为乘法，再用分配律来计算了。<br>我们来看一个式子：<br>$$<br>\frac{a}{b}\equiv\frac{a}{b}\times b\times b^{-1}\equiv a\times b^{-1}\pmod p<br>$$<br>这样就可以把问题转化为求一个数的逆元，再转化为乘法运算。</p><h5 id="递推求逆元"><a href="#递推求逆元" class="headerlink" title="递推求逆元"></a>递推求逆元</h5><p>求 $i​$ 在模 $p​$ 下的乘法逆元，满足 $gcd(i, p)=1, i&lt; p​$<br>使用欧几里得除法的形式，令 $p=k\times i+r​$，则 $k=\lfloor\frac{p}{i}\rfloor,r=p\bmod i​$<br>显然，$k\times i+r\equiv 0(\bmod p)​$<br>两边同乘 $i^{-1}\times r^{-1}​$，得 $k\times r^{-1}+i^{-1}\equiv 0\pmod p​$<br>移项，整理：$i^{-1}\equiv -k\times r^{-1}\equiv (p-k)\times r^{-1}\pmod p​$<br>将 $k​$ 和 $r​$ 用 $p​$ 来替换：$i^{-1}\equiv (p-\lfloor\frac{p}{i}\rfloor)\times (p\bmod i)^{-1}\pmod p​$<br>使用 <code>inv[i]</code> 来表示 <code>i</code> 的逆元，有 <code>inv[i] = (p - p / i) * inv[p % i]</code><br>时间复杂的为线性，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> inv[<span class="number">10000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getInverse</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (inv[x] != <span class="number">0</span>) <span class="keyword">return</span> inv[x];</span><br><span class="line">inv[x] = (p - p / i) * getInverse(p % x, p) % p;</span><br><span class="line"><span class="keyword">return</span> inv[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="费马小定理求逆元"><a href="#费马小定理求逆元" class="headerlink" title="费马小定理求逆元"></a>费马小定理求逆元</h5><p>费马小定理：<del>如此可爱的定理名称</del> $a^{p-1}\equiv1\pmod p$ 当 $p$ 为素数时且 $gcd(a,p)=1$ 时。<br>所以求 $a$ 的逆元时，只要求出 $a^{p-2}$ 的值就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Montgomery</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = a;</span><br><span class="line"><span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) result = (result * temp) % c;</span><br><span class="line">temp = (temp * temp) % c;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getinverse</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Montgomery(x, p - <span class="number">2</span>, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="逆元求组合数"><a href="#逆元求组合数" class="headerlink" title="逆元求组合数"></a>逆元求组合数</h5><p>从组合数原公式出发<br>$$<br>C_n^m=\frac{n!}{m!(n-m)!}=\frac{n\times (n-1)\times…\times(n-m+1)}{m!}<br>$$</p><p>对于分子，我们可以用传统方法，边乘边模，对于分母，我们可以求逆元再乘分子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Montgomery</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = a;</span><br><span class="line"><span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) result = (result * temp) % c;</span><br><span class="line">temp = (temp * temp) % c;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getInverse</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Montgomery(x, p - <span class="number">2</span>, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">c</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">1</span>, y = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = n; i &gt;= n - m + <span class="number">1</span>; --i) x = x * i % p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= m; ++i) y = y * i % p;</span><br><span class="line"><span class="keyword">return</span> x * getInverse(y, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, m, p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c(n, m, p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：$p$ 一定要是大质数，起码得大于 $m$。若要求 $a$ 在模 $p$ 下的乘法逆元，必须要保证 $a$ 与 $p$ 互质。在此题中，要求 $m!$ 的乘法逆元，那么 $p$ 必须与 $m!$ 互质，所以 $p$ 要大于 $m$，且是个质数。<del>我一开始忘记了这点，导致调了一年</del></strong></p><h4 id="方法三：卢卡斯定理"><a href="#方法三：卢卡斯定理" class="headerlink" title="方法三：卢卡斯定理"></a>方法三：卢卡斯定理</h4><p><strong>适用于对答案模一个质数的情况。</strong><br>与逆元不同的是，这个方法不要求 $p$ 是个很大的素数，因此，适用范围更广（也许吧）。<br><strong><a href="https://zh.wikipedia.org/wiki/%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">卢卡斯定理</a></strong>：<br>对于非负整数 $m$ 和 $n$ 及素数 $p$，有同余式：<br>$$<br>\binom{n}{m}\equiv\prod_{i=0}^k\binom{n_i}{m_i} \pmod p<br>$$<br>成立。其中：<br>$$<br>n=n_kp^k+n_{k-1}p^{k-1}+…+n_1p+n_0<br>$$<br>并且<br>$$<br>m=m_kp^k+m_{k-1}p^{k-1}+…+m_1p+m_0<br>$$<br>以上两个式子是 $n$ 和 $m$ 的 $p$ 进制展开。当 $m &lt; n$ 时，二项式系数 $\binom{n}{m}=0$。<br>可以通过<a href="https://www.luogu.org/blog/user28007/lucas" target="_blank" rel="noopener">一系列的推导</a>得出下面这个结论：<br>$$<br>\binom{n}{m}\equiv\binom{\lfloor\frac{n}{p}\rfloor}{\lfloor\frac{m}{p}\rfloor}\times \binom{n\bmod p}{m\bmod p} \pmod p<br>$$<br>由这个公式我们可以得出结论：<strong>在 $n$ 和 $m$ 都小于 $p$ 时，公式一点用都没有。（啥？你问我为什么？$\binom{0}{0}=1$ 啊！）</strong>所以这个公式是在 $n\geqslant p$ 或 $m\geqslant p$ 的情况下使用的。这样可以减小 $n$ 和 $m$，使之小于 $p$，再用乘法逆元去求组合数。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Montgomery</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = a;</span><br><span class="line"><span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) result = (result * temp) % c;</span><br><span class="line">temp = (temp * temp) % c;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getInverse</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Montgomery(a, b - <span class="number">2</span>, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> % p;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt;= p || m &gt;= p) <span class="keyword">return</span> c(n / p, m / p, p) * c(n % p, m % p, p) % p;</span><br><span class="line"><span class="comment">// 核心语句</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">1</span>, y = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= n - m + <span class="number">1</span>; --i) x = x * i % p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) y = y * i % p;</span><br><span class="line"><span class="keyword">return</span> x * getInverse(y, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, m, p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c(n, m, p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;模运算在 OI 中是非常神奇的存在，有时候题目会非常好（m）心（m）地（p）让我们将答案取模，然而计算模的方法随着题目的变化而变化，网上很多博客又太零散，这里痛下决心总结一下。&lt;/p&gt;
    
    </summary>
    
      <category term="数论" scheme="http://walesexcitedmei.github.io/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="数论" scheme="http://walesexcitedmei.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="模运算" scheme="http://walesexcitedmei.github.io/tags/%E6%A8%A1%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>[C++ 奇技淫巧] 流迭代器使用</title>
    <link href="http://walesexcitedmei.github.io/2018/08/17/C-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7-%E6%B5%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    <id>http://walesexcitedmei.github.io/2018/08/17/C-奇技淫巧-流迭代器使用/</id>
    <published>2018-08-17T11:09:16.000Z</published>
    <updated>2018-09-25T12:58:18.144Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>自从熟知了 STL 库这个东西，我就再也离不开它了，以前一直以为<strong>只有容器才会有迭代器可以用</strong>，然而这是因为自己的知识水平还不够高，今天就介绍一下流迭代器这种神奇的存在。</p><a id="more"></a><h3 id="流迭代器"><a href="#流迭代器" class="headerlink" title="流迭代器"></a>流迭代器</h3><p><strong>iostream 迭代器（iostream iterator）</strong>：与输入或输出流绑定在一起，用于迭代遍历所关联的 IO 流。</p><p>虽然 <code>iostream</code> 类型不是容器，但标准库同样提供了在 <code>iostream</code> 对象上使用的迭代器：<code>istream_iterator</code> 用于读取输入流，而 <code>ostream_iterator</code> 则用于写输出流。这些迭代器将它们所对应的流视为特定类型的<strong>元素序列</strong>。</p><p>下面列出流迭代器的使用方法：</p><table><thead><tr><th style="text-align:center"><code>iostream</code>  迭代器的构造函数</th><th style="text-align:center">对应的意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>istream_iterator&lt;T&gt; in(strm)</code></td><td style="text-align:center">创建从输入流 <code>strm</code> 中读取T类型对象的 <code>istream_iterator</code> 对象</td></tr><tr><td style="text-align:center"><code>istream_terator&lt;T&gt; in</code></td><td style="text-align:center"><code>istream_iterator</code> 对象的超出末端迭代器</td></tr><tr><td style="text-align:center"><code>ostream_iterator&lt;T&gt; out(strm)</code></td><td style="text-align:center">创建将T类型的对象写到输出流 <code>strm</code> 的 <code>ostream_iterator</code> 对象</td></tr><tr><td style="text-align:center"><code>ostream_iterator&lt;T&gt; out(str, delim)</code></td><td style="text-align:center">创建将 <code>T</code> 类型的对象写到输出流 <code>strm</code> 的 <code>ostream_iterator</code> 对象，在写入过程中使用 <code>delim</code> 作为元素的分隔符。<code>delim</code> 是以空字符结束的字符数组（C风格字符串）。</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>istream_iterator</code> 的操作</th><th style="text-align:center">对应的意义</th></tr></thead><tbody><tr><td style="text-align:center"><code>it1 == it2; it1 != it2</code></td><td style="text-align:center">比较两上 <code>istream_iterator</code> 对象是否相等（不等）。迭代器读取的必须是相同的类型。如果两个迭代器都是 <code>end</code> 值，则它们相等。对于两个都不指向流结束位置的迭代器，如果它们使用同一个输入流构造，则它们也相等</td></tr><tr><td style="text-align:center"><code>*it</code></td><td style="text-align:center">返回从流中读取的值</td></tr><tr><td style="text-align:center"><code>it-&gt;mem</code></td><td style="text-align:center">是 <code>(*it).mem</code> 的同义词。返回从流中读取的对象的 mem 成员</td></tr><tr><td style="text-align:center"><code>++it; it++</code></td><td style="text-align:center">通过使用元素类型提供的 <code>&gt;&gt;</code> 操作从输入流中读取下一个元素值，使迭代器向前移动。通常，前缀版本使用迭代器在流中向前移动，并返回对加 $1$ 后的迭代器的引用。而后缀版本使迭代器在流中向前移动后，返回原值</td></tr></tbody></table><p><strong>注：流迭代器都是类模板：任何已定义输入操作符（<code>&gt;&gt;</code> 操作符）的类型都可以定义istream_iterator。任何已定义输出操作符（<code>&lt;&lt;</code> 操作符）的类型可定义 <code>ostream_iterator</code>。</strong> </p><h3 id="流迭代器使用"><a href="#流迭代器使用" class="headerlink" title="流迭代器使用"></a>流迭代器使用</h3><p><strong>注：迭代器的头文件别忘记引入。 <code>#include &lt;iterator&gt;</code></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">istream_iterator&lt;<span class="keyword">int</span>&gt; cinIter(<span class="built_in">cin</span>);</span><br><span class="line">istream_iterator&lt;<span class="keyword">int</span>&gt; endOfStream;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">while</span> (cinIter != endOfStream)</span><br><span class="line"><span class="comment">//注意++先引用后增值，不能写出前缀</span></span><br><span class="line">vec.push_back(*cinIter++);</span><br><span class="line"><span class="comment">//也可以写成  vector&lt;int&gt; vec(cinIter, endOfStream);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != vec.size(); ++i) <span class="built_in">cout</span> &lt;&lt; vec[i];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：其中 <code>end_of_stream</code> 定义为空的迭代器对象，用作结束迭代器。绑定流上的迭代器在遇到文件结束或某个错误时，将等于结束迭代器的值。</strong> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">ostream_iterator&lt;<span class="built_in">string</span>&gt; outIter(<span class="built_in">cout</span>, <span class="string">"\n"</span>);</span><br><span class="line">istream_iterator&lt;<span class="built_in">string</span>&gt; inIter(<span class="built_in">cin</span>), endOfStream;</span><br><span class="line"><span class="keyword">while</span>(endOfStream != inIter)</span><br><span class="line">*outIter++ = *inIter++; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：执行顺序是先 <code>iter++</code>，返回 <code>iter</code>，最后 <code>*iter</code>。</strong><br><strong>注意输出，输入 <code>1 2 3 4 5</code>，按 <code>enter</code> 输出 <code>1\n2\n3\n4\n</code>，按 <code>ctrl+z</code> 输出 <code>5</code>。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">"in.txt"</span>)</span></span>;</span><br><span class="line">istream_iterator&lt;<span class="keyword">int</span>&gt; cinIter(infile);</span><br><span class="line">istream_iterator&lt;<span class="keyword">int</span>&gt; endOfStream;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(cinIter, endOfStream);</span><br><span class="line">sort(vec.begin(), vec.end());</span><br><span class="line">ostream_iterator&lt;<span class="keyword">int</span>&gt; output(<span class="built_in">cout</span>, <span class="string">" "</span>);</span><br><span class="line">unique_copy(vec.begin(), vec.end(), output);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例输入/输出：</p><pre><code>INPUT(in.txt): 1 2 2 2 5 5 6 6 7 8 9 10 9 100        OUTPUT: 1 2 5 6 7 8 9 10 100</code></pre><h3 id="流迭代器的限制"><a href="#流迭代器的限制" class="headerlink" title="流迭代器的限制"></a>流迭代器的限制</h3><ul><li>不可能从 <code>ostream_iterator</code> 对象读入，也不可能写到 <code>istream_iterator</code> 对象中。</li><li>一旦给 <code>ostream_iterator</code>对象赋了一个值，写入就提交了。赋值后，没有办法再改变这个值。此外，<code>ostream_iterator</code> 对象中每个不同的值都只能正好输出一次。</li><li><code>ostream_iterator</code> 没有 <code>-&gt;</code> 操作符。</li></ul><h3 id="流迭代器的速度"><a href="#流迭代器的速度" class="headerlink" title="流迭代器的速度"></a>流迭代器的速度</h3><p>为了测试流迭代器的速度，我先随机生成了 $10000000$ 个数据，生成代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">test</span><span class="params">(<span class="string">"in.txt"</span>)</span></span>;</span><br><span class="line">srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>) * <span class="number">19260817</span>); <span class="comment">// +1s</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000000</span>; ++i)</span><br><span class="line">test &lt;&lt; rand() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代器测试"><a href="#迭代器测试" class="headerlink" title="迭代器测试"></a>迭代器测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>::chrono;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> start = system_clock::now();</span><br><span class="line"><span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">"in.txt"</span>)</span></span>;</span><br><span class="line">istream_iterator&lt;<span class="keyword">int</span>&gt; cinIter(infile);</span><br><span class="line">istream_iterator&lt;<span class="keyword">int</span>&gt; endOfStream;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(cinIter, endOfStream);</span><br><span class="line"><span class="keyword">auto</span> end = system_clock::now();</span><br><span class="line"><span class="keyword">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"cost: "</span> </span><br><span class="line"> &lt;&lt; <span class="keyword">double</span>(duration.count()) * microseconds::period::num / microseconds::period::den </span><br><span class="line"> &lt;&lt; <span class="string">" seconds"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><pre><code>cost: 10.7543 seconds</code></pre><p><strong>注：为了测试时间尽量精准，这里引入了 <code>chrono</code> 库，使用了支持 C++ 11 的 gcc 7.3.0，并且是在 Linux(Ubuntu) 上编译运行的，鉴于编译器的优化能力一个版本比一个版本强，此处没有开优化但结果仍可能有误差，与 OI 中使用迭代器的速度不一样，读者可以使用别的库再进行实验。</strong></p><h4 id="开了-O-2-优化的流迭代器"><a href="#开了-O-2-优化的流迭代器" class="headerlink" title="开了 $O_2$ 优化的流迭代器"></a>开了 $O_2$ 优化的流迭代器</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>::chrono;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> start = system_clock::now();</span><br><span class="line"><span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">"in.txt"</span>)</span></span>;</span><br><span class="line">istream_iterator&lt;<span class="keyword">int</span>&gt; cinIter(infile);</span><br><span class="line">istream_iterator&lt;<span class="keyword">int</span>&gt; endOfStream;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(cinIter, endOfStream);</span><br><span class="line"><span class="keyword">auto</span> end = system_clock::now();</span><br><span class="line"><span class="keyword">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"cost: "</span> </span><br><span class="line"> &lt;&lt; <span class="keyword">double</span>(duration.count()) * microseconds::period::num / microseconds::period::den </span><br><span class="line"> &lt;&lt; <span class="string">" seconds"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><pre><code>cost: 2.31234 seconds</code></pre><p><strong>注：开了优化的结果，读者自行判断</strong></p><h4 id="OI-中快读的时间测试"><a href="#OI-中快读的时间测试" class="headerlink" title="OI 中快读的时间测试"></a>OI 中快读的时间测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>::chrono;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">sign |= (ch == <span class="string">'-'</span>);</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line">x = sign ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> start = system_clock::now();</span><br><span class="line">freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; ++i) &#123;</span><br><span class="line">read(x);</span><br><span class="line">a.push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> end = system_clock::now();</span><br><span class="line"><span class="keyword">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"cost: "</span> </span><br><span class="line"> &lt;&lt; <span class="keyword">double</span>(duration.count()) * microseconds::period::num / microseconds::period::den </span><br><span class="line"> &lt;&lt; <span class="string">" seconds"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><pre><code>cost: 2.61905 seconds</code></pre><p><strong>注：快读的写法也许不是最优，读者可以自行实验。</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>事实上，抛开 OI 比赛不说，STL 的库使用优化还是很强的，但是 OI 中嘛，如果作大死用这个也许真的会崩。至于有关 STL 速度的讨论可以看<a href="https://www.zhihu.com/question/51650118" target="_blank" rel="noopener">这里</a>。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;自从熟知了 STL 库这个东西，我就再也离不开它了，以前一直以为&lt;strong&gt;只有容器才会有迭代器可以用&lt;/strong&gt;，然而这是因为自己的知识水平还不够高，今天就介绍一下流迭代器这种神奇的存在。&lt;/p&gt;
    
    </summary>
    
      <category term="奇技淫巧" scheme="http://walesexcitedmei.github.io/categories/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
    
      <category term="C++ 奇技淫巧" scheme="http://walesexcitedmei.github.io/tags/C-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
      <category term="迭代器" scheme="http://walesexcitedmei.github.io/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
      <category term="iostream" scheme="http://walesexcitedmei.github.io/tags/iostream/"/>
    
  </entry>
  
  <entry>
    <title>[算法] Manacher 算法求最长回文子串</title>
    <link href="http://walesexcitedmei.github.io/2018/08/14/%E7%AE%97%E6%B3%95-Manacher-%E7%AE%97%E6%B3%95%E6%B1%82%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>http://walesexcitedmei.github.io/2018/08/14/算法-Manacher-算法求最长回文子串/</id>
    <published>2018-08-14T11:30:29.000Z</published>
    <updated>2018-09-25T12:58:18.206Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>最近几次考试都涉及到了字符串处理这个话题，所以自己打算恶补字符串有关的算法，同时又刚好做到了 LeetCode 上<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/description/" target="_blank" rel="noopener">这么一道题</a>，所以干脆一同解决掉。</p><a id="more"></a><h3 id="最长回文字串问题"><a href="#最长回文字串问题" class="headerlink" title="最长回文字串问题"></a>最长回文字串问题</h3><p><strong>最长回文子串问题：给定一个字符串，求它的最长回文子串长度。</strong><br>如果一个字符串正着读和反着读是一样的，那它就是回文串。下面是一些回文串的实例：</p><pre><code>12321 a aba abba aaaa tattarrattat（牛津英语词典中最长的回文单词</code></pre><p>那么如何解决这个问题呢？有很多种方法：</p><ol><li>Brute-Force 暴力求解：找到所有字串，一一验证，时间复杂度为 $O(n^3)$</li><li>改进版 Brute-Force：遍历整个字符串的中间字符及空隙，然后向两端扫描，时间复杂度为 $O(n^2)$。</li><li>动态规划，此处暂时不介绍</li><li>下面将要介绍的 Manacher 算法，又名<strong><em>马拉车</em></strong>。</li></ol><h3 id="Manacher-算法"><a href="#Manacher-算法" class="headerlink" title="Manacher 算法"></a>Manacher 算法</h3><h4 id="暴力解法的缺陷所在"><a href="#暴力解法的缺陷所在" class="headerlink" title="暴力解法的缺陷所在"></a>暴力解法的缺陷所在</h4><ol><li>回文串奇偶性不定，使用上述方法二需要分类讨论，降低效率。</li><li>字串重复访问，时间复杂度冗余。</li></ol><p>举个例子：</p><pre><code>char: a b a b a   i: 0 1 2 3 4</code></pre><p>在 $i=1$ 和 $i=2$ 时，字串 <code>aba</code> 被分别遍历了一次。<br>Manacher 算法正式针对这些算法进行改进的算法，可以大大提高算法的运行效率。</p><h4 id="解决长度奇偶性问题"><a href="#解决长度奇偶性问题" class="headerlink" title="解决长度奇偶性问题"></a>解决长度奇偶性问题</h4><p>Manacher 算法通过一种预处理方式来解决第一个问题，它在字符串首尾及中间空隙插入一个字符，并且满足这个符号不在字符串中出现，这样就可以让所有的字符串长度变为奇数。以插入<code>#</code>为例：</p><pre><code>aba  --&gt; #a#b#a#abba --&gt; #a#b#b#a#</code></pre><p><strong>插入的是同样的符号，且符号不存在于原串，因此子串的回文性不受影响，原来是回文的串，插完之后还是回文的，原来不是回文的，依然不会是回文</strong></p><h4 id="解决重复访问问题"><a href="#解决重复访问问题" class="headerlink" title="解决重复访问问题"></a>解决重复访问问题</h4><p>我们把一个回文串中最左或最右位置的字符与其对称轴的距离称为回文半径。Manacher定义了一个回文半径数组 $RL$，用 $RL[i]$ 表示以第 $i$ 个字符为对称轴的回文串的回文半径。我们一般对字符串从左往右处理，因此这里定义 $RL[i]$ 为第 $i$ 个字符为对称轴的回文串的最右一个字符与字符 $i$ 的距离。对于上面插入分隔符之后的两个串，可以得到 $RL$ 数组：</p><table><thead><tr><th style="text-align:center">$char$</th><th style="text-align:center">#</th><th style="text-align:center">$a$</th><th style="text-align:center">#</th><th style="text-align:center">$b$</th><th style="text-align:center">#</th><th style="text-align:center">$a$</th><th style="text-align:center">#</th></tr></thead><tbody><tr><td style="text-align:center">$RL$</td><td style="text-align:center">$1$</td><td style="text-align:center">$2$</td><td style="text-align:center">$1$</td><td style="text-align:center">$4$</td><td style="text-align:center">$1$</td><td style="text-align:center">$2$</td><td style="text-align:center">$1$</td></tr><tr><td style="text-align:center">$RL-1$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$0$</td><td style="text-align:center">$3$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$0$</td></tr><tr><td style="text-align:center">$i$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$2$</td><td style="text-align:center">$3$</td><td style="text-align:center">$4$</td><td style="text-align:center">$5$</td><td style="text-align:center">$6$</td></tr></tbody></table><p>上面我们还求了一下 $RL[i]-1$。通过观察可以发现，$RL[i]-1$的值，正是在原本那个没有插入过分隔符的串中，以位置i为对称轴的最长回文串的长度。那么只要我们求出了 $RL$ 数组，就能得到最长回文子串的长度。</p><p>于是问题变成了，<strong>如何高效地求的 $RL$ 数组</strong>。基本思路是<strong>利用回文串的对称性，扩展回文串</strong>。</p><p>我们再引入一个辅助变量 $MaxRight$，表示当前访问到的<strong>所有回文子串</strong>，所能触及的<strong>最右</strong>一个字符的位置。另外还要记录下 $MaxRight$ 对应的回文串的对称轴所在的位置，记为 $pos$，它们的位置关系如下：</p><div style="align: center"> <img src="pic1.jpg"> </div><p>我们从左往右地访问字符串来求 $RL$，假设当前访问到的位置为 $i$，即要求 $RL[i]$，在对应上图，$i$ 必然是在 $pos$ 右边的。但我们更关注的是，$i$ 是在 $MaxRight$ 的左边还是右边。我们分情况来讨论：</p><h5 id="情况一：-i-在-MaxRight-左边"><a href="#情况一：-i-在-MaxRight-左边" class="headerlink" title="情况一：$i$ 在 $MaxRight$ 左边"></a>情况一：$i$ 在 $MaxRight$ 左边</h5><p>如下图所示：</p><div style="align: center"> <img src="pic2.jpg"> </div><p>我们知道，图中两个红色块之间（包括红色块）的串是回文的；并且以 $i$ 为对称轴的回文串，是与红色块间的回文串有所重叠的。我们找到 $i$ 关于 $pos$ 的对称位置 $j$，这个 $j$ 对应的 $RL[j]$ 我们是已经算过的。根据回文串的对称性，以i为对称轴的回文串和以j为对称轴的回文串，有一部分是相同的。这里又有两种细分的情况:</p><h6 id="以-j-为对称轴的回文串较短"><a href="#以-j-为对称轴的回文串较短" class="headerlink" title="以 $j$ 为对称轴的回文串较短"></a>以 $j$ 为对称轴的回文串较短</h6><p>如下图：</p><div style="align: center"> <img src="pic3.jpg"> </div><p>这时我们知道 $RL[i]$ 至少不会小于 $RL[j]$，并且已经知道了部分的以i为中心的回文串，于是可以令 $RL[i]=RL[j]$。但是以i为对称轴的回文串可能实际上更长，因此我们试着以 $i$ 为对称轴，继续往左右两边扩展，直到左右两边字符不同，或者到达边界。</p><h6 id="以-j-为对称轴的回文串较长"><a href="#以-j-为对称轴的回文串较长" class="headerlink" title="以 $j$ 为对称轴的回文串较长"></a>以 $j$ 为对称轴的回文串较长</h6><p>如下图：</p><div style="align: center"> <img src="pic4.jpg"> </div><p>这时，我们只能确定，两条蓝线之间的部分（即不超过 $MaxRight$ 的部分）是回文的，于是从这个长度开始，尝试以i为中心向左右两边扩展，，直到左右两边字符不同，或者到达边界。</p><h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><p>不论以上哪种情况，之后都要尝试更新MaxRight和pos，因为有可能得到更大的MaxRight。</p><p>具体操作如下：</p><ol><li>令 $RL[i]=min\lbrace RL[2\times pos-i], MaxRight-i\rbrace$</li><li>以 $i$ 为中心扩展回文串，直到左右两边字符不同，或者到达边界</li><li>更新 $MaxRight$ 和 $pos$</li></ol><h5 id="情况二：-i-在-MaxRight-右边"><a href="#情况二：-i-在-MaxRight-右边" class="headerlink" title="情况二：$i$ 在 $MaxRight$ 右边"></a>情况二：$i$ 在 $MaxRight$ 右边</h5><p>如下图：</p><div style="align: center"> <img src="pic5.jpg"> </div><p>遇到这种情况，说明以 $i$ 为对称轴的回文串还没有任何一个部分被访问过，于是只能从 $i$ 的左右两边开始尝试扩展了，当左右两边字符不同，或者到达字符串边界时停止。然后更新 $MaxRight$ 和 $pos$。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>此处以 <a href="https://leetcode-cn.com/problems/longest-palindromic-substring/description/" target="_blank" rel="noopener">LeetCode 上的题</a>为例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = s.size();</span><br><span class="line"><span class="keyword">if</span> (len &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line"><span class="built_in">string</span> str = preProcess(s);</span><br><span class="line"><span class="keyword">int</span> n = str.size(), pos = <span class="number">0</span>, MaxRight = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; RL(n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">RL[i] = MaxRight &gt; i ? min(RL[<span class="number">2</span> * pos - i], MaxRight - i) : <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (str[i + RL[i]] == str[i - RL[i]]) ++RL[i];</span><br><span class="line"><span class="keyword">if</span> (i + RL[i] &gt; MaxRight) &#123;</span><br><span class="line">MaxRight = i + RL[i];</span><br><span class="line">pos = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxLen = <span class="number">0</span>, index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span>(RL[i] &gt; maxLen) &#123;</span><br><span class="line">maxLen = RL[i];</span><br><span class="line">index = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">// 这里可以和上面并在一起</span></span><br><span class="line"><span class="keyword">return</span> s.substr((index - maxLen) / <span class="number">2</span>, maxLen - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//预处理字符串，abc预处理后变成$#a#b#c#^</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">preProcess</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = s.size();</span><br><span class="line"><span class="built_in">string</span> res;</span><br><span class="line">res.push_back(<span class="string">'$'</span>);</span><br><span class="line">res.push_back(<span class="string">'#'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">res.push_back(s[i]);</span><br><span class="line">res.push_back(<span class="string">'#'</span>);</span><br><span class="line">&#125;</span><br><span class="line">res.push_back(<span class="string">'^'</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注：此处字符串预处理在头上加入 '$' 是为了方便处理</span></span><br><span class="line"><span class="comment">// 如果是空间瘤患者，直接在有关的地方减一就行了</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Manacher 算法其实可以算奇技淫巧吧，主要还是掌握它的思路，充分利用待求解问题的性质，从而降低求解的复杂度。这个也是在竞赛中会用到的技巧。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;最近几次考试都涉及到了字符串处理这个话题，所以自己打算恶补字符串有关的算法，同时又刚好做到了 LeetCode 上&lt;a href=&quot;https://leetcode-cn.com/problems/longest-palindromic-substring/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这么一道题&lt;/a&gt;，所以干脆一同解决掉。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://walesexcitedmei.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="字符串" scheme="http://walesexcitedmei.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="算法" scheme="http://walesexcitedmei.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Manacher" scheme="http://walesexcitedmei.github.io/tags/Manacher/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode 刷题日志] LeetCode-3 无重复字符的最长子串</title>
    <link href="http://walesexcitedmei.github.io/2018/08/12/LeetCode-%E5%88%B7%E9%A2%98%E6%97%A5%E5%BF%97-LeetCode-3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>http://walesexcitedmei.github.io/2018/08/12/LeetCode-刷题日志-LeetCode-3-无重复字符的最长子串/</id>
    <published>2018-08-12T13:34:50.000Z</published>
    <updated>2018-09-25T12:58:18.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>今天开始刷 <a href="https://leetcode-cn.com/" target="_blank" rel="noopener">LeetCode</a>，虽然说里面都是大公司的面试题，但是作为一个 OIer，刷刷也无妨，还能够提高自己的代码能力。本来希望<strong>花个 3 天</strong>刷完 LeetCode，结果发现这是完全不可能的，今天就被很基础的第三题给卡住了……</p><a id="more"></a><h3 id="LeetCode-3-题解"><a href="#LeetCode-3-题解" class="headerlink" title="LeetCode-3 题解"></a>LeetCode-3 题解</h3><p><strong><em>——坑人的大水题</em></strong></p><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="noopener"><strong>题目</strong></a><strong>描述</strong>：</p><pre><code>给定一个字符串，找出不含有重复字符的最长子串的长度。示例：给定 &quot;abcabcbb&quot; ，没有重复字符的最长子串是 &quot;abc&quot; ，那么长度就是3。给定 &quot;bbbbb&quot; ，最长的子串就是 &quot;b&quot; ，长度是1。给定 &quot;pwwkew&quot; ，最长子串是 &quot;wke&quot; ，长度是3。请注意答案必须是一个子串，&quot;pwke&quot; 是 子序列  而不是子串。</code></pre><p><strong>[题解]</strong></p><p>直接上代码，具体说明看注释。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> currLen = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// table 用于记录字符出现的次数，之所以设为 128 是为了适配 ASCII 码</span></span><br><span class="line"><span class="keyword">int</span> table[<span class="number">128</span>], start = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 全部初始化为 0</span></span><br><span class="line"><span class="built_in">memset</span>(table, <span class="number">0</span>, <span class="keyword">sizeof</span>(table));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line"><span class="comment">// 如果 ++table[s[i]] 为 2，则说明这个数在所选的子串中已经出现过了</span></span><br><span class="line"><span class="comment">// 当然这里还有好多写法</span></span><br><span class="line"><span class="keyword">if</span> (++table[s[i]] == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">// 因为遇到重复的字符了，所以要先更新 maxLen</span></span><br><span class="line"><span class="keyword">if</span> (currLen &gt; maxLen) maxLen = currLen;</span><br><span class="line"><span class="comment">// 接下来查找重复的数字出现的地方，并且更新字串起始位置</span></span><br><span class="line"><span class="comment">// 这里可以优化：使用一个 map&lt;char, int&gt;</span></span><br><span class="line"><span class="comment">// 或 table0[128] 来记录字符的出现位置</span></span><br><span class="line"><span class="comment">// 同时也可以与前面的 table 数组合并，既加快速度又减少空间</span></span><br><span class="line"><span class="comment">// 这里因为不需要（懒），所以就打了这个未优化的算法</span></span><br><span class="line"><span class="comment">// 有兴趣的读者可以去试一试优化算法。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = start; j &lt; i; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[j] == s[i]) &#123;</span><br><span class="line">table[s[j]] = <span class="number">1</span>;</span><br><span class="line">start = j + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 因为最多出现一次，所以直接 break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 没找到的话必须减小答案</span></span><br><span class="line">--currLen;</span><br><span class="line"><span class="comment">// 重置</span></span><br><span class="line">table[s[j]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> ++currLen; <span class="comment">// 没有重复就直接自加一</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最后的判断必不可少</span></span><br><span class="line"><span class="keyword">if</span> (currLen &gt; maxLen) maxLen = currLen;</span><br><span class="line"><span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于本人是一个 OIer，还是 Google 资深老粉丝，所以代码风格比较混搭（逃）。</span></span><br></pre></td></tr></table></figure><p>那么，是什么卡了我那么长时间呢？一开始的代码遇到重复的字符，直接更新起始位置到当前字符，殊不知会有 abcdaefg 这种情况，于是一直 WA。论充分思考的重要性…..</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>LeetCode 的题目难度并不是很大的，很多题差不多是<code>提高-</code>的难度，但是细节太多，同时对代码能力的要求比较高，某些数据结构也与 OI 中所写地不太一样。但是当作算法训练场来做也没什么坏处。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;今天开始刷 &lt;a href=&quot;https://leetcode-cn.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;，虽然说里面都是大公司的面试题，但是作为一个 OIer，刷刷也无妨，还能够提高自己的代码能力。本来希望&lt;strong&gt;花个 3 天&lt;/strong&gt;刷完 LeetCode，结果发现这是完全不可能的，今天就被很基础的第三题给卡住了……&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://walesexcitedmei.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://walesexcitedmei.github.io/tags/LeetCode/"/>
    
      <category term="字符串" scheme="http://walesexcitedmei.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="算法" scheme="http://walesexcitedmei.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[算法] RMQ 问题与 ST 算法</title>
    <link href="http://walesexcitedmei.github.io/2018/08/11/%E7%AE%97%E6%B3%95-RMQ-%E9%97%AE%E9%A2%98%E4%B8%8E-ST-%E7%AE%97%E6%B3%95/"/>
    <id>http://walesexcitedmei.github.io/2018/08/11/算法-RMQ-问题与-ST-算法/</id>
    <published>2018-08-11T08:31:36.000Z</published>
    <updated>2018-09-25T12:58:18.206Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>因为很多次模拟测试都败在区间最值问题（RMQ）上，所以决定开一篇博客好好总结一下。本篇文章着重介绍 RMQ 问题中最著名的 ST 算法。<br><a id="more"></a></p><h3 id="RMQ-问题"><a href="#RMQ-问题" class="headerlink" title="RMQ 问题"></a>RMQ 问题</h3><p>给定一个长度为 $N$ 的数列 $A$，然后进行若干次询问，每次给定一个区间 $[l_i,r_i]$ 求这个区间中的最大或最小值，这就是区间最值问题，也就是 RMQ 问题。一般来说，这样的问题都要求区间的查询是在线的，也就是提出一个查询回答一次，不能全部收到后统一回答。对于某些确定区间求最值的问题，通常采用倍增的方法来求解。而 ST 算法其实就是倍增的产物，同时加入了动态规划的思想。</p><h3 id="ST-算法"><a href="#ST-算法" class="headerlink" title="ST 算法"></a>ST 算法</h3><p>在 RMQ 问题中，ST 算法可以在 $O(NlogN)$ 的时间预处理数据后，以 $O(1)$ 的时间在线回答查询。一个序列的子空间个数显然有 $O(N^2)$ 个，我们首先在这个规模为 $O(N^2)$ 的状态空间中选择一些 $2$ 的整数次幂的位置作为代表值。</p><p>设 $F[i,j]$ 表示子空间 $A$ 中下标在在子区间 $[i,i+2^j-1]$ 里数的最大值，即从 $i$ 开始的 $2^j$ 个数的最大值。显然 $F[i,0]=A[i]$，即数列 $A$ 在子区间 $[i,i]$ 中的最大值。</p><p>递推时，我们将子区间长度成倍增长，公式如下：</p><p>$$F[i,j]=max\lbrace F[i,j-1],F[i+2^{j-1},j-1] \rbrace$$</p><p>即长度为 $2^j$ 的子区间的最大值是左右两半长度为 $2^{j-1}$ 的子区间的最大值中较大的那一个。所以我们先预处理我们要用到的数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STprework</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) f[i][<span class="number">0</span>] = a[i];</span><br><span class="line"><span class="keyword">int</span> t = <span class="built_in">log</span>(n) / <span class="built_in">log</span>(<span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; t; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; ++i)</span><br><span class="line">f[i][j] = max(f[i][j - <span class="number">1</span>], f[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们要查询区间 $[l,r]$ 的最值时，我们先计算出一个 $k$，满足 $2^k &lt; r-l+1 \leqslant 2^{k+1}$，也就是使二的 $k$ 次幂小于区间长度的前提下最大的 $k$。那么“从 $l$ 开始的 $2^k$ 个数”和“以 $r$ 结尾的 $2^k$ 个数” 这两段一定覆盖了原来的整个区间，这两段的最大值分别为 $F[l,k]$ 和 $F[r-2^k+1,k]$，二者中较大的就是整个区间的最值。因为求的是最大值，所以只要覆盖区间就行，重叠是没有关系的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">STquery</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">log</span>(r - l + <span class="number">1</span>) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> max(f[l][k], f[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要进一步提高执行效率，可以将 $f$ 数组的两个维度交换，这样对缓存更加友好。并且可以预处理出 $1 \thicksim n$ 中 $log_2 n$ 的值，甚至是各个区间对应的 $k$ 的值，具体方法视情况而定。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>为什么使用 <code>log()</code> 函数而不是 <code>log2()</code> 呢，原因是前者效率更快，而且众所周知，对数是有换底公式的（啥？你不知道？赶紧补一下高中数学必修一吧！），所以这里效率会高一点</li><li><a href="https://www.luogu.org/problemnew/show/P3865" target="_blank" rel="noopener">ST 表的模板题地址——洛谷 p3865</a></li></ol><p>附上完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 110000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a, b) (a &gt; b ? a : b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(a) putchar(a + 48)</span></span><br><span class="line"><span class="keyword">int</span> n, m, A[maxn];</span><br><span class="line"><span class="keyword">int</span> li, ri;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">21</span>][maxn];</span><br><span class="line"><span class="keyword">int</span> logn[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c = getchar()) &amp;&amp; c != <span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'-'</span>) &#123;</span><br><span class="line">sign = <span class="literal">true</span>;</span><br><span class="line">c = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">ans = (ans &lt;&lt; <span class="number">3</span>) + (ans &lt;&lt; <span class="number">1</span>) + (c - <span class="string">'0'</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c = getchar()));</span><br><span class="line"><span class="keyword">return</span> sign ? -ans : ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s &lt; <span class="number">0</span>) &#123;</span><br><span class="line">G(<span class="number">-3</span>);</span><br><span class="line">s = -s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s &gt; <span class="number">9</span>) write(s / <span class="number">10</span>);</span><br><span class="line">G(s % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STprework</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) f[<span class="number">0</span>][i] = A[i];</span><br><span class="line"><span class="keyword">int</span> t = logn[n] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; t; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; ++i)</span><br><span class="line">f[j][i] = max(f[j - <span class="number">1</span>][i], f[j - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">STquery</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = logn[r - l + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> max(f[k][l], f[k][r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">logn[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">logn[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i) logn[i] = logn[i / <span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n = read();</span><br><span class="line">m = read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) A[i] = read();</span><br><span class="line">pre();</span><br><span class="line">STprework();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">li = read();</span><br><span class="line">ri = read();</span><br><span class="line">write(STquery(li, ri));</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;因为很多次模拟测试都败在区间最值问题（RMQ）上，所以决定开一篇博客好好总结一下。本篇文章着重介绍 RMQ 问题中最著名的 ST 算法。&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://walesexcitedmei.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://walesexcitedmei.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="RMQ 问题" scheme="http://walesexcitedmei.github.io/tags/RMQ-%E9%97%AE%E9%A2%98/"/>
    
      <category term="ST 算法" scheme="http://walesexcitedmei.github.io/tags/ST-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>[图论] 图论基础知识</title>
    <link href="http://walesexcitedmei.github.io/2018/08/10/%E5%9B%BE%E8%AE%BA-%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://walesexcitedmei.github.io/2018/08/10/图论-图论基础知识/</id>
    <published>2018-08-10T11:49:26.000Z</published>
    <updated>2018-09-25T12:58:18.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>因为自己的图论其实掌握得不怎么样，所以开一篇博客，来加深一下自己图论的基础。注意，本文只是基础，主要普及图的存储，最短路和遍历（$DFS$ 和 $BFS$）。</p><a id="more"></a><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在图论中，我们定义一张图为由顶点集（Vertices）和边集（Edges）组成的二元组，即 $G = (V, E)$。此处 $V$ 和 $E$ 也可写为 $V(G)$ 和 $E(G)$。</p><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><p><strong>阶（Order）</strong>：图 $G$ 中顶集 $V$ 的大小称作图 $G$ 的阶。</p><p><strong>子图（Sub-Graph）</strong>：图 $G’$ 称作图 $G$ 的子图如果 $V(G’)\subseteq V(G)$ 以及 $E(G’)\subseteq E(G)$。</p><p><strong>生成子图（Spanning Sub-Graph）</strong>：指满足条件 $V(G’)=V(G)$ 的 $G$ 的子图 $G’$。</p><p><strong>度（Degree）</strong>是一个顶点的度是指与该顶点相关联的总边数，顶点 $v$ 的度记作 $d(v)$。度和边有如下关系：$\sum_{v\in V} d(v)=2\left|E\right|$。</p><p><strong>出度（Out-degree）和入度（In-degree）</strong>：对有向图而言，顶点的度还可分为出度和入度。一个顶点的出度为 $d_o$ ，是指有 $d_o$ 条边以该顶点为起点，或说与该点关联的出边共有 $d_o$ 条。入度的概念也类似。</p><p><strong>自环（Loop）</strong>：若一条边的两个顶点相同，则此边称作自环。</p><p><strong>路径（Path）</strong>：从顶点u到顶点v的一条路径是指一个序列 $v_0,e_1,v_1,e_2,v_2,…e_k,v_k$，$e_i$ 的起点终点为 $v_{i-1}$ 及 $v_i$； $k$ 称作路径的长度； $v_0=u$，称为路径的起点；$v_k=v$，称为路径的终点。如果 $u=v$，称该路径是闭的，反之则称为开的；如果 $v_1,…,v_k$ 两两不等，则称之为简单路径（Simple path，注意， $u=v$ 是允许的）。</p><p><strong>行迹（Trace）</strong>：如果路径 $P(u,v)$ 中边各不相同，则该路径称为 $u$ 到 $v$ 的一条行迹。</p><p><strong>轨道（Track）</strong>：即简单路径。</p><p>闭的行迹称作<strong>回路（Circuit）</strong>，闭的轨道称作圈（Cycle）。（现存文献中的命名法并无统一标准。比如在另一种定义中，walk 对应上述的 path，path 对应上述的 track，trail对应上述的 trace。）</p><p><strong>距离（Distance）</strong>：从顶点 $u$ 出发到顶点 $v$ 的最短路径若存在，则此路径的长度称作从 $u$ 到 $v$ 的距离。若从 $u$ 到 $v$ 根本不存在路径，则记该距离为无穷（$\infty$）。</p><p><strong>桥（Bridge）</strong>：若去掉一条边，便会使得整个图不连通，该边称为桥。</p><h3 id="编程实现图的存储"><a href="#编程实现图的存储" class="headerlink" title="编程实现图的存储"></a>编程实现图的存储</h3><h4 id="邻接矩阵存图"><a href="#邻接矩阵存图" class="headerlink" title="邻接矩阵存图"></a>邻接矩阵存图</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(g, INF, <span class="keyword">sizeof</span>(g)); &#125; <span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> wieght)</span> </span>&#123;</span><br><span class="line">g[vertex1][vertex2] = weight;</span><br><span class="line">&#125; <span class="comment">// 添加一条单向边</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDuplexEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">addEdge(vertex1, vertex2, weight);</span><br><span class="line">addEdge(vertex2, vertex1, weight);</span><br><span class="line">&#125; <span class="comment">// 添加一条双向边 / 无向边</span></span><br></pre></td></tr></table></figure><p>其中 $g[i][j]$ 表示从 $i$ 到 $j$ 的边的权。<br>注意邻接矩阵方便使用，但空间复杂度为 $O(n^2)$，在点比较多的时候不太实用，极有可能会爆。</p><h4 id="邻接表存图"><a href="#邻接表存图" class="headerlink" title="邻接表存图"></a>邻接表存图</h4><p>先上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 11000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 21000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOE -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[maxm], e[maxm], heads[maxn], nxt[maxm]</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(heads, NOE, <span class="keyword">sizeof</span>(heads)); &#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">tot++;</span><br><span class="line">v[tot] = vertex2;</span><br><span class="line">e[tot] = weight;</span><br><span class="line">nxt[tot] = heads[vertex1];</span><br><span class="line">heads[vertex1] = tot;</span><br><span class="line">&#125; <span class="comment">// 加边</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDuplexEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">addEdge(vertex1, vertex2, weight);</span><br><span class="line">addEdge(vertex2, vertex1, weight);</span><br><span class="line">&#125; <span class="comment">// 加双向边</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = heads[x]; i != NOE; i = nxt[i]) &#123;</span><br><span class="line"><span class="keyword">int</span> y = v[i];</span><br><span class="line"><span class="keyword">int</span> x = e[i];</span><br><span class="line"><span class="comment">// 找到一条有向边 (x, y) 边权为 z</span></span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125; <span class="comment">// 遍历从 x 出发的边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$v[]$ 和 $e[]$ 记录了每条边的终点和边权，$nxt[]$模拟指针，表示从想同节点出发的下一条边在 $v[]$ 和 $e[]$ 中的存储位置，$heads[i]$ 表示从 $i$ 出发的第一条边。信息奥赛中使用数组模拟指针足够了，如果想知道具体的邻接表的相关知识看这里：<a href="https://zh.wikipedia.org/wiki/%E9%82%BB%E6%8E%A5%E8%A1%A8" target="_blank" rel="noopener">Wikipedia</a></p><h4 id="链式前向星"><a href="#链式前向星" class="headerlink" title="链式前向星"></a>链式前向星</h4><p><strong>个人认为最好的存图方式，虽然与邻接表没有太大区别，但是好写多了（与真正的邻接表对比，不是 OI 中的阉割版）。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 11000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 21000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOE -1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edgeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> vertexTo;</span><br><span class="line"><span class="keyword">int</span> edgeNext;</span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">edgeNode edges[maxm];</span><br><span class="line"><span class="keyword">int</span> heads[maxn];</span><br><span class="line"><span class="keyword">int</span> numEdges = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(heads, NOE, <span class="keyword">sizeof</span>(heads)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">numEdges++;</span><br><span class="line">edges[numEdges].vertexTo = vertex2;</span><br><span class="line">edges[numEdges].weight = weight;</span><br><span class="line">edges[numEdges].edgeNext = heads[vertex1];</span><br><span class="line">heads[vertex1] = numEdges;</span><br><span class="line">&#125; <span class="comment">// 加边</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDuplexEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">addEdge(vertex1, vertex2, weight);</span><br><span class="line">addEdge(vertex2, vertex1, weight);</span><br><span class="line">&#125; <span class="comment">// 加双向边</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class="line"><span class="keyword">int</span> y = edges[i].vertexTo;</span><br><span class="line"><span class="keyword">int</span> z = edges[i].weight;</span><br><span class="line"><span class="comment">// 找到一条有向边 (x, y) 边权为 z</span></span><br><span class="line"><span class="comment">// do something here</span></span><br><span class="line">&#125; <span class="comment">// 遍历从 x 出发的边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多写写就会熟悉了。</p><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><h4 id="深度优先遍历-DFS"><a href="#深度优先遍历-DFS" class="headerlink" title="深度优先遍历 DFS"></a>深度优先遍历 DFS</h4><p>深度优先搜索法是树的先序遍历的推广，它的基本思想是：从图 $G$ 的某个顶点 $v_0$ 出发，访问 $v_0$，然后选择一个与 $v_0$ 相邻且没被访问过的顶点 $v_i$ 访问，再从 $v_i$ 出发选择一个与 $v_i$ 相邻且未被访问的顶点 $v_j$ 进行访问，依次继续。如果当前被访问过的顶点的所有邻接顶点都已被访问，则退回到已被访问的顶点序列中最后一个拥有未被访问的相邻顶点的顶点 $w$，从 $w$ 出发按同样的方法向前遍历，直到图中所有顶点都被访问。具体实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> visited[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initDFS</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(visited, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visited)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rDFS</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">visited[x] = <span class="literal">true</span>;</span><br><span class="line">visit(); <span class="comment">// 根据具体情况定义 visit()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext)</span><br><span class="line"><span class="keyword">if</span> (!visited[edges[i].vertexTo])</span><br><span class="line">rDFS(edges[i].vertexTo);</span><br><span class="line"><span class="keyword">return</span>; <span class="comment">// 最好加上 return</span></span><br><span class="line">&#125; <span class="comment">// 因为这是递归实现的，故命名为 rDfS</span></span><br></pre></td></tr></table></figure><p>$DFS$ 全称为 $Depth$ $First$ $Search$，其实是一个搜索算法，有关搜索的算法，未来会开个专题详细讲解，通俗的语言概括就是不顾一切向前冲，撞墙了再回头。</p><p>对于下面这么一张图：</p><div style="align: center"> <img src="pic1.jpg"> </div><p>它的遍历方式如下：</p><div style="align: center"> <img src="pic2.jpg"> </div><p>遍历顺序：<br>$$v_1 \rightarrow v_2 \rightarrow v_4 \rightarrow v_8 \rightarrow v_5 \rightarrow v_3 \rightarrow v_6 \rightarrow v_7$$</p><p>$DFS$ 还是很常用的，属于必备知识。</p><h4 id="广度优先遍历-BFS"><a href="#广度优先遍历-BFS" class="headerlink" title="广度优先遍历 BFS"></a>广度优先遍历 BFS</h4><p>图的广度优先搜索是树的按层次遍历的推广，它的基本思想是：首先访问初始点 $v_i$，并将其标记为已访问过，接着访问 $v_i$ 的所有未被访问过的邻接点 $v_{i1},v_{i2},…,v_{it}$，并均标记已访问过，然后再按照 $v_{i1},v_{i2},…,v_{it}$的次序，访问每一个顶点的所有未被访问过的邻接点，并均标记为已访问过，依次类推，直到图中所有和初始点 $v_i$ 有路径相通的顶点都被访问过为止。非递归实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="keyword">int</span> dep[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initBFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Q.push(<span class="number">1</span>);</span><br><span class="line">dep[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// dep[i] 表示节点 i 的深度，即从 1 到 i 需要走过的最少点数</span></span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = Q.front();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class="line"><span class="keyword">int</span> y = edges[i].vertexTo;</span><br><span class="line"><span class="keyword">if</span> (dep[y]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">// 这里直接使用 dep[] 来替代 visited[]，顺便求出点的深度</span></span><br><span class="line">dep[y] = dep[x] + <span class="number">1</span>;</span><br><span class="line">Q.push(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于下面这么一张图：</p><div style="align: center"> <img src="pic3.jpg"> </div><p>它的遍历方式如下：</p><div style="align: center"> <img src="pic4.jpg"> </div><p>遍历顺序：<br>$$v_1\rightarrow v_2\rightarrow v_3\rightarrow v_4\rightarrow v_5\rightarrow v_6\rightarrow v_7\rightarrow v_8$$</p><h3 id="最短路径算法"><a href="#最短路径算法" class="headerlink" title="最短路径算法"></a>最短路径算法</h3><h4 id="Floyd-求多源最短路"><a href="#Floyd-求多源最短路" class="headerlink" title="Floyd 求多源最短路"></a>Floyd 求多源最短路</h4><p>Floyd 的本质是动态规划，我们令 $D[i,j,k]$ 表示经过若干个编号不超过 $k$ 的节点，从 $i$ 到 $j$ 的最短路径的长度。该问题可以划分成两个子问题，经过编号不超过 $k-1$ 的节点从 $i$ 到 $j$，或者从 $i$ 先到 $k$ 再到 $j$，于是我们写出动态规划方程：</p><p>$$D[i,j,k]=min\lbrace D[k-1,i,j],D[k-1,i,k]+D[k-1,k,j]\rbrace$$</p><p><strong>注意，$k$ 是阶段，所以必须置于外层循环中，$i$ 和 $j$ 是附加状态，所以置于内层循环。</strong></p><p>与背包问题类似，我们可以忽略 $k$ 这一维，于是我们有：</p><p>$$D[i,j]=min\lbrace D[i,j],D[i,k]+D[k,j]\rbrace$$</p><p>$D[i,j]$ 保存了从 $i$ 到 $j$ 的最短路的长度</p><p>实现代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 310</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[maxn][maxn], n, m;</span><br><span class="line"><span class="keyword">int</span> x, y, x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">memset</span>(d, INF, <span class="keyword">sizeof</span>(d));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) d[i][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">d[x][y] = min(d[x][y], z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化 &amp; 输入</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">d[i][j] = min(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line"><span class="comment">// Floyd 求最短路</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; d[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般来说，在数据小的时候可以使用 Floyd 算法，数据大的时候尽量去思考别的方法。</p><h4 id="Dijkstra-求单源最短路"><a href="#Dijkstra-求单源最短路" class="headerlink" title="Dijkstra 求单源最短路"></a>Dijkstra 求单源最短路</h4><p>Dijkstra 算法流程如下：</p><ol><li>初始化 $dist[1] = 0$，其余节点初始化为一个极大值。</li><li>找出一个未被标记的，$dist[x]$ 最小的节点 $x$，然后标记节点 $x$。</li><li>扫描节点 $x$ 的所有出边 $(u, v, w)$，若 $dist[v] &gt; dist[u] + w$，则使用 $dist[u] + w$ 更新 $dist[v]$</li><li>重复 $2 \thicksim 3$ 两个步骤，直到节点全部被标记。</li></ol><p>Dijkstra 算法基于贪心，只适用于边权非负的图。<br>优化：使用二叉堆对 $dist$ 进行维护，$O(\log n)$ 的时间获取最小值并删除，$O(\log n)$ 的时间执行一条边的扩展和更新，最终在 $O((m+n) \log n)$ 的时间内完成 Dijkstra。</p><p>实现代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关于图的定义部分这里省略</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heapNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, d;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> heapNode&amp; b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> d &gt; b.d; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意，为了建立小根堆，此处重载的运算符有一点不同。</span></span><br><span class="line"><span class="comment">// 可以通俗地理解为：如果到 b 的距离比到 u 的距离小，那么 b 的优先级比 u 高。</span></span><br><span class="line">priority_queue&lt;heapNode&gt; Q; <span class="comment">// 使用优先队列建立小根堆。</span></span><br><span class="line"><span class="keyword">int</span> dist[maxn]; <span class="comment">// 记录从 x 到 各点的最短距离</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dist[i] = INF;</span><br><span class="line">dist[x] = <span class="number">0</span>; <span class="comment">// 到自己的距离为 0</span></span><br><span class="line">Q.push((heapNode)&#123; x, <span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">heapNode f = Q.top();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">int</span> u = f.u;</span><br><span class="line"><span class="keyword">int</span> d = f.d;</span><br><span class="line"><span class="keyword">if</span> (d != dist[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = heads[u]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class="line"><span class="keyword">int</span> j = edges[i].vertexTo;</span><br><span class="line"><span class="keyword">int</span> w = edges[i].weight;</span><br><span class="line"><span class="keyword">if</span> (dist[j] &gt; dist[u] + w) &#123;</span><br><span class="line">dist[j] = dist[u] + w;</span><br><span class="line">Q.push()((heapNode)&#123; j, dist[j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bellman-Ford-及-SPFA-算法"><a href="#Bellman-Ford-及-SPFA-算法" class="headerlink" title="Bellman-Ford 及 SPFA 算法"></a>Bellman-Ford 及 SPFA 算法</h4><p>给定一张有向图，若对于图中的某一条边 $(x,y,z)$，有 $dist[y] \leqslant dist[x]+z$ 成立，则称该边满足<strong>三角形不等式</strong>。若所有的边都满足三角形不等式，则 $dist$ 数组就是所求的最短路。</p><p>首先介绍基于迭代思想的 Bellman-Ford 算法。它的流程如下：</p><ol><li>扫描所有的边 $(x,y,z)$，若 $dist[y] &gt; dist[x]+z$，则用后者更新它。</li><li>重复上述步骤，直到没有操作发生。</li></ol><p>Bellman-Ford 的时间复杂度为 $O(nm)$。</p><p>而 SPFA 实际上是队列优化的 Bellman-Ford 算法，这是国际上的通称。SPFA 的算法流程大致如下：</p><ol><li>建立一个队列，最初队列中只含有起点 $1$。</li><li>取出队头结点 $x$，扫描它的所有出边 $(x, y, x)$，若 $dist[y] &gt; dist[x]+z$，则用后者更新前者，同时若 $y$ 不在队列中，则把 $y$ 入队。</li><li>重复上述步骤，直到队列为空。</li></ol><p>SPFA 中的队列避免了 Bellman-Ford 中对不需要扩展的节点的冗余扫描，在稀疏图上的运行效率较高，为 $O(km)$ 级别，$k$ 是一个较小的常数，而在稠密图或特殊构造的网格图上，算法仍可能退化为 $O(nm)$，这也是很多人说 SPFA 算法玄学的原因。但是在遇到负边权的时候，只能够使用 SPFA。</p><p>SPFA 的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dist[maxn];</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt; inq; <span class="comment">// 记录是否在队列中</span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist, INF, <span class="keyword">sizeof</span>(dist));</span><br><span class="line">dist[x] = <span class="number">0</span>;</span><br><span class="line">Q.push(x);</span><br><span class="line">inq[x] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">k = Q.front();</span><br><span class="line">Q.pop();</span><br><span class="line">inq[k] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (dist[k] == INF) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = heads[k]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class="line"><span class="keyword">int</span> j = edges[i].vertexTo;</span><br><span class="line"><span class="keyword">int</span> w = edges[i].weight;</span><br><span class="line"><span class="keyword">if</span> (dist[j] &gt; dist[k] + w) &#123;</span><br><span class="line">dist[j] = dist[k] + w;</span><br><span class="line"><span class="keyword">if</span> (!inq[j]) &#123;</span><br><span class="line">Q.push(j);</span><br><span class="line">inq[j] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不是处理负边权的图的话， SPFA 尽量不要用，原因嘛……它太玄了。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;因为自己的图论其实掌握得不怎么样，所以开一篇博客，来加深一下自己图论的基础。注意，本文只是基础，主要普及图的存储，最短路和遍历（$DFS$ 和 $BFS$）。&lt;/p&gt;
    
    </summary>
    
      <category term="图论" scheme="http://walesexcitedmei.github.io/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="图论" scheme="http://walesexcitedmei.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://walesexcitedmei.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="Dijkstra" scheme="http://walesexcitedmei.github.io/tags/Dijkstra/"/>
    
      <category term="图的遍历" scheme="http://walesexcitedmei.github.io/tags/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    
      <category term="BFS" scheme="http://walesexcitedmei.github.io/tags/BFS/"/>
    
      <category term="DFS" scheme="http://walesexcitedmei.github.io/tags/DFS/"/>
    
      <category term="Floyd" scheme="http://walesexcitedmei.github.io/tags/Floyd/"/>
    
      <category term="Bellman-Ford" scheme="http://walesexcitedmei.github.io/tags/Bellman-Ford/"/>
    
      <category term="SPFA" scheme="http://walesexcitedmei.github.io/tags/SPFA/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP 模拟] 2018-8-8 题解: 爆零日，我该何去何从...</title>
    <link href="http://walesexcitedmei.github.io/2018/08/08/NOIP-%E6%A8%A1%E6%8B%9F-2018-8-8-%E9%A2%98%E8%A7%A3-%E7%88%86%E9%9B%B6%E6%97%A5%EF%BC%8C%E6%88%91%E8%AF%A5%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E/"/>
    <id>http://walesexcitedmei.github.io/2018/08/08/NOIP-模拟-2018-8-8-题解-爆零日，我该何去何从/</id>
    <published>2018-08-08T12:39:18.000Z</published>
    <updated>2018-09-25T12:58:18.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>今天的题似乎是 Day1 的题，然而却是压力山大，从第一题开始就崩，第二题考场上无脑 Dijkstra 求最短路，第三题更是懵逼（考后听说用 Dancing Link 做的时候彻底崩溃），总之，今天四十分，与爆零相差无几，所以这次在写题解的同时，还是会写一点考试技巧的，尤其是第一题和第二题（原谅我知识水平实在不够，对第三题仍然懵逼）。<br><a id="more"></a></p><h3 id="T1-动态仙人掌-dinosaur-cpp-c-pas"><a href="#T1-动态仙人掌-dinosaur-cpp-c-pas" class="headerlink" title="T1 动态仙人掌(dinosaur.cpp/c/pas)"></a>T1 动态仙人掌(dinosaur.cpp/c/pas)</h3><p><strong><em>——玩了这么多次小恐龙，没想到它还会报复我</em></strong></p><p><strong>[题目描述]</strong></p><p>由于 Beny 做的烧网线实验，Fife 家断网了。<br>Fife 照常打开了 Google Chrome，由于断网，他看到了以下内容：</p><div style="align: center"> <img src="pic1.jpg"> </div><p>看 到 这 个 简 单 而 又 有 趣 的 游 戏 ， 他 玩 了 起 来 。 然 后 ：</p><div style="align: center"> <img src="pic2.jpg"> </div><p>Fife 永远没有 gameover，他觉得这个游戏太简单了，现在他想考考你。小恐龙在数轴上原点出发向右运动，速度为$1$个单位每秒。现在你知道每一个仙人掌的位置$p[i]$和高度$h[i]$，且没有怪鸟突袭，请你控制小恐龙跳跃，使它能跳过最后一个仙人掌且跳跃的最大高度最小。为了送温暖简化问题，跳跃满足以下规则：它的跳跃路线为严格的与地面夹角为$45$度的直线，它在平地上能随时起跳，它能在起点和落地时刻瞬间起跳。你能控制它起跳的时刻和下落的时刻，下落时它会沿与地面夹角为$45$度的直线下降。小恐龙能跳过一个仙人掌当且仅当它在这个仙人掌的位置时的高度大于等于仙人掌的高度。 </p><p><strong>[输入]</strong></p><pre><code>第 1 行 1 个正整数 n接下来 n 行每行两个正整数 p[i]和 h[i],为第 i 个仙人掌的位置和高度，不保证 p[i]单调递增，可能会有两个仙人掌在同一位置。 </code></pre><p><strong>[输出]</strong></p><pre><code>你需要控制小恐龙跳跃，使它能跳过所有仙人掌，且跳跃的最大高度最小，输出这个高度，保留 1 位小数，如果无解，输出-1</code></pre><p><strong>[样例输入]</strong></p><pre><code>55 29 313 219 320 1</code></pre><p><strong>[样例输出]</strong></p><pre><code>6.0</code></pre><p><strong>[数据规模]</strong></p><pre><code>对于 30%的数据：n&lt;=200, p[i] &lt;= 1000, h[i] &lt;= 100对于 60%的数据：n&lt;= 50000, p[i] &lt;= 3000000, h[i] &lt;= 500对于 100%的数据：n &lt;= 300000, p[i] &lt; 2^31, h[i] &lt;=40000, 数据保证无需使用 longlong 或 int64</code></pre><p><strong>[题解]</strong></p><p>看到这是第一道题，心想，这一定很简单，只要贪心就行了，一堆判断，然后信心满满地提交……最后只对了一个点……此处附上 <strong>WA 代码</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 310000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a, b) (a &gt; b ? a : b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, p[maxn], h[maxn];</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt; goDown;</span><br><span class="line"><span class="keyword">double</span> ans = -INF;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">goDown.<span class="built_in">set</span>();</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">0</span>, <span class="keyword">sizeof</span>(h));</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">judgeDown</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (h[i] &gt;= h[i + <span class="number">1</span>] + p[i + <span class="number">1</span>] - p[i]) goDown[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (h[i] + h[i + <span class="number">1</span>] &lt;= p[i + <span class="number">1</span>] - p[i]) goDown[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> goDown[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judgeCan</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p[i] - p[i - <span class="number">1</span>] + h[i - <span class="number">1</span>] &lt; h[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上两个 judge 函数是 WA 之精髓所在（雾）</span></span><br><span class="line"><span class="comment">// 只考虑了相邻两个仙人掌的关系，如果在下降的时候撞到另外一个仙人掌</span></span><br><span class="line"><span class="comment">// 那么小恐龙就 GG 了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calh</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (h[x] &gt; h[y] + p[y] - p[x] &amp;&amp; x + <span class="number">1</span> == y) <span class="keyword">return</span> (<span class="keyword">double</span>)h[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> (<span class="keyword">double</span>)(p[y] - p[x] + h[x] + h[y]) / <span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"dinosaur.in"</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"dinosaur.out"</span>)</span></span>;</span><br><span class="line">in.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">in &gt;&gt; n;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">in &gt;&gt; p[i] &gt;&gt; h[i];</span><br><span class="line"><span class="keyword">if</span> (!judgeCan(i)) &#123;</span><br><span class="line">out &lt;&lt; <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) judgeDown(i);</span><br><span class="line"><span class="keyword">int</span> key = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; key &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (goDown[i]) &#123;</span><br><span class="line"><span class="keyword">double</span> tmp = calh(key, i);</span><br><span class="line">ans = max(ans, tmp);</span><br><span class="line">key = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (p[i] + h[i] &gt; p[i + <span class="number">1</span>]) key += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">out &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; fixed &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个实例告诉大家，贪心前先做好分析准备工作，否则就会像我这样......</span></span><br></pre></td></tr></table></figure><p>那么到底该怎么做呢？</p><p>由于这是一只理（bian）想（tai）化过的小恐龙，它只会与地面呈$45$度跳跃，而且可以无限升天，<del>法力无边</del>，所以我们可以从每一个仙人掌的跳跃边界来考虑：</p><div style="align: center"> <img src="T1_1.jpg"> </div><p>考虑两种不同的仙人掌情况：</p><div style="align: center"> <img src="T1_2.jpg"> </div><p>那么就有两种做法了，第一种，删去所有像绿色仙人掌那样的仙人掌，然后直接计算；第二种，也是标程的方法，逐个进行判断，维护 first 和 last 这两个值，分别表示一组跳跃（一次上和一次下）的左右边界，然后计算。</p><p><strong>[参考代码]</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注：本代码使用的是第二种方法</span></span><br><span class="line"><span class="comment">// 使用第一种方法的同学可以使用类链表的方式来存储数据，加快效率</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 310000</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment</span> &#123;</span> <span class="keyword">int</span> l; <span class="keyword">int</span> r; &#125;;</span><br><span class="line"><span class="keyword">int</span> n, p, h;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">segment a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(segment a, segment b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.l &lt; b.l || (a.l == b.l &amp;&amp; a.r &lt; b.r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"dinosaur.in"</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"dinosaur.out"</span>)</span></span>;</span><br><span class="line">in.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">in &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">in &gt;&gt; p &gt;&gt; h;</span><br><span class="line">a[i].l = p - h;</span><br><span class="line">a[i].r = p + h;</span><br><span class="line">&#125;</span><br><span class="line">sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, compare);</span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">1</span>].l &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> last = a[<span class="number">1</span>].r;</span><br><span class="line"><span class="keyword">int</span> first = a[<span class="number">1</span>].l;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i].l &lt; last) last = max(last, a[i].r);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ans = max(ans, (last - first) * <span class="number">1.0</span> / <span class="number">2.0</span>);</span><br><span class="line">first = a[i].l;</span><br><span class="line">last = a[i].r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans = max(ans, (last - first) * <span class="number">1.0</span> / <span class="number">2.0</span>);</span><br><span class="line">out &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[评价]</strong></p><p>其实思维难度并不大，主要是考验对算法是否掌握到位，譬如用贪心，这道题并不能从头贪到尾，那样会出问题，必须考虑所有可能情况，这也是本题样例的坑人之处所在，以后考试时，如果只有一个样例，那必须得小心出题老师出阴招，最好是自己<del>脑滚键盘</del>来出几个数据手算测试一下。</p><h3 id="T2-相交-inter-cpp-c-pas"><a href="#T2-相交-inter-cpp-c-pas" class="headerlink" title="T2 相交(inter.cpp/c/pas)"></a>T2 相交(inter.cpp/c/pas)</h3><p><strong><em>——旧时 Dijkstra 堂前 O(mlog n)，飞入寻常 NOIER 家。</em></strong></p><p><strong>[题目描述]</strong></p><p>一棵大树下有$n$个巢穴，由$n-1$条双向道路连接，任意两个城市均可互相到达。<br>大树附近有两群蚂蚁，每天早上，第一群蚂蚁会派一只蚂蚁到这棵树下，并在第$a$个巢穴到第$b$ 个巢穴间的最短路径上的每个巢穴留下气味。每天傍晚，第二群蚂蚁会派一只蚂蚁到这棵树下，并侦查第$c$个巢穴到第$d$个巢穴间的最短路径上是否有蚂蚁留下的气味。每天蚂蚁留下的气味会在当天深夜消失。 </p><p><strong>[输入]</strong></p><pre><code>第一行一个正整数 n，含义如题所示。接下来 n-1 行，每行两个正整数 u,v，表示第 u 个巢穴和第 v 个巢穴间有一条双向道路。接下来一行一个正整数 q，表示天数。接下来 q 行，每行四个正整数 a,b,c,d，含义如题所示。 </code></pre><p><strong>[输出]</strong></p><pre><code>q 行，每行一个字符串。若第二群派出的蚂蚁侦查到蚂蚁留下的气味，则输出”YES”,否则输出”NO”</code></pre><p><strong>[样例输入]</strong></p><pre><code>样例输入 181 21 32 42 55 65 73 842 5 4 35 3 8 85 4 6 74 8 6 7样例输入 2152 13 14 25 36 27 28 59 310 611 512 713 1114 115 151 2 3 44 7 1 92 3 7 92 6 7 82 1 6 8</code></pre><p><strong>[样例输出]</strong></p><pre><code>样例输出 1YESNOYESNO样例输出 2YESNOYESYESYES</code></pre><p><strong>[数据规模]</strong></p><pre><code>对于 30%的数据 1&lt;=n,q&lt;=3000对于另外 20%的数据 第 i 条边连接第 i 个巢穴和第 i+个巢穴对于 100%的数据 1&lt;=n,q&lt;=100000</code></pre><p><strong>[题解]</strong></p><p>首先讲一下我考试的时候是怎么想的，我想既然是最短路径，还是个图（当时没看出是树），那么 Dijkstra 无疑了，潇潇洒洒一百行打完，用了两个 bitset 再用了一个神奇的方法记录路径。好！就是这样，一定 <strong>AC</strong> 了！结果：<strong>TLE</strong>……附上 Dijkstra 暴力代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 110000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxq 110000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOE -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edgeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> vertexFrom;</span><br><span class="line"><span class="keyword">int</span> vertexTo;</span><br><span class="line"><span class="keyword">int</span> edgeNext;</span><br><span class="line"><span class="keyword">bool</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heapNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, d;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> heapNode&amp; b) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> d &gt; b.d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">edgeNode edges[maxn];</span><br><span class="line"><span class="keyword">int</span> heads[maxn];</span><br><span class="line"><span class="keyword">int</span> numEdges = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n, q, u, v, a, b, c, d;</span><br><span class="line"><span class="keyword">bool</span> judge = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt; smell1;</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt; smell2;</span><br><span class="line"><span class="keyword">int</span> path[maxn];</span><br><span class="line"><span class="keyword">int</span> dist[maxn];</span><br><span class="line">priority_queue&lt;heapNode&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(heads, NOE, <span class="keyword">sizeof</span>(heads)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2)</span> </span>&#123;</span><br><span class="line">numEdges++;</span><br><span class="line">edges[numEdges].vertexFrom = vertex1;</span><br><span class="line">edges[numEdges].vertexTo = vertex2;</span><br><span class="line">edges[numEdges].weight = <span class="literal">true</span>;</span><br><span class="line">edges[numEdges].edgeNext = heads[vertex1];</span><br><span class="line">heads[vertex1] = numEdges;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDuplexEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2)</span> </span>&#123;</span><br><span class="line">addEdge(vertex1, vertex2);</span><br><span class="line">addEdge(vertex2, vertex1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dist[i] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) path[i] = i;</span><br><span class="line">dist[x] = <span class="number">0</span>;</span><br><span class="line">Q.push((heapNode)&#123; x, <span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">heapNode f = Q.top();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">int</span> u = f.u;</span><br><span class="line"><span class="keyword">int</span> dis = f.d;</span><br><span class="line"><span class="keyword">if</span> (dis != dist[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = heads[u]; i != NOE; i= edges[i].edgeNext) &#123;</span><br><span class="line"><span class="keyword">int</span> j = edges[i].vertexTo;</span><br><span class="line"><span class="keyword">int</span> w = edges[i].weight;</span><br><span class="line"><span class="keyword">if</span> (dist[j] &gt; dist[u] + w) &#123;</span><br><span class="line">dist[j] = dist[u] + w;</span><br><span class="line">path[j] = u; <span class="comment">// 记录路径</span></span><br><span class="line">Q.push((heapNode)&#123; j, dist[j] &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateSmell1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = b;</span><br><span class="line"><span class="keyword">while</span> (tmp != a) &#123;</span><br><span class="line">smell1[tmp] = <span class="number">1</span>;</span><br><span class="line">tmp = path[tmp];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateSmell2</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = d;</span><br><span class="line"><span class="keyword">while</span> (tmp != c) &#123;</span><br><span class="line">smell2[tmp] = <span class="number">1</span>;</span><br><span class="line">tmp = path[tmp];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"inter.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"inter.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="comment">// fstream 不知怎么就不能取消 sync_with_stdio，为了加快速度只能使用 freopen</span></span><br><span class="line">init();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">addDuplexEdge(u, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">smell1.reset();</span><br><span class="line">smell2.reset();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line"><span class="keyword">if</span> ((a == c &amp;&amp; b == d) || (a == d &amp;&amp; b == c)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">smell1[a] = <span class="number">1</span>;</span><br><span class="line">smell2[c] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// TLE TLE TLE TLE TLE TLE TLE TLE TLE TLE TTTTTTLLLLLLEEEE</span></span><br><span class="line">Dijkstra(a);</span><br><span class="line">updateSmell1(a, b);</span><br><span class="line">Dijkstra(c);</span><br><span class="line">updateSmell2(c, d);</span><br><span class="line"><span class="comment">// TLE TLE TLE TLE TLE TLE TLE TLE TLE TLE TTTTTTLLLLLLEEEE</span></span><br><span class="line">judge = (smell1 &amp; smell2).any();</span><br><span class="line"><span class="keyword">if</span> (judge) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实如果看出了这是棵树的话，是可以用广搜的……可以快不少。</p><p>好了，说正解：就像上面所说的，这是一棵树（啥？你问我怎么看出的？仔细读题！！），所以获取最短距离一定是求两个点的 $LCA$ 了。那如何标记呢？？这是个好问题，一般我们都会去想标记经过的点，然而，如果用倍增 $LCA$ 求，一定会跳过经过的点，如果用朴素算法求的话……那还不如 $BFS$，那么我们就必须使用另外的方法了。</p><p>首先我们画一棵树：</p><div style="align: center"> <img src="T2_1.jpg"> </div><p>通过观察和举例，我们发现，只有当</p><ol><li>$a$ 和 $LCA(c, d)$ 在同一条链上，且 $LCA(a, b)$ 也在这条链上；</li><li>$b$ 和 $LCA(c, d)$ 在同一条链上，且 $LCA(a, b)$ 也在这条链上；</li><li>$c$ 和 $LCA(a, b)$ 在同一条链上，且 $LCA(c, d)$ 也在这条链上；</li><li>$d$ 和 $LCA(a, b)$ 在同一条链上，且 $LCA(c, d)$ 也在这条链上；</li></ol><p>以上四者满足其一时才能够是 YES，否则就是 NO。</p><p>为什么是这样？如何实现呢？<br>首先思考：到达$a$，$b$两点必定经过它们的 $LCA$，那么，只要它们两点与另外两点的 $LCA $在一条链上（这个不是很严谨，这里的链指的是将树看成 $DAG$ 时，即若 $LCA(u, v) = v$ 时，$u$，$v$在一条链上），且它们两个点的 $LCA$ 深度比另外两点的深度小时，两条路径必有重叠的部分（如图，$d$与 $LCA(a, b)$ 在一条链上，且 $LCA(a, b)$ 的深度比 $LCA(c, d)$ 的深度大，所以两者路径必有交集）</p><p>如此分析，代码也就呼之欲出了。</p><p><strong>[参考代码]</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 110000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOE -1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edgeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> vertexTo;</span><br><span class="line"><span class="keyword">int</span> edgeNext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">edgeNode edges[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 注意由于是无向边，而前向星只能按照双向边处理，所以要乘二</span></span><br><span class="line"><span class="keyword">int</span> heads[maxn];</span><br><span class="line"><span class="keyword">int</span> numEdges = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">20</span>], dep[maxn];</span><br><span class="line"><span class="keyword">int</span> n, q, u, v, a, b, c, d;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(heads, NOE, <span class="keyword">sizeof</span>(heads)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2)</span> </span>&#123;</span><br><span class="line">numEdges++;</span><br><span class="line">edges[numEdges].vertexTo = vertex2;</span><br><span class="line">edges[numEdges].edgeNext = heads[vertex1];</span><br><span class="line">heads[vertex1] = numEdges;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDuplexEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2)</span> </span>&#123;</span><br><span class="line">addEdge(vertex1, vertex2);</span><br><span class="line">addEdge(vertex2, vertex1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rDFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">f[x][<span class="number">0</span>] = fa;</span><br><span class="line">dep[x] = dep[fa] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">18</span>; ++i) </span><br><span class="line">f[x][i] = f[f[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext)</span><br><span class="line"><span class="keyword">if</span> (edges[i]. vertexTo != fa)</span><br><span class="line">rDFS(edges[i].vertexTo, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">18</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line"><span class="keyword">if</span> (dep[f[u][i]] &gt;= dep[v])</span><br><span class="line">u = f[u][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">18</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line"><span class="keyword">if</span> (dep[f[v][i]] &gt;= dep[u])</span><br><span class="line">v = f[v][i];</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">18</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line"><span class="keyword">if</span> (f[u][i] != f[v][i]) &#123;</span><br><span class="line">u = f[u][i];</span><br><span class="line">v = f[v][i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> f[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找 LCA</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">inOneChain</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (LCA(u, w) == w) &amp;&amp; (dep[w] &gt;= dep[v]);</span><br><span class="line"><span class="comment">// 判断链和深度关系</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> a0, <span class="keyword">int</span> b0, <span class="keyword">int</span> c0, <span class="keyword">int</span> d0)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> lca1 = LCA(a0, b0);</span><br><span class="line"><span class="keyword">int</span> lca2 = LCA(c0, d0);</span><br><span class="line"><span class="keyword">return</span> (inOneChain(a0, lca1, lca2) || inOneChain(b0, lca1, lca2)</span><br><span class="line">|| inOneChain(c0, lca2, lca1) || inOneChain(d0, lca2, lca1));</span><br><span class="line"><span class="comment">// 四者只要满足其一就会有交集，所以取或就行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"inter.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"inter.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="comment">// 我也不知道为什么，fstream 一关掉同步就会崩，无奈只能用 freopen</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">init();</span><br><span class="line"><span class="comment">// 循环时 i 只能到 n - 1，还是提醒仔细读题</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">addDuplexEdge(u, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f)); <span class="comment">// 别忘记初始化</span></span><br><span class="line">rDFS(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line"><span class="keyword">if</span> (judge(a, b, c, d)) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[评价]</strong></p><p>思维难度较大，想到求交集的方法后仍然要画很多图来总结规律，否则规律很有可能是错误的或者是片面的。再次提醒仔细读题，因为题目中包含了很多隐藏条件，这些隐藏条件也尤为重要，不管是对正解还是对<del>暴力</del>朴素算法来说，都可以提高效率。这是一道难题，还是一道坑题。</p><h3 id="T3-聪明格-kenken-cpp-c-pas"><a href="#T3-聪明格-kenken-cpp-c-pas" class="headerlink" title="T3 聪明格(kenken.cpp/c/pas)"></a>T3 聪明格(kenken.cpp/c/pas)</h3><p><strong>[题目描述]</strong><br>聪明格是一种数字游戏，又堪称升级版的数独，诞生日本。它在数学上的要求比数独要高得多，它把数独规则与加减乘除四则运算相结合，使大脑在各种谜题中来回穿梭。</p><p>它的规则是这样的：<br>有一个 $n\times n$ 的棋盘，每个格子里填一个在 1~n 范围内的数，使得每行每列没有重复的数字，(即 1~n 每个数在每行和每列各出现一次)，且满足下列条件:</p><div style="align: center"> <img src="pic3.jpg"> </div><br><div style="align: center"> <img src="pic4.jpg"> </div><p>现在给你一个 $n\times n$ 的棋盘，让你完成它，并输出解的个数和字典序最小的方案。数据保证一定有解。 </p><p><strong>[输入]</strong></p><pre><code>第一行一个正整数 n，表示棋盘的行数和列数。接下来 n 行，每行 n 个正整数。表示：相同数字构成了许多个连通块，假设这个四连通块内每个数字都为 a,那么你在这些格子上填的数的乘积应该等于 a。（具体描述见样例）</code></pre><p><strong>[输出]</strong></p><pre><code>输出共 n+1 行，第一行输出解的个数接下来 n 行，每行 n 个正整数。表示 n*n 的矩阵里每个数字的值（字典序最小的方案）。 </code></pre><p><strong>[输入样例 1]</strong></p><pre><code>46 6 1 1446 2 144 1444 2 144 412 12 4 4注：此样例所对应 4*4 的棋盘即为上图。 </code></pre><p><strong>[输出样例 1]</strong></p><pre><code>12 3 1 41 2 4 34 1 3 23 4 2 1</code></pre><p><strong>[输入样例 2]</strong></p><pre><code>312 12 1812 12 1818 18 18</code></pre><p><strong>[输出样例 2]</strong></p><pre><code>41 2 32 3 13 1 2</code></pre><p><strong>[输入样例 3]</strong></p><pre><code>932353542 4254 54 544322735576 10108108 1084927576576 1040 40 1008 10089270576576 814 14 1008 1008142702705768105 328314426882727 105 32810302688268880 6105 63 631030 2688 12680 8024 3 63966126126 126 24 24 40 40</code></pre><p><strong>[输出样例 3]</strong></p><pre><code>18 1 5 6 7 9 2 3 44 3 7 8 5 6 9 2 11 9 4 3 2 8 5 6 79 5 3 1 8 2 7 4 67 6 9 2 1 5 4 8 32 4 6 9 3 7 8 1 55 7 8 4 6 3 1 9 26 8 2 5 4 1 3 7 93 2 1 7 9 4 6 5 8</code></pre><p><strong>[数据规模]</strong></p><table><thead><tr><th style="text-align:center">测试点</th><th style="text-align:center">n=</th><th style="text-align:center">输入矩阵中不同种类数字个数</th></tr></thead><tbody><tr><td style="text-align:center">1-2</td><td style="text-align:center">3</td><td style="text-align:center">&gt;=3</td></tr><tr><td style="text-align:center">3-4</td><td style="text-align:center">5</td><td style="text-align:center">&gt;=10</td></tr><tr><td style="text-align:center">5-7</td><td style="text-align:center">9</td><td style="text-align:center">&gt;=30</td></tr><tr><td style="text-align:center">8-10</td><td style="text-align:center">9</td><td style="text-align:center">&gt;=20</td></tr></tbody></table><pre><code>100% 的数据满足，矩阵中每个数字&lt;=100,000，合法棋盘个数（解的个数）&lt;=300</code></pre><p><strong>[题解]</strong></p><p>这里先不多说了，关于舞蹈链我在后面的博客中会详细讲解，此处直接贴标程。</p><p><strong>[参考代码]</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">11</span>,M=<span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node2</span>&#123;</span> <span class="keyword">int</span> c[N][N]; &#125; ans[M];</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (node2 x,node2 y)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;N; j++)</span><br><span class="line"><span class="keyword">if</span>(x.c[i][j] != y.c[i][j])</span><br><span class="line"><span class="keyword">return</span> x.c[i][j] &lt; y.c[i][j];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span> <span class="keyword">int</span> x, y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; b[N * N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p[N * N]; </span><br><span class="line"><span class="keyword">int</span> a[N][N], c[N][N], h[N][N], h1[N][N], h2[N][N];</span><br><span class="line"><span class="keyword">int</span> n, cnt = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(c); c=getchar()) <span class="keyword">if</span>(c == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c=getchar()) x = x * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factor</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= x; i++)</span><br><span class="line">t += (<span class="keyword">int</span>)(x % i == <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;node&gt; x, <span class="built_in">vector</span>&lt;node&gt; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x.size() == y.size())</span><br><span class="line"><span class="keyword">return</span> factor(x[<span class="number">0</span>].x) &lt;= factor(y[<span class="number">0</span>].x);</span><br><span class="line"><span class="keyword">return</span> x.size() &lt; y.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (x % i == <span class="number">0</span>) p[t].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">h[x][y] = <span class="number">1</span>;</span><br><span class="line">b[cnt].push_back((node)&#123; x, y &#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> tx = x + dx[i];</span><br><span class="line"><span class="keyword">int</span> ty = y + dy[i];</span><br><span class="line"><span class="keyword">if</span> (tx &gt; <span class="number">0</span> &amp;&amp; tx &lt;= n &amp;&amp; ty &gt; <span class="number">0</span> &amp;&amp; </span><br><span class="line">ty &lt;= n &amp;&amp; !h[tx][ty] &amp;&amp;</span><br><span class="line">a[tx][ty] == a[x][y])</span><br><span class="line">dfs(tx, ty);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> dep)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillp</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> dep, <span class="keyword">int</span> s, <span class="keyword">int</span> tot)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep &gt; tot) work(t + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> x=b[t][dep].x, y = b[t][dep].y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p[t].size(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> u=p[t][i];</span><br><span class="line"><span class="keyword">if</span> ((s == u || dep &lt; tot) &amp;&amp; s % u == <span class="number">0</span> &amp;&amp;</span><br><span class="line">!h1[x][u] &amp;&amp; !h2[y][u])&#123;</span><br><span class="line">h1[x][u] = <span class="number">1</span>；</span><br><span class="line">h2[y][u] = <span class="number">1</span>;</span><br><span class="line">c[x][y] = u;</span><br><span class="line">fillp(t, dep + <span class="number">1</span>, s / u, tot);</span><br><span class="line">c[x][y] = <span class="number">0</span>;</span><br><span class="line">h1[x][u] = <span class="number">0</span>；</span><br><span class="line">h2[y][u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> dep)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep &gt; cnt) &#123;</span><br><span class="line">tot++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">ans[tot].c[i][j] = c[i][j];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> num=b[dep][<span class="number">0</span>].x；</span><br><span class="line"><span class="keyword">int</span> tot=b[dep].size() - <span class="number">1</span>;</span><br><span class="line">fillp(dep, <span class="number">1</span>, num, tot);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"kenken.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"kenken.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>); </span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">a[i][j] = read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span> (!h[i][j]) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">b[cnt].push_back((node)&#123; a[i][j], <span class="number">0</span> &#125;);</span><br><span class="line">dfs(i, j);</span><br><span class="line">&#125;</span><br><span class="line">sort(b + <span class="number">1</span>, b + cnt + <span class="number">1</span>, cmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">divide(i, b[i][<span class="number">0</span>].x);</span><br><span class="line">work(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tot &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">node2 t = ans[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= tot; i++)</span><br><span class="line">t = min(t, ans[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t.c[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t.c[i][n] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本次考试总结"><a href="#本次考试总结" class="headerlink" title="本次考试总结"></a>本次考试总结</h3><p>Too young, too simple, sometimes naive……还是要提高知识水平和编程素养，防止考试时 GG。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;今天的题似乎是 Day1 的题，然而却是压力山大，从第一题开始就崩，第二题考场上无脑 Dijkstra 求最短路，第三题更是懵逼（考后听说用 Dancing Link 做的时候彻底崩溃），总之，今天四十分，与爆零相差无几，所以这次在写题解的同时，还是会写一点考试技巧的，尤其是第一题和第二题（原谅我知识水平实在不够，对第三题仍然懵逼）。&lt;br&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 模拟" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="题解" scheme="http://walesexcitedmei.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="神题" scheme="http://walesexcitedmei.github.io/tags/%E7%A5%9E%E9%A2%98/"/>
    
      <category term="爆零日" scheme="http://walesexcitedmei.github.io/tags/%E7%88%86%E9%9B%B6%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>[数论] 数论基础知识----莫比乌斯函数</title>
    <link href="http://walesexcitedmei.github.io/2018/08/08/%E6%95%B0%E8%AE%BA-%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%87%BD%E6%95%B0/"/>
    <id>http://walesexcitedmei.github.io/2018/08/08/数论-数论基础知识-莫比乌斯函数/</id>
    <published>2018-08-08T10:46:44.000Z</published>
    <updated>2018-09-25T12:58:18.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>最近自己在自学数论，为了保证遇到数论的题的时候能从容不迫地应对，本篇文章主要是对莫比乌斯函数( $\mu{(n)}$ )的初步了解</p><a id="more"></a><h3 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>莫比乌斯函数 $\mu{(n)}$ 的定义如下：</p><p>$$ \mu(1) = 1; $$</p><p>如果 $n&gt;1$，写 $n=p_1^{a_1}p_2^{a_2}p_3^{a_3}…p_k^{a_k}$，则：</p><p>$$<br>\mu(n)=<br>\begin{cases}<br>(-1)^k &amp; \text{when $a_1=a_2=a_3=…=a_k=1$,}\\<br>0 &amp; \text{otherwise.}<br>\end{cases}<br>$$</p><p><strong>注</strong>     $\mu(n)=1$当且仅当$n$有一个大于$1$的平方因子。</p><h4 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h4><p>莫比乌斯函数在数论中经常出现（上次就被它狠狠地坑了一次），它的基本性质之一是对约束求和 $\sum_{d|n}\mu{(d)}$ 的一个重要的简明公式，它在$n$的正约数上展开，式子中的 $\left[x\right]$ 表示不大于$x$的最大整数。定理如下：</p><p><strong>[定理描述]</strong><br>如果${n}\geqslant{1}$，我们有<br>$$<br>\sum_{d|n}\mu{(d)}=\left[\frac{1}{n}\right]=<br>\begin{cases}<br>1 &amp;\text{when $n=1$,}\\<br>0 &amp;\text{when $n&gt;1$.}<br>\end{cases}<br>$$</p><p><strong>[定理证明]（运用了二项式定理）</strong><br>对于 $n=1$，等式显然成立。设 $n&gt;1$ 并写 $n=p_1^{a_1}…p_k^{a_k}$ ，在 $\sum_{d|n}\mu{(d)}$ 中非零的项仅来自于 $d=1$ 与 $n$ 的约数是不同素数的乘积，即<br>$$<br>\begin{aligned}<br>\sum_{d|n}\mu{(d)}={}&amp; \mu(1)+\mu(p_1)+…+\mu(p_k)+\mu(p_1p_k)+…+{} \\<br>&amp;\mu(p_{k-1}p_k)+…+\mu(p_1p_2…p_k){}\\<br>={}&amp;1+\binom{k}{1}(-1)+\binom{k}{2}(-1)^2+…+\binom{k}{k}(-1)^k{}\\<br>={}&amp;0<br>\end{aligned}<br>$$</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>莫比乌斯函数本身其实并不难，但是要深刻地理解它还是有一点点困难的，以后会和别的有关函数结合起来进行讲解，加深记忆。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;最近自己在自学数论，为了保证遇到数论的题的时候能从容不迫地应对，本篇文章主要是对莫比乌斯函数( $\mu{(n)}$ )的初步了解&lt;/p&gt;
    
    </summary>
    
      <category term="数论" scheme="http://walesexcitedmei.github.io/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
      <category term="数论" scheme="http://walesexcitedmei.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="欧拉函数" scheme="http://walesexcitedmei.github.io/tags/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    
      <category term="莫比乌斯函数" scheme="http://walesexcitedmei.github.io/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>[NOIP 模拟] 2018-8-7 题解: 我写了个自己都看不懂的程序</title>
    <link href="http://walesexcitedmei.github.io/2018/08/07/NOIP-%E6%A8%A1%E6%8B%9F-2018-8-7-%E9%A2%98%E8%A7%A3-%E6%88%91%E5%86%99%E4%BA%86%E4%B8%AA%E8%87%AA%E5%B7%B1%E9%83%BD%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E7%A8%8B%E5%BA%8F/"/>
    <id>http://walesexcitedmei.github.io/2018/08/07/NOIP-模拟-2018-8-7-题解-我写了个自己都看不懂的程序/</id>
    <published>2018-08-07T11:22:40.000Z</published>
    <updated>2018-09-25T12:58:18.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>今天创历史新高$290$分，第三道题考完自己都没看出自己用了啥方法（Orz），感觉自已要去补数据结构……另外第一道题实在是坑……十分啊！！</p><a id="more"></a><h3 id="T1-选举"><a href="#T1-选举" class="headerlink" title="T1 选举"></a>T1 选举</h3><p><strong>[题目描述]</strong></p><p>$C$国的总统选举委员会最近遇到了一些麻烦。</p><p>他们在统计各省对H先生的支持率（百分比）时，把支持率四舍五入到了整数。等他们公布结果后，该国媒体发现这些省份的支持率之和不等于$100$（百分比）！在媒体黑幕声的质疑下，他们不得不找你寻求帮助。</p><p>你将得到各省四舍五入后的支持率，请计算这些省份的支持率在四舍五入前的和是否可能等于100？支持率是以百分比的形式统计的。<br>请注意，各省的支持率可以是一个包含任意多位的有限小数。一个小数在四舍五入到整数时，若小数点后第一位小于5则舍，大于等于5则入。</p><p>例如：<br>$26,17,58$是一种可能的支持率，因为它们可能是$25.8,16.5,57.7$四舍五入后得到的，而$25.8+16.5+57.7=100$。<br>$49,49$是一种不可能的支持率，因为当$9$的个数有限时，无论有多少个$9$，均有$49.499+…+99+49.499+…+99&lt;100$。</p><p><strong>[输入格式]</strong></p><pre><code>输入包含多组数据，第一行是一个整数T，表示数据组数。接下来是T组数据，每组数据的第一行是一个整数N，表示参与选举的省份个数。第二行是N个整数，表示各省四舍五入后的支持率。</code></pre><p><strong>[输出格式]</strong></p><pre><code>对于每组数据，若是一种可能的支持率，输出Yes，否则输出No。</code></pre><p><strong>[样例输入]</strong></p><pre><code>2249 49326 17 58</code></pre><p><strong>[样例输出]</strong></p><pre><code>NoYes</code></pre><p><strong>[数据范围与约定]</strong></p><pre><code>对于30%的数据，1&lt;=n&lt;=3；对于50%的数据，1&lt;=n&lt;=5；对于80%的数据，1&lt;=四舍五入后各省的支持率&lt;=99；对于100%的数据，1&lt;=n&lt;=10000，输入数据中的所有整数均在有符号16位整数范围内。</code></pre><p><strong>[题解]</strong></p><p>简单数值计算题，直接讨论情况并计算即可。<br>具体来讲，可以求出使用给出的$N$个支持率，最终可能的支持率的取值范围，检查该范围是否包含$100$。<br>一般情况下，一个数X在取舍前可能取$[X-0,5,X+0.5)$之间的任意数值。<br>需要注意$0$和$100$等边界问题，因为支持率（百分比）一定是一个$[0,100]$之间的数。<br>求出的取值范围最好使用整数并加以开闭区间判断，避免实数精度误差。</p><p><strong>[参考代码]</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int64 long long</span></span><br><span class="line"><span class="keyword">int</span> T, n, x;</span><br><span class="line">int64 sum, l, r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"election.in"</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"election.out"</span>)</span></span>;</span><br><span class="line">in.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">in &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line">in &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> cnt0 = <span class="number">0</span>, cnt100 = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">in &gt;&gt; x;</span><br><span class="line">sum += x;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) ++cnt0;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">100</span>) ++cnt100;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">100</span>) flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">out &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">l = sum - (n - cnt0) / <span class="number">2</span>;</span><br><span class="line">r = sum + (n + cnt100) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">bool</span> cond0 = (l &lt;= <span class="number">100</span>);</span><br><span class="line"><span class="keyword">bool</span> cond1;</span><br><span class="line"><span class="keyword">if</span> ((n - cnt100) &amp; <span class="number">1</span> || (n - cnt100) == <span class="number">0</span>)</span><br><span class="line">cond1 = (r &gt;= <span class="number">100</span>);</span><br><span class="line"><span class="keyword">else</span> cond1 = r &gt; <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (cond0 &amp;&amp; cond1) out &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> out &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：这个其实是标程，连 double 都没有用 （Orz）</span></span><br></pre></td></tr></table></figure><p><strong>[评价]</strong></p><p>考察了基础的数学知识，只要搞清楚开区间和闭区间就好了。</p><h3 id="T2-异象石"><a href="#T2-异象石" class="headerlink" title="T2 异象石"></a>T2 异象石</h3><p><strong>[题目描述]</strong></p><p>Adera 是 Microsoft 应用商店中的一款解谜游戏。<br>异象石是进入 Adera 中异时空的引导物，在 Adera 的异时空中有一张地图。这张地图上有$N$个点，<br>有$N-1$条双向边把它们连通起来。起初地图上没有任何异象石，在接下来的$M$个时刻中，每个时刻<br>会发生以下三种类型的事件之一：</p><ol><li>地图的某个点上出现了异象石（已经出现的不会再次出现）；</li><li>地图某个点上的异象石被摧毁（不会摧毁没有异象石的点）；</li><li>向玩家询问使所有异象石所在的点连通的边集的总长度最小是多少。</li></ol><p>请你作为玩家回答这些问题。</p><p><strong>[输入格式]</strong></p><pre><code>第一行有一个整数N，表示点的个数。接下来N-1行每行三个整数x,y,z，表示点x和y之间有一条长度为z的双向边。第N+1行有一个正整数M。接下来M行每行是一个事件，事件是以下三种格式之一：+ x  表示点x上出现了异象石- x  表示点x上的异象石被摧毁?表示询问使当前所有异象石所在的点连通所需的边集的总长度最小是多少。</code></pre><p><strong>[输出格式]</strong></p><pre><code>对于每个 ?事件，输出一个整数表示答案。</code></pre><p><strong>[样例输入]</strong></p><pre><code>61 2 11 3 54 1 74 5 36 4 210+ 3+ 1?+ 6?+ 5?- 6- 3?</code></pre><p><strong>[样例输出]</strong></p><pre><code>5141710</code></pre><p><strong>[数据范围与约定]</strong></p><pre><code>对于30%的数据，1 ≤ n, m ≤ 1000。对于另20%的数据，地图是一条链，或者一朵菊花。对于100%的数据，1 ≤ n, m ≤ 10^5, 1 ≤ x, y ≤ n, x ≠ y, 1 ≤ z ≤ 10^9。</code></pre><p><strong>[题解]</strong></p><p>如果在$a_1,a_2…a_k$这些点上有异象石，则所需代价就是按照DFS序依次遍历这$k$个点再回到根的总距离。<br>这个距离数还等于$a_1,a_2…a_k$排成一个环形序列，相邻两个点的距离之和。<br>因此用set维护有异象石的点构成的DFS序，用一个全局变量记录答案，插入、删除时更新set的同时利用LCA算法更新答案。</p><p><strong>[参考代码]</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 110000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOE -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int64 long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, y, z, v;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">int64 ans, dis[maxn], g[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">20</span>], dep[maxn], dfn[maxn], seq[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edgeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> vertexTo;</span><br><span class="line"><span class="keyword">int</span> edgeNext;</span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">edgeNode edges[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> heads[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> numEdges = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(heads, NOE, <span class="keyword">sizeof</span>(heads)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">numEdges++;</span><br><span class="line">edges[numEdges].vertexTo = vertex2;</span><br><span class="line">edges[numEdges].weight = weight;</span><br><span class="line">edges[numEdges].edgeNext = heads[vertex1];</span><br><span class="line">heads[vertex1] = numEdges;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addDuplexEdge</span><span class="params">(<span class="keyword">int</span> vertex1, <span class="keyword">int</span> vertex2, <span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">addEdge(vertex1, vertex2, weight);</span><br><span class="line">addEdge(vertex2, vertex1, weight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rDFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">f[x][<span class="number">0</span>] = fa;</span><br><span class="line">dep[x] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">dfn[x] = ++cnt;</span><br><span class="line">seq[cnt] = x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = heads[x]; i != NOE; i = edges[i].edgeNext) &#123;</span><br><span class="line"><span class="keyword">int</span> vt = edges[i].vertexTo;</span><br><span class="line"><span class="keyword">if</span> (vt != fa) &#123;</span><br><span class="line">dis[vt] = dis[x] + edges[i].weight;</span><br><span class="line">rDFS(vt, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">initFa</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">f[j][i] = f[f[j][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[x] &lt; dep[y]) swap(x, y);</span><br><span class="line"><span class="keyword">int</span> t = dep[x] - dep[y];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">16</span>; ++i)</span><br><span class="line"><span class="keyword">if</span> (t &amp; (<span class="number">1</span> &lt;&lt; i)) x = f[x][i];</span><br><span class="line"><span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">16</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="keyword">if</span> (f[x][i] != f[y][i]) &#123;</span><br><span class="line">x = f[x][i];</span><br><span class="line">y = f[y][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> int64 <span class="title">getDist</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dis[x] + dis[y] - dis[LCA(x, y)] * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> &amp;l, <span class="keyword">int</span> &amp;r)</span> </span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = s.lower_bound(x);</span><br><span class="line"><span class="keyword">if</span> (it != s.end()) r = *it;</span><br><span class="line"><span class="keyword">else</span> r = *s.begin();</span><br><span class="line"><span class="keyword">if</span> (it == s.begin()) it = s.end();</span><br><span class="line">l = *(--it);</span><br><span class="line">l = seq[l];</span><br><span class="line">r = seq[r];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!s.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line">find(dfn[x], l, r);</span><br><span class="line">ans -= g[r];</span><br><span class="line">g[x] = getDist(l, x);</span><br><span class="line">g[r] = getDist(x, r);</span><br><span class="line">ans += g[x] + g[r];</span><br><span class="line">&#125; <span class="keyword">else</span> g[x] = <span class="number">0</span>;</span><br><span class="line">s.insert(dfn[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line">s.erase(dfn[x]);</span><br><span class="line"><span class="keyword">if</span> (!s.empty()) &#123;</span><br><span class="line">find(dfn[x], l, r);</span><br><span class="line">ans -= g[x] + g[r];</span><br><span class="line">g[r] = getDist(l, r);</span><br><span class="line">&#125;</span><br><span class="line">ans += g[r];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"stone.in"</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"stone.out"</span>)</span></span>;</span><br><span class="line">in.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line">in &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">in &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">addDuplexEdge(x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rDFS(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">initFa();</span><br><span class="line"></span><br><span class="line">in &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">in &gt;&gt; op;</span><br><span class="line"><span class="keyword">switch</span> (op) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span> : &#123;</span><br><span class="line">in &gt;&gt; v;</span><br><span class="line">insert(v);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span> : &#123;</span><br><span class="line">in &gt;&gt; v;</span><br><span class="line">erase(v);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'?'</span> : &#123;</span><br><span class="line">out &lt;&lt; ans / <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这道题必须一次操作更新一次答案，否则会 TLE</span></span><br></pre></td></tr></table></figure><p>此处附上 std::set 的<a href="https://zh.cppreference.com/w/cpp/container/set" target="_blank" rel="noopener">用法</a></p><p><strong>[评价]</strong></p><p>对于没有做过的同学来说，思维难度还是比较大的，这种方法就直接记住就行了，要用的时候直接拿出来用。</p><h3 id="T3-序列变换（本次重点！！！）"><a href="#T3-序列变换（本次重点！！！）" class="headerlink" title="T3 序列变换（本次重点！！！）"></a>T3 序列变换（本次重点！！！）</h3><p><strong>[题目描述]</strong></p><p>给定一个长度为$N$的数列$A_i$。<br>你可以对数列进行若干次操作，每次操作可以从数列中任选一个数，把它移动到数列的开头或者结尾。<br>求最少经过多少次操作，可以把数列变成单调不减的。“单调不减”意味着数列中的任意一个数都不大于排在它后边的数。</p><p><strong>[输入格式]</strong></p><pre><code>第一行是一个正整数N。第二行是N个正整数Ai。</code></pre><p><strong>[输出格式]</strong></p><pre><code>输出一个整数，表示最少需要的操作次数。</code></pre><p><strong>[样例输入]</strong></p><pre><code>56 3 7 8 6</code></pre><p><strong>[样例输出]</strong></p><pre><code>2</code></pre><p><strong>[数据范围与约定]</strong></p><pre><code>对于30%的数据，满足1≤n≤10。对于60% 的数据，满足1≤n≤1000。对于100% 的数据，满足1≤n≤1000000，1≤Ai≤1000000。</code></pre><p><strong>[题解]</strong></p><p>经过分析可以发现，最优解情况下，需要保持一个子序列不动，这个子序列满足：</p><ol><li>子序列单调递增；</li><li>若子序列中最小数是$L$，最大数是$R$，则子序列必须包含$[L+1,R-1]$中的数列中的所有数。</li></ol><p>用单调队列求出满足这两个条件的子序列的最大长度，用$n$减去就是答案。<br>即这个子序列保持不动，其余数向前或后移动一次。</p><p><strong>[参考代码]</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下为 std 代码，不感兴趣的同学可以跳过</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> a[SIZE], q[SIZE];</span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b[SIZE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"change.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"change.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">b[a[i]].push_back(i);</span><br><span class="line">m = max(m, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">reverse(b[i].begin(), b[i].end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b[i].size(); j++) &#123;</span><br><span class="line"><span class="keyword">int</span> k = b[i][j];</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r &amp;&amp; q[r] &gt; k) &#123;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r &amp;&amp; a[q[l]] &lt; a[q[r]]) l++;</span><br><span class="line">r--;</span><br><span class="line">&#125;</span><br><span class="line">ans = max(ans, r - l + <span class="number">2</span> + j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = b[i].size() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">q[++r] = b[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n - ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下是考试时瞎打的代码：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1100000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, A[maxn], B[maxn];</span><br><span class="line"><span class="keyword">int</span> ans = -INF;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (A[x] == A[y]) <span class="keyword">return</span> x &lt; y;</span><br><span class="line"><span class="keyword">return</span> A[x] &lt; A[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"change.in"</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"change.out"</span>)</span></span>;</span><br><span class="line">in.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">in &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">in &gt;&gt; A[i];</span><br><span class="line">B[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">sort(B + <span class="number">1</span>, B + n + <span class="number">1</span>, compare);</span><br><span class="line"><span class="comment">// B 数组记录 A 中元素的 位置，且以 A 中相应的元素大小为优先排序</span></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i = j + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = i; i &lt; n &amp;&amp; B[j] &lt; B[j + <span class="number">1</span>]; j++);</span><br><span class="line">len = j - i + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 以上这段先找出从 i 开始序号递增的子序列的最大长度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i - <span class="number">1</span>; k != <span class="number">0</span> &amp;&amp; A[B[k]] == A[B[i - <span class="number">1</span>]]; --k)</span><br><span class="line"><span class="keyword">if</span> (B[k] &lt; B[i]) len++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= n &amp;&amp; A[B[j + <span class="number">1</span>]] == A[B[k]]; ++k)</span><br><span class="line"><span class="keyword">if</span> (B[j] &lt; B[k]) len++;</span><br><span class="line"><span class="comment">// 因为前面 i 直接变为 j + 1，所以可能出现重复的数字忽略的情况</span></span><br><span class="line"><span class="comment">// 故在上面两个循环中：</span></span><br><span class="line"><span class="comment">// 一个向左扫，一个向右扫，同时判断在原数组中的位置是否递增</span></span><br><span class="line"><span class="comment">// 这种方法速度会更快一点。</span></span><br><span class="line">ans = max(ans, len);</span><br><span class="line"><span class="comment">// 获取最大长度</span></span><br><span class="line">&#125;</span><br><span class="line">out &lt;&lt; n - ans;</span><br><span class="line"><span class="comment">// 相减</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 考完试后自己都无法记起这是什么神奇的算法，不过仔细想想还是能想起来的。</span></span><br></pre></td></tr></table></figure><p><strong>[评价]</strong></p><p>这道题既考验思维又考验代码能力，好题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>首先，仍然要记住仔细读题，这次第一题就是因为读题不仔细，思考不充分才出问题的。<br>其次，有些代码还是好好打打草稿，写写流程图比较好，防止像第三题一样想不起来（#滑稽）。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;今天创历史新高$290$分，第三道题考完自己都没看出自己用了啥方法（Orz），感觉自已要去补数据结构……另外第一道题实在是坑……十分啊！！&lt;/p&gt;
    
    </summary>
    
      <category term="NOIP" scheme="http://walesexcitedmei.github.io/categories/NOIP/"/>
    
    
      <category term="NOIP 模拟" scheme="http://walesexcitedmei.github.io/tags/NOIP-%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="题解" scheme="http://walesexcitedmei.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="神题" scheme="http://walesexcitedmei.github.io/tags/%E7%A5%9E%E9%A2%98/"/>
    
  </entry>
  
</feed>
